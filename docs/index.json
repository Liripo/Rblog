[{"content":"\r\r\r\r\r\r\r\rcode.sourceCode  span { display: inline-block; line-height: 1.25; }\rcode.sourceCode  span { color: inherit; text-decoration: inherit; }\rcode.sourceCode  span:empty { height: 1.2em; }\r.sourceCode { overflow: visible; }\rcode.sourceCode { white-space: pre; position: relative; }\rdiv.sourceCode { margin: 1em 0; }\rpre.sourceCode { margin: 0; }\r@media screen {\rdiv.sourceCode { overflow: auto; }\r}\r@media print {\rcode.sourceCode { white-space: pre-wrap; }\rcode.sourceCode  span { text-indent: -5em; padding-left: 5em; }\r}\rpre.numberSource code\r{ counter-reset: source-line 0; }\rpre.numberSource code  span\r{ position: relative; left: -4em; counter-increment: source-line; }\rpre.numberSource code  span  a:first-child::before\r{ content: counter(source-line);\rposition: relative; left: -1em; text-align: right; vertical-align: baseline;\rborder: none; display: inline-block;\r-webkit-touch-callout: none; -webkit-user-select: none;\r-khtml-user-select: none; -moz-user-select: none;\r-ms-user-select: none; user-select: none;\rpadding: 0 4px; width: 4em;\r}\rpre.numberSource { margin-left: 3em; padding-left: 4px; }\rdiv.sourceCode\r{ color: #cccccc; background-color: #303030; }\r@media screen {\rcode.sourceCode  span  a:first-child::before { text-decoration: underline; }\r}\rcode span.al { color: #ffcfaf; } /* Alert */\rcode span.an { color: #7f9f7f; font-weight: bold; } /* Annotation */\rcode span.at { } /* Attribute */\rcode span.bn { color: #dca3a3; } /* BaseN */\rcode span.bu { } /* BuiltIn */\rcode span.cf { color: #f0dfaf; } /* ControlFlow */\rcode span.ch { color: #dca3a3; } /* Char */\rcode span.cn { color: #dca3a3; font-weight: bold; } /* Constant */\rcode span.co { color: #7f9f7f; } /* Comment */\rcode span.cv { color: #7f9f7f; font-weight: bold; } /* CommentVar */\rcode span.do { color: #7f9f7f; } /* Documentation */\rcode span.dt { color: #dfdfbf; } /* DataType */\rcode span.dv { color: #dcdccc; } /* DecVal */\rcode span.er { color: #c3bf9f; } /* Error */\rcode span.ex { } /* Extension */\rcode span.fl { color: #c0bed1; } /* Float */\rcode span.fu { color: #efef8f; } /* Function */\rcode span.im { } /* Import */\rcode span.in { color: #7f9f7f; font-weight: bold; } /* Information */\rcode span.kw { color: #f0dfaf; } /* Keyword */\rcode span.op { color: #f0efd0; } /* Operator */\rcode span.ot { color: #efef8f; } /* Other */\rcode span.pp { color: #ffcfaf; font-weight: bold; } /* Preprocessor */\rcode span.sc { color: #dca3a3; } /* SpecialChar */\rcode span.ss { color: #cc9393; } /* SpecialString */\rcode span.st { color: #cc9393; } /* String */\rcode span.va { } /* Variable */\rcode span.vs { color: #cc9393; } /* VerbatimString */\rcode span.wa { color: #7f9f7f; font-weight: bold; } /* Warning */\r\r\r热图\r\r\rlibrary(tidyverse)\r以mtcars每一列进行归一化的数据为例，\nnormalize \u0026lt;-function(x){\r return((x-min(x)) /(max(x)-min(x)))\r}\rmt \u0026lt;-map_dfc(mtcars,~normalize(.x))\r`%\u0026lt;\u0026gt;%` \u0026lt;-magrittr::`%\u0026lt;\u0026gt;%`\rmt %\u0026lt;\u0026gt;%mutate(rownames = rownames(mtcars)) %\u0026gt;%\rpivot_longer(cols = mpg:carb,names_to = \u0026quot;colnames\u0026quot;,values_to = \u0026quot;values\u0026quot;)\rmt %\u0026gt;%DT::datatable()\r\r{\"x\":{\"filter\":\"none\",\"data\":[[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\",\"32\",\"33\",\"34\",\"35\",\"36\",\"37\",\"38\",\"39\",\"40\",\"41\",\"42\",\"43\",\"44\",\"45\",\"46\",\"47\",\"48\",\"49\",\"50\",\"51\",\"52\",\"53\",\"54\",\"55\",\"56\",\"57\",\"58\",\"59\",\"60\",\"61\",\"62\",\"63\",\"64\",\"65\",\"66\",\"67\",\"68\",\"69\",\"70\",\"71\",\"72\",\"73\",\"74\",\"75\",\"76\",\"77\",\"78\",\"79\",\"80\",\"81\",\"82\",\"83\",\"84\",\"85\",\"86\",\"87\",\"88\",\"89\",\"90\",\"91\",\"92\",\"93\",\"94\",\"95\",\"96\",\"97\",\"98\",\"99\",\"100\",\"101\",\"102\",\"103\",\"104\",\"105\",\"106\",\"107\",\"108\",\"109\",\"110\",\"111\",\"112\",\"113\",\"114\",\"115\",\"116\",\"117\",\"118\",\"119\",\"120\",\"121\",\"122\",\"123\",\"124\",\"125\",\"126\",\"127\",\"128\",\"129\",\"130\",\"131\",\"132\",\"133\",\"134\",\"135\",\"136\",\"137\",\"138\",\"139\",\"140\",\"141\",\"142\",\"143\",\"144\",\"145\",\"146\",\"147\",\"148\",\"149\",\"150\",\"151\",\"152\",\"153\",\"154\",\"155\",\"156\",\"157\",\"158\",\"159\",\"160\",\"161\",\"162\",\"163\",\"164\",\"165\",\"166\",\"167\",\"168\",\"169\",\"170\",\"171\",\"172\",\"173\",\"174\",\"175\",\"176\",\"177\",\"178\",\"179\",\"180\",\"181\",\"182\",\"183\",\"184\",\"185\",\"186\",\"187\",\"188\",\"189\",\"190\",\"191\",\"192\",\"193\",\"194\",\"195\",\"196\",\"197\",\"198\",\"199\",\"200\",\"201\",\"202\",\"203\",\"204\",\"205\",\"206\",\"207\",\"208\",\"209\",\"210\",\"211\",\"212\",\"213\",\"214\",\"215\",\"216\",\"217\",\"218\",\"219\",\"220\",\"221\",\"222\",\"223\",\"224\",\"225\",\"226\",\"227\",\"228\",\"229\",\"230\",\"231\",\"232\",\"233\",\"234\",\"235\",\"236\",\"237\",\"238\",\"239\",\"240\",\"241\",\"242\",\"243\",\"244\",\"245\",\"246\",\"247\",\"248\",\"249\",\"250\",\"251\",\"252\",\"253\",\"254\",\"255\",\"256\",\"257\",\"258\",\"259\",\"260\",\"261\",\"262\",\"263\",\"264\",\"265\",\"266\",\"267\",\"268\",\"269\",\"270\",\"271\",\"272\",\"273\",\"274\",\"275\",\"276\",\"277\",\"278\",\"279\",\"280\",\"281\",\"282\",\"283\",\"284\",\"285\",\"286\",\"287\",\"288\",\"289\",\"290\",\"291\",\"292\",\"293\",\"294\",\"295\",\"296\",\"297\",\"298\",\"299\",\"300\",\"301\",\"302\",\"303\",\"304\",\"305\",\"306\",\"307\",\"308\",\"309\",\"310\",\"311\",\"312\",\"313\",\"314\",\"315\",\"316\",\"317\",\"318\",\"319\",\"320\",\"321\",\"322\",\"323\",\"324\",\"325\",\"326\",\"327\",\"328\",\"329\",\"330\",\"331\",\"332\",\"333\",\"334\",\"335\",\"336\",\"337\",\"338\",\"339\",\"340\",\"341\",\"342\",\"343\",\"344\",\"345\",\"346\",\"347\",\"348\",\"349\",\"350\",\"351\",\"352\"],[\"Mazda RX4\",\"Mazda RX4\",\"Mazda RX4\",\"Mazda RX4\",\"Mazda RX4\",\"Mazda RX4\",\"Mazda RX4\",\"Mazda RX4\",\"Mazda RX4\",\"Mazda RX4\",\"Mazda RX4\",\"Mazda RX4 Wag\",\"Mazda RX4 Wag\",\"Mazda RX4 Wag\",\"Mazda RX4 Wag\",\"Mazda RX4 Wag\",\"Mazda RX4 Wag\",\"Mazda RX4 Wag\",\"Mazda RX4 Wag\",\"Mazda RX4 Wag\",\"Mazda RX4 Wag\",\"Mazda RX4 Wag\",\"Datsun 710\",\"Datsun 710\",\"Datsun 710\",\"Datsun 710\",\"Datsun 710\",\"Datsun 710\",\"Datsun 710\",\"Datsun 710\",\"Datsun 710\",\"Datsun 710\",\"Datsun 710\",\"Hornet 4 Drive\",\"Hornet 4 Drive\",\"Hornet 4 Drive\",\"Hornet 4 Drive\",\"Hornet 4 Drive\",\"Hornet 4 Drive\",\"Hornet 4 Drive\",\"Hornet 4 Drive\",\"Hornet 4 Drive\",\"Hornet 4 Drive\",\"Hornet 4 Drive\",\"Hornet Sportabout\",\"Hornet Sportabout\",\"Hornet Sportabout\",\"Hornet Sportabout\",\"Hornet Sportabout\",\"Hornet Sportabout\",\"Hornet Sportabout\",\"Hornet Sportabout\",\"Hornet Sportabout\",\"Hornet Sportabout\",\"Hornet Sportabout\",\"Valiant\",\"Valiant\",\"Valiant\",\"Valiant\",\"Valiant\",\"Valiant\",\"Valiant\",\"Valiant\",\"Valiant\",\"Valiant\",\"Valiant\",\"Duster 360\",\"Duster 360\",\"Duster 360\",\"Duster 360\",\"Duster 360\",\"Duster 360\",\"Duster 360\",\"Duster 360\",\"Duster 360\",\"Duster 360\",\"Duster 360\",\"Merc 240D\",\"Merc 240D\",\"Merc 240D\",\"Merc 240D\",\"Merc 240D\",\"Merc 240D\",\"Merc 240D\",\"Merc 240D\",\"Merc 240D\",\"Merc 240D\",\"Merc 240D\",\"Merc 230\",\"Merc 230\",\"Merc 230\",\"Merc 230\",\"Merc 230\",\"Merc 230\",\"Merc 230\",\"Merc 230\",\"Merc 230\",\"Merc 230\",\"Merc 230\",\"Merc 280\",\"Merc 280\",\"Merc 280\",\"Merc 280\",\"Merc 280\",\"Merc 280\",\"Merc 280\",\"Merc 280\",\"Merc 280\",\"Merc 280\",\"Merc 280\",\"Merc 280C\",\"Merc 280C\",\"Merc 280C\",\"Merc 280C\",\"Merc 280C\",\"Merc 280C\",\"Merc 280C\",\"Merc 280C\",\"Merc 280C\",\"Merc 280C\",\"Merc 280C\",\"Merc 450SE\",\"Merc 450SE\",\"Merc 450SE\",\"Merc 450SE\",\"Merc 450SE\",\"Merc 450SE\",\"Merc 450SE\",\"Merc 450SE\",\"Merc 450SE\",\"Merc 450SE\",\"Merc 450SE\",\"Merc 450SL\",\"Merc 450SL\",\"Merc 450SL\",\"Merc 450SL\",\"Merc 450SL\",\"Merc 450SL\",\"Merc 450SL\",\"Merc 450SL\",\"Merc 450SL\",\"Merc 450SL\",\"Merc 450SL\",\"Merc 450SLC\",\"Merc 450SLC\",\"Merc 450SLC\",\"Merc 450SLC\",\"Merc 450SLC\",\"Merc 450SLC\",\"Merc 450SLC\",\"Merc 450SLC\",\"Merc 450SLC\",\"Merc 450SLC\",\"Merc 450SLC\",\"Cadillac Fleetwood\",\"Cadillac Fleetwood\",\"Cadillac Fleetwood\",\"Cadillac Fleetwood\",\"Cadillac Fleetwood\",\"Cadillac Fleetwood\",\"Cadillac Fleetwood\",\"Cadillac Fleetwood\",\"Cadillac Fleetwood\",\"Cadillac Fleetwood\",\"Cadillac Fleetwood\",\"Lincoln Continental\",\"Lincoln Continental\",\"Lincoln Continental\",\"Lincoln Continental\",\"Lincoln Continental\",\"Lincoln Continental\",\"Lincoln Continental\",\"Lincoln Continental\",\"Lincoln Continental\",\"Lincoln Continental\",\"Lincoln Continental\",\"Chrysler Imperial\",\"Chrysler Imperial\",\"Chrysler Imperial\",\"Chrysler Imperial\",\"Chrysler Imperial\",\"Chrysler Imperial\",\"Chrysler Imperial\",\"Chrysler Imperial\",\"Chrysler Imperial\",\"Chrysler Imperial\",\"Chrysler Imperial\",\"Fiat 128\",\"Fiat 128\",\"Fiat 128\",\"Fiat 128\",\"Fiat 128\",\"Fiat 128\",\"Fiat 128\",\"Fiat 128\",\"Fiat 128\",\"Fiat 128\",\"Fiat 128\",\"Honda Civic\",\"Honda Civic\",\"Honda Civic\",\"Honda Civic\",\"Honda Civic\",\"Honda Civic\",\"Honda Civic\",\"Honda Civic\",\"Honda Civic\",\"Honda Civic\",\"Honda Civic\",\"Toyota Corolla\",\"Toyota Corolla\",\"Toyota Corolla\",\"Toyota Corolla\",\"Toyota Corolla\",\"Toyota Corolla\",\"Toyota Corolla\",\"Toyota Corolla\",\"Toyota Corolla\",\"Toyota Corolla\",\"Toyota Corolla\",\"Toyota Corona\",\"Toyota Corona\",\"Toyota Corona\",\"Toyota Corona\",\"Toyota Corona\",\"Toyota Corona\",\"Toyota Corona\",\"Toyota Corona\",\"Toyota Corona\",\"Toyota Corona\",\"Toyota Corona\",\"Dodge Challenger\",\"Dodge Challenger\",\"Dodge Challenger\",\"Dodge Challenger\",\"Dodge Challenger\",\"Dodge Challenger\",\"Dodge Challenger\",\"Dodge Challenger\",\"Dodge Challenger\",\"Dodge Challenger\",\"Dodge Challenger\",\"AMC Javelin\",\"AMC Javelin\",\"AMC Javelin\",\"AMC Javelin\",\"AMC Javelin\",\"AMC Javelin\",\"AMC Javelin\",\"AMC Javelin\",\"AMC Javelin\",\"AMC Javelin\",\"AMC Javelin\",\"Camaro Z28\",\"Camaro Z28\",\"Camaro Z28\",\"Camaro Z28\",\"Camaro Z28\",\"Camaro Z28\",\"Camaro Z28\",\"Camaro Z28\",\"Camaro Z28\",\"Camaro Z28\",\"Camaro Z28\",\"Pontiac Firebird\",\"Pontiac Firebird\",\"Pontiac Firebird\",\"Pontiac Firebird\",\"Pontiac Firebird\",\"Pontiac Firebird\",\"Pontiac Firebird\",\"Pontiac Firebird\",\"Pontiac Firebird\",\"Pontiac Firebird\",\"Pontiac Firebird\",\"Fiat X1-9\",\"Fiat X1-9\",\"Fiat X1-9\",\"Fiat X1-9\",\"Fiat X1-9\",\"Fiat X1-9\",\"Fiat X1-9\",\"Fiat X1-9\",\"Fiat X1-9\",\"Fiat X1-9\",\"Fiat X1-9\",\"Porsche 914-2\",\"Porsche 914-2\",\"Porsche 914-2\",\"Porsche 914-2\",\"Porsche 914-2\",\"Porsche 914-2\",\"Porsche 914-2\",\"Porsche 914-2\",\"Porsche 914-2\",\"Porsche 914-2\",\"Porsche 914-2\",\"Lotus Europa\",\"Lotus Europa\",\"Lotus Europa\",\"Lotus Europa\",\"Lotus Europa\",\"Lotus Europa\",\"Lotus Europa\",\"Lotus Europa\",\"Lotus Europa\",\"Lotus Europa\",\"Lotus Europa\",\"Ford Pantera L\",\"Ford Pantera L\",\"Ford Pantera L\",\"Ford Pantera L\",\"Ford Pantera L\",\"Ford Pantera L\",\"Ford Pantera L\",\"Ford Pantera L\",\"Ford Pantera L\",\"Ford Pantera L\",\"Ford Pantera L\",\"Ferrari Dino\",\"Ferrari Dino\",\"Ferrari Dino\",\"Ferrari Dino\",\"Ferrari Dino\",\"Ferrari Dino\",\"Ferrari Dino\",\"Ferrari Dino\",\"Ferrari Dino\",\"Ferrari Dino\",\"Ferrari Dino\",\"Maserati Bora\",\"Maserati Bora\",\"Maserati Bora\",\"Maserati Bora\",\"Maserati Bora\",\"Maserati Bora\",\"Maserati Bora\",\"Maserati Bora\",\"Maserati Bora\",\"Maserati Bora\",\"Maserati Bora\",\"Volvo 142E\",\"Volvo 142E\",\"Volvo 142E\",\"Volvo 142E\",\"Volvo 142E\",\"Volvo 142E\",\"Volvo 142E\",\"Volvo 142E\",\"Volvo 142E\",\"Volvo 142E\",\"Volvo 142E\"],[\"mpg\",\"cyl\",\"disp\",\"hp\",\"drat\",\"wt\",\"qsec\",\"vs\",\"am\",\"gear\",\"carb\",\"mpg\",\"cyl\",\"disp\",\"hp\",\"drat\",\"wt\",\"qsec\",\"vs\",\"am\",\"gear\",\"carb\",\"mpg\",\"cyl\",\"disp\",\"hp\",\"drat\",\"wt\",\"qsec\",\"vs\",\"am\",\"gear\",\"carb\",\"mpg\",\"cyl\",\"disp\",\"hp\",\"drat\",\"wt\",\"qsec\",\"vs\",\"am\",\"gear\",\"carb\",\"mpg\",\"cyl\",\"disp\",\"hp\",\"drat\",\"wt\",\"qsec\",\"vs\",\"am\",\"gear\",\"carb\",\"mpg\",\"cyl\",\"disp\",\"hp\",\"drat\",\"wt\",\"qsec\",\"vs\",\"am\",\"gear\",\"carb\",\"mpg\",\"cyl\",\"disp\",\"hp\",\"drat\",\"wt\",\"qsec\",\"vs\",\"am\",\"gear\",\"carb\",\"mpg\",\"cyl\",\"disp\",\"hp\",\"drat\",\"wt\",\"qsec\",\"vs\",\"am\",\"gear\",\"carb\",\"mpg\",\"cyl\",\"disp\",\"hp\",\"drat\",\"wt\",\"qsec\",\"vs\",\"am\",\"gear\",\"carb\",\"mpg\",\"cyl\",\"disp\",\"hp\",\"drat\",\"wt\",\"qsec\",\"vs\",\"am\",\"gear\",\"carb\",\"mpg\",\"cyl\",\"disp\",\"hp\",\"drat\",\"wt\",\"qsec\",\"vs\",\"am\",\"gear\",\"carb\",\"mpg\",\"cyl\",\"disp\",\"hp\",\"drat\",\"wt\",\"qsec\",\"vs\",\"am\",\"gear\",\"carb\",\"mpg\",\"cyl\",\"disp\",\"hp\",\"drat\",\"wt\",\"qsec\",\"vs\",\"am\",\"gear\",\"carb\",\"mpg\",\"cyl\",\"disp\",\"hp\",\"drat\",\"wt\",\"qsec\",\"vs\",\"am\",\"gear\",\"carb\",\"mpg\",\"cyl\",\"disp\",\"hp\",\"drat\",\"wt\",\"qsec\",\"vs\",\"am\",\"gear\",\"carb\",\"mpg\",\"cyl\",\"disp\",\"hp\",\"drat\",\"wt\",\"qsec\",\"vs\",\"am\",\"gear\",\"carb\",\"mpg\",\"cyl\",\"disp\",\"hp\",\"drat\",\"wt\",\"qsec\",\"vs\",\"am\",\"gear\",\"carb\",\"mpg\",\"cyl\",\"disp\",\"hp\",\"drat\",\"wt\",\"qsec\",\"vs\",\"am\",\"gear\",\"carb\",\"mpg\",\"cyl\",\"disp\",\"hp\",\"drat\",\"wt\",\"qsec\",\"vs\",\"am\",\"gear\",\"carb\",\"mpg\",\"cyl\",\"disp\",\"hp\",\"drat\",\"wt\",\"qsec\",\"vs\",\"am\",\"gear\",\"carb\",\"mpg\",\"cyl\",\"disp\",\"hp\",\"drat\",\"wt\",\"qsec\",\"vs\",\"am\",\"gear\",\"carb\",\"mpg\",\"cyl\",\"disp\",\"hp\",\"drat\",\"wt\",\"qsec\",\"vs\",\"am\",\"gear\",\"carb\",\"mpg\",\"cyl\",\"disp\",\"hp\",\"drat\",\"wt\",\"qsec\",\"vs\",\"am\",\"gear\",\"carb\",\"mpg\",\"cyl\",\"disp\",\"hp\",\"drat\",\"wt\",\"qsec\",\"vs\",\"am\",\"gear\",\"carb\",\"mpg\",\"cyl\",\"disp\",\"hp\",\"drat\",\"wt\",\"qsec\",\"vs\",\"am\",\"gear\",\"carb\",\"mpg\",\"cyl\",\"disp\",\"hp\",\"drat\",\"wt\",\"qsec\",\"vs\",\"am\",\"gear\",\"carb\",\"mpg\",\"cyl\",\"disp\",\"hp\",\"drat\",\"wt\",\"qsec\",\"vs\",\"am\",\"gear\",\"carb\",\"mpg\",\"cyl\",\"disp\",\"hp\",\"drat\",\"wt\",\"qsec\",\"vs\",\"am\",\"gear\",\"carb\",\"mpg\",\"cyl\",\"disp\",\"hp\",\"drat\",\"wt\",\"qsec\",\"vs\",\"am\",\"gear\",\"carb\",\"mpg\",\"cyl\",\"disp\",\"hp\",\"drat\",\"wt\",\"qsec\",\"vs\",\"am\",\"gear\",\"carb\",\"mpg\",\"cyl\",\"disp\",\"hp\",\"drat\",\"wt\",\"qsec\",\"vs\",\"am\",\"gear\",\"carb\",\"mpg\",\"cyl\",\"disp\",\"hp\",\"drat\",\"wt\",\"qsec\",\"vs\",\"am\",\"gear\",\"carb\"],[0.451063829787234,0.5,0.221751060114742,0.204946996466431,0.525345622119816,0.283047813858348,0.233333333333333,0,1,0.5,0.428571428571429,0.451063829787234,0.5,0.221751060114742,0.204946996466431,0.525345622119816,0.348248529787778,0.3,0,1,0.5,0.428571428571429,0.527659574468085,0,0.0920429034671988,0.144876325088339,0.502304147465438,0.20634108923549,0.489285714285714,1,1,0.5,0,0.468085106382979,0.5,0.466201047642804,0.204946996466431,0.147465437788019,0.435182817693684,0.588095238095238,1,0,0,0,0.353191489361702,1,0.720628585682215,0.434628975265018,0.179723502304148,0.492712861160828,0.3,0,0,0,0.142857142857143,0.327659574468085,0.5,0.383886255924171,0.187279151943463,0,0.497826642802352,0.680952380952381,1,0,0,0,0.165957446808511,1,0.720628585682215,0.681978798586572,0.207373271889401,0.525952441830734,0.15952380952381,0,0,0,0.428571428571429,0.595744680851064,0,0.188575704664505,0.0353356890459364,0.428571428571429,0.42879059064178,0.654761904761905,1,0,0.5,0.142857142857143,0.527659574468085,0,0.173858817660264,0.151943462897526,0.534562211981567,0.418563027358732,1,1,0,0.5,0.142857142857143,0.374468085106383,0.5,0.240708406086306,0.250883392226148,0.534562211981567,0.492712861160828,0.452380952380953,1,0,0.5,0.428571428571429,0.314893617021277,0.5,0.240708406086306,0.250883392226148,0.534562211981567,0.492712861160828,0.523809523809524,1,0,0.5,0.428571428571429,0.25531914893617,1,0.510601147418309,0.452296819787986,0.142857142857143,0.653796982868831,0.345238095238095,0,0,0,0.285714285714286,0.293617021276596,1,0.510601147418309,0.452296819787986,0.142857142857143,0.566862694962925,0.369047619047619,0,0,0,0.285714285714286,0.204255319148936,1,0.510601147418309,0.452296819787986,0.142857142857143,0.579647149066735,0.416666666666667,0,0,0,0.285714285714286,0,1,1,0.540636042402827,0.078341013824885,0.955510099718742,0.414285714285714,0,0,0,0.428571428571429,0,1,0.970067348465952,0.575971731448763,0.110599078341014,1,0.395238095238095,0,0,0,0.428571428571429,0.182978723404255,1,0.920179595909204,0.628975265017668,0.216589861751152,0.97980056251598,0.347619047619048,0,0,0,0.428571428571429,0.936170212765957,0,0.018957345971564,0.049469964664311,0.608294930875576,0.175658399386346,0.591666666666667,1,1,0.5,0,0.851063829787234,0,0.0114741830880519,0,1,0.0260802863717719,0.478571428571429,1,1,0.5,0.142857142857143,1,0,0,0.0459363957597173,0.672811059907834,0.0823318844285349,0.642857142857143,1,1,0.5,0,0.472340425531915,0,0.122224993764031,0.159010600706714,0.433179723502304,0.243416006136538,0.655952380952381,1,0,0,0,0.217021276595745,1,0.615864305313046,0.346289752650177,0,0.513167987726924,0.282142857142857,0,0,0,0.142857142857143,0.204255319148936,1,0.580942878523323,0.346289752650177,0.179723502304148,0.491434415750447,0.333333333333333,0,0,0,0.142857142857143,0.123404255319149,1,0.695684709403841,0.681978798586572,0.447004608294931,0.594988493991306,0.108333333333333,0,0,0,0.428571428571429,0.374468085106383,1,0.82040409079571,0.434628975265018,0.147465437788019,0.596266939401688,0.303571428571429,0,0,0,0.142857142857143,0.719148936170213,0,0.0197056622599152,0.049469964664311,0.608294930875576,0.107900792636154,0.523809523809524,1,1,0.5,0,0.663829787234043,0,0.122723871289598,0.137809187279152,0.769585253456221,0.160317054461775,0.261904761904762,0,1,1,0.142857142857143,0.851063829787234,0,0.0598653030680968,0.215547703180212,0.465437788018433,0,0.285714285714286,1,1,1,0.142857142857143,0.229787234042553,1,0.698179097031679,0.749116607773852,0.672811059907834,0.423676809000256,0,0,1,1,0.428571428571429,0.395744680851064,0.5,0.184335245697181,0.434628975265018,0.3963133640553,0.321401176169778,0.119047619047619,0,1,1,0.714285714285714,0.195744680851064,1,0.57345971563981,1,0.359447004608295,0.525952441830734,0.0119047619047619,0,1,1,1,0.468085106382979,0,0.124469942629085,0.201413427561837,0.622119815668203,0.323958066990539,0.488095238095238,1,1,0.5,0.142857142857143]],\"container\":\"\\n \\n \\n  \\n rownames\\n colnames\\n values\\n \\n \\n\",\"options\":{\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":3},{\"orderable\":false,\"targets\":0}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}\r得到了ggplot2接受的长数据。\np \u0026lt;-ggplot(mt,aes(x = rownames,y = colnames)) \r然后先规定一下x轴，y轴的列顺序,【x轴标签改成首字母。】\np \u0026lt;-p +scale_x_discrete(expand = c(0,0),limits = unique(mt$rownames),\r labels = unique(mt$rownames) %\u0026gt;%str_sub(start = 1,end = 1)) +\rscale_y_discrete(expand = c(0,0),limits = unique(mt$colnames))\r热图\rp1 \u0026lt;-p +geom_tile(aes(fill = values),colour = \u0026quot;grey60\u0026quot;)\r修改颜色。\npp1 \u0026lt;-p1 +scale_fill_gradient2(low = \u0026quot;#132B43\u0026quot;,high = \u0026quot;#56B1F7\u0026quot;)\rpp2 \u0026lt;-p1 +scale_fill_viridis_b()\rpp3 \u0026lt;-p1+scale_fill_gradient2(low=\u0026quot;blue\u0026quot;, mid=\u0026quot;white\u0026quot;, \r high=\u0026quot;red\u0026quot;, space =\u0026quot;Lab\u0026quot;,midpoint = 0.5)\rpp4 \u0026lt;-p1 +scale_fill_gradientn(colours = rainbow(5))\rlibrary(patchwork)\r(pp1+pp2)/(pp3+pp4)\r使用pheatmap默认的颜色，即RcolorBrewer包的调色板RdYlBu。\np1+scale_fill_distiller(palette = \u0026quot;RdYlBu\u0026quot;)\r添加color bar注释\ntbl \u0026lt;-tibble(rownames = unique(mt$rownames))\rtbl %\u0026lt;\u0026gt;%mutate(group = c(rep(\u0026quot;A\u0026quot;,n()/2),rep(\u0026quot;B\u0026quot;,n()/2)))\ranno_colorbar \u0026lt;-ggplot(tbl,aes(x = rownames, y = 1)) +\rgeom_raster(aes(fill = group)) +\rtheme_void() +scale_x_discrete(expand = c(0,0)) +\rscale_y_discrete(expand = c(0,0))\r(p1+scale_fill_distiller(palette = \u0026quot;RdYlBu\u0026quot;)) %\u0026gt;%\raplot::insert_top(anno_colorbar,height = 0.1)\r可以看到上面稍微没有对齐\n\r","date":"2020-10-22T00:00:00Z","permalink":"https://liripo.github.io/post/ggplot2%E7%BB%98%E5%88%B6heatmap/","tags":"R","title":"ggplot2绘制heatmap"},{"content":"\rLiripo\r\r\r\r\r\r","date":null,"permalink":"https://liripo.github.io/","tags":null,"title":"Home"},{"content":"","date":null,"permalink":"https://liripo.github.io/post/","tags":null,"title":"Posts"},{"content":"","date":null,"permalink":"https://liripo.github.io/tags/r/","tags":null,"title":"R"},{"content":"","date":null,"permalink":"https://liripo.github.io/tags/","tags":null,"title":"Tags"},{"content":"","date":null,"permalink":"https://liripo.github.io/tags/bio/","tags":null,"title":"bio"},{"content":" 一般已发表文章所包含的数据可以在NCBI (SRA、GEO 等)、EMBL-EBI 等相关数据库获得。\n ncbi数据下载参考\n高通量测序知识\n下载测序数据后，可以进行质控(fastqc等)，比对(bwa,STAT,subread等，非常多)，获取counts数，之后差异分析，GO，KEGG等。当然还有call snp等。\n质控 fastqc使用，相对应的R包fastqcr，\nrqc\nfastp\nBiostrings包计算GC含量，Q20等\nlibrary(Biostrings)\rfilepath \u0026lt;- system.file(\u0026#34;extdata\u0026#34;, \u0026#34;s_1_sequence.txt\u0026#34;,\rpackage=\u0026#34;Biostrings\u0026#34;)\rqdna2 \u0026lt;- readQualityScaledDNAStringSet(filepath)\rqdna2\r#得到每一行的GC含量\r GC_content \u0026lt;- letterFrequency(DNAStringSet(qdna2), letters=\u0026#34;CG\u0026#34;,as.prob = T)\r#得到整个fastq的GC含量\r letterFrequency(DNAStringSet(qdna2), letters=\u0026#34;CG\u0026#34;,as.prob = T,collapse = T)\r#Q20，将质量分数转为数值去计算,整个文件\r qa \u0026lt;- as(quality(qdna2),\u0026#34;IntegerList\u0026#34;)\rlibrary(dplyr)\rsum_20 \u0026lt;- purrr::map_int(seq_along(qa),~length(which(qa[[.x]]\u0026gt;20)) %\u0026gt;% sum()\rsum_all \u0026lt;- quality(qdna2) %\u0026gt;% width() %\u0026gt;% sum()\rq20 \u0026lt;- sum_20/sum_all\r比对 在比对文件之前需要先要去掉adapter，得到不含有adapter 的fastq 文件。有一个flexbark可以，\nFLEXBAR -t 输出文件名 -qf i1.8 -r 输入文件 -a Adapters.fa\r我没试过去接头。\n 反正有了trimmed 数据后，就要与参考文件进行比对。目前大家所认同的比对算法 有很多，比如Bowtie2，BWA，TopHat，HISAT2 和STAR 等等。试下 综合指标 (Sahraeian 等，2017) 比较高的STAR 进行比对。\n 比对大部分需要建立索引,加快速度。代码\nSTAR --runThreadN 线程数 --runMode genomeGenerate\r--genomeDir 存放参考基因的目录 --genomeFastaFiles 参考基因组的\rfasta 文件 --sjdbGTFfile 参考基因组的gtf 文件 --sjdbOverhang\r索引长度,这个是reads长度的最大值减1，默认是100\r建立好索引就可以对数据进行比对了，比对如下：\nSTAR --genomeDir 存放参考基因的目录 --readFilesIn 输入文件(read1,if need;read2)\r--runThreadN 线程数 --outSAMtype BAM --outFileNamePrefix 输\r出文件前缀\r具体可以参考https://www.bioinfo-scrounger.com/archives/288/\ncounts数  bedtools multicov  bed文件从gtf的获取\nbedtools multicov -bams *.bam -bed bed文件 \u0026gt;reads_by_bed.txt\r虽然-bams可以使用通配符，但是我一般还是用shell写脚本循环，因为输出文件没有列名，很容易混淆的。我认为输出文件最好能带个列名。\n featureCounts  user guide\n比如双端测序，\nfeatureCounts -p -t gene -g gene_name -a annotation.gtf -o counts.txt *_mapping__PE.bam\r直接使用gene_name做标识符也行,提取出gene的位置。\n类似的还有Htseq-count\n而samtools 的bedcov计算的则不同，是bed文件每个区域的深度和。即samtools depth的和。\n而计算覆盖到整个参考fasta可以用samtools flagstat或者更详细的samtools idxstats。虽然featureCounts等也会给出，不过是输出在标准输出里的，不在输出文件里。\nTPM等转化 reads数即counts数，接着如果需要比较不同样本同个基因上的表达丰度情况，则需要对count数进行标准化。\n 落在一个基因区域内的read counts数目一般可以认为取决于length of the gene（基因长度）和sequencing depth（测序深度）\n  RPKM和FPKM。前者是以每个reads作为一个单位，在单端测序中应用较多；而后者是以fragment作为一个单位，主要应用在双端测序后的分析。 最近几年开始应用TPM（Transcripts Per Million）较多，Transcripts Per Kilobase of exonmodel per Million mapped reads (即是先对reads进行基因长度矫正，然后再除以所有矫正后的reads的总和)，认为优化的RPKM计算方法，可以用于同一物种不同组织的比较。   FPKM：Fragments Per Kilobase of transcript per Million fragments mapped，每1百万个map上的reads中map到map到外显子的每1k个碱基上的fragments个数。如果一对paired reads都比对上了，那么这对reads当做一个fragments；如果paired reads中一个比对上，另外一个没比对上，那么比对上的那个reads当做一个fragments。\n FPKM=read counts/(mapped reads (Millions) * exon length(KB))\r所以，这个fragments是不是featureCounts算出的counts数我不太确定。反正rpkm肯定是。\n在R中，则\ncounts_to_fpkm \u0026lt;- function(counts,lengths){\rrates \u0026lt;- counts/lengths\rfpkm \u0026lt;- rates /sum(counts) * 1e9\r}\r而TPM则是\ncounts_to_tpm \u0026lt;- function(counts,lengths){\rrates \u0026lt;- counts/lengths\rtpm \u0026lt;- rates/sum(rates) * 10^6\r}\r有人认为是clean reads，也就是比对前的clean reads总数【我觉得没必要】，但大多数人还是定义为有效的reads，即mapped reads。那么，mapped reads究竟是哪个值呢，因为比对到gene,exon的总mapped reads不等于map到fasta的reads吧，毕竟肯定有内含子之类的。这里我觉得既然是标准化，就应该是比如feauture得到的那些数据去标准就好，所以比值应该是比对到gene,exon的总mapped reads【我认为】。\n那么，exon length呢，粗暴地理解为gene length？【这样方便获取】，正常来说应该是每个gene id的exon的长度总和。获取所有外显子的长度和呢，一般可以从gtf文件入手，但是gtf文件中的exon的区域很多都是重合的（不同转录本的可变剪切）【比较麻烦。】\n当然，使用featureCounts时，可以\nfeatureCounts -p -t exon -g gene_id -a annotation.gtf -o counts.txt *_mapping__PE.bam\r输出文件有一列length，即为exon的length,方便。\n而在R中,可以使用GenomicFeatures计算每个基因下所有外显子的总长度\n#制作txdb对象\r library(GenomicFeatures)\rtxdb \u0026lt;- makeTxDbFromGFF(\u0026#34;hg38.gtf\u0026#34;,format=\u0026#34;gtf\u0026#34;)\r#通过exonsBy获取每个gene上的所有外显子的起始位点和终止位点，然后用reduce去除掉重叠冗余的部分，最后计算长度\r exons_gene \u0026lt;- exonsBy(txdb, by = \u0026#34;gene\u0026#34;)\rexons_gene_lens \u0026lt;- purrr::map_int(exons_gene,~sum(width(reduce(.x))))\r差异分析 差异分析使用的是counts文件，相关性分析之类的可以使用TPM数据。\ncall snp ","date":"2020-10-18T00:00:00Z","permalink":"https://liripo.github.io/post/rna-seq%E5%88%86%E6%9E%90%E6%B5%81%E7%A8%8B/","tags":"bio","title":"RNA-seq分析流程"},{"content":"","date":null,"permalink":"https://liripo.github.io/tags/linux/","tags":null,"title":"linux"},{"content":" NCBI共享大量数据。 2020年，PubMed中有3160万篇论文，其中PubMed Central中有660万篇全文记录。 NCBI核苷酸数据库（包括GenBank）具有4.307亿个不同序列的数据，而dbSNP描述了7.206亿个不同的遗传变异。 所有这些记录都可以与NCBI分类中的186万个物种或OMIM中的2.69万个疾病相关的记录进行交叉引用。\n SRA数据下载 SRA toolkit 参考文章；https://www.ncbi.nlm.nih.gov/sra/docs/sradownload/\n文章中有特别强调要用最新的sra toolkit(时间2020-10-13)，所以目前你用aspera估计不能下了。另一种是直接找到链接直接浏览器下载或者wget。\nsra toolkit下载地址：https://github.com/ncbi/sra-tools/wiki/01.-Downloading-SRA-Toolkit\n下载完解压后需要配置。配置看https://github.com/ncbi/sra-tools/wiki/03.-Quick-Toolkit-Configuration\n只有一个run时，直接运行\nprefetch SRR******\r一个SraAccList.txt文件，如：\nSRR11192680\rSRR11192681\rSRR11192682\rSRR11192683\rSRR11192684\r使用命令：\nprefetch --option-file SraAccList.txt\r下完后解压sra格式文件。可以使用fasterq-dump and sam-dump\nfasterq-dump --split-files SRR11180057.sra\rrentrez 在R里面运行entrez。\n Entrez是分子生物学数据库系统，可提供对核苷酸和蛋白质序列数据，以基因为中心和基因组作图的信息，3D结构数据，PubMed MEDLINE等的集成访问。该系统由国家生物技术信息中心（NCBI）搭建。\n 下载核酸序列，比如sars-cov-2\nfasta \u0026lt;- entrez_fetch(db = \u0026#34;nucleotide\u0026#34;,id = \u0026#34;NC_045512.2\u0026#34; ,rettype = \u0026#34;fasta\u0026#34;)\rwrite_lines(fastas,\u0026#34;NC_045512v2.fasta\u0026#34;)\r还有更多使用参考文章：https://docs.ropensci.org/rentrez/articles/rentrez_tutorial.html\n","date":"2020-10-13T00:00:00Z","permalink":"https://liripo.github.io/post/ncbi%E6%95%B0%E6%8D%AE%E4%B8%8B%E8%BD%BD/","tags":"bio","title":"NCBI数据下载"},{"content":"安装 vscode,下载安装，安装后默认是英文界面，要改成中文的话可以点击左侧的扩展按钮搜索 “Chinese”，安装搜索结果中的第一个（Chinese (Simplified) Language Pack for Visual Studio Code）后重启软件即可变为中文。\n安装远程开发扩展 点击扩展栏，然后搜索“Remote Development”，点击安装Remote Development即可。\n之后安装git bash,别用windowns的openssh,git官网。\n打开git bash,本地生成密匙：【生成4086长度密匙】\nssh-keygen -b 4096 -t rsa\r本地操作将密匙复制到远程服务器：\nssh-copy-id -p 22 user@ip\r或者\ncat ~/.ssh/id_rsa.pub | ssh -p 22 username@remote-server \u0026#34;cat \u0026gt;\u0026gt; ~/.ssh/authorized_keys\u0026#34;\r或者，也可以选择手动复制。\n#新建~/.shh文件夹下authorized_keys\rtouch ~/.ssh/authorized_keys\r#将~/.ssh/id_rsa.pub里的东西弄到新建的文件中保存即可。\r之后，配置本地的~/.ssh/config文件。\nHost linux\rHostName 公网ip\rUser 用户名\rIdentityFile ~/.ssh/id_rsa\r就可以无密码远程连接了。\nvscode使用R 教程https://github.com/Ikuyadeu/vscode-R/wiki\n  在vscode扩展中安装vscode-R和https://marketplace.visualstudio.com/items?itemName=REditorSupport.r-lsp,均选择安装在远程主机上。\n  远程主机的R上安装R包\n  install.packages(\u0026#34;languageserver\u0026#34;)\r 还有一个控制台也可以装下，比传统的R控制台方便。具体看radian，之后在vscode的设置中，选择刚刚安装的R插件的设置区域，增加radian的路经，具体看https://github.com/Ikuyadeu/vscode-R/wiki/Installation:-Linux\n  vscode设置快捷键，具体可看https://github.com/Ikuyadeu/vscode-R/wiki/Keyboard-shortcuts\n  设置r.sessionWatcher为true\n  vscode更改主题 在文件-\u0026gt;首选项有颜色主题和文件图标可以修改，icon我使用vscode-icons,主题我使用one dark pro\nvscode shell  shell-format：格式化 shellman：语法提示 安装Code Runner插件，可以实时运行脚本 shellcheck: 语法错误检查 Bash IDE:自动补全  vscode自动添加header等 ","date":"2020-10-13T00:00:00Z","permalink":"https://liripo.github.io/post/vscode-%E8%BF%9C%E7%A8%8B%E4%BD%BF%E7%94%A8/","tags":"linux","title":"VSCode 远程使用"},{"content":" UDP 内网穿透的实质是利用路由器上的NAT 系统，NAT 是一种将私有（保留）地址转化为合法IP地址的转换技术。\n 比如当你处于内网时，也就是局域网，你的内网ip如果别人跟你不在同一个局域网，是访问不到你的。但你可以访问别人公网ip提供的服务，如web程序。\n比如:ssh服务\n frp 会为本地服务的 22 端口，在 frps 所在的服务端监听 6000 端口，将 6000 端口接收到的连接和本地服务的 22 端口关联，透传流量，从而实现让用户在外部访问到内部服务。\n   假如你具有一台公网ip的服务器，可以选择frps自己设置，好处当然是稳定，自定域域名等。\n  假如没有需要体验的，可以使用花生壳、natapp等一系列服务商。当然域名随机，而且每次不同等，不过也有付费服务。使用很简单，安装下软件运行下就可以。\n  frps的ssh连接按照官网教程即可https://gofrp.org/docs/examples/ssh/，配置好并启动后打开xshell新建会话即可连接，所使用的端口应为你客户端的端口。\n还有很多功能,可以看官方文档.\n 通过代理连接 frps，在只能通过代理访问外网的环境内，frpc 支持通过 HTTP 或 SOCKS5 代理和 frps 建立连接。具体看https://gofrp.org/docs/features/common/client/ 使用https,https://gofrp.org/docs/examples/https2http/ 其中文档说到的server.key和server.crt可以用过openssl生成  openssl genrsa -out server.key 2048\ropenssl req -new -key server.key -out server.csr #使用后填入信息\ropenssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt\r","date":"2020-09-11T00:00:00Z","permalink":"https://liripo.github.io/post/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/","tags":"linux","title":"内网穿透"},{"content":"安装 官网教程\n由于刚刚升级了WSL24,所以就尝试下WSL2安装Rstudio server。\n首先你要先确定自己是否安装了R，其中conda怎么安装最新版本的R的笔记我也写过。\nsudo apt-get install gdebi-core\rwget https://download2.rstudio.org/server/bionic/amd64/rstudio-server-1.3.1073-amd64.deb\rsudo gdebi rstudio-server-1.3.1073-amd64.deb\rReading package lists... Done\rBuilding dependency tree\rReading state information... Done\rReading state information... Done\rRStudio Server\rRStudio is a set of integrated tools designed to help you be more productive with R. It includes a console, syntax-highlighting editor that supports direct code execution, as well as tools for plotting, history, and workspace management.\rDo you want to install the software package? [y/N]:y\r(Reading database ... 51259 files and directories currently installed.)\rPreparing to unpack rstudio-server-1.3.1073-amd64.deb ...\rUnpacking rstudio-server (1.3.1073) over (1.3.1073) ...\rCouldn\u0026#39;t find an alternative telinit implementation to spawn.\rSetting up rstudio-server (1.3.1073) ...\ruseradd: user \u0026#39;rstudio-server\u0026#39; already exists\rCouldn\u0026#39;t find an alternative telinit implementation to spawn.\r你最后会看到这条信息，按照官网文章1所述，Couldn't find an alternative telinit implementation to spawn.可以忽略。\nsudo rstudio-server start\r开启服务，即可在http://localhost:8787打开。\n接着即可以ssh的用户名密码登录。\n  停止服务\nsudo rstudio-server stop\r  卸载服务\nsudo apt-get remove rstudio-server -y\r  升级版本3\n#检查是否正在运行任何活动会话\rsudo rstudio-server active-sessions\r#暂停所有活动用户会话,可以跳过\rsudo rstudio-server suspend-all\r#将旧版本的服务器置于离线模式\rsudo rstudio-server offline\r#安装新版本，即按照之前操作，例如\rwget https://download2.rstudio.org/server/bionic/amd64/rstudio-server-XXX-amd64.deb\rsudo gdebi rstudio-server-XXX-amd64.deb\r#重新启动服务器，新版本的服务器将以离线模式启动。\rsudo rstudio-server restart\r#恢复服务为在线状态\rsudo rstudio-server online\r  使用 1.检查是否在运行\nps -aux|grep rstudio-server\r2.指定R版本，例如nvim /etc/rstudio/rserver.conf\n#指定R\rrsession-which-r=/usr/local/bin/R\r#共享库\rrsession-ld-library-path=/opt/someapp/lib:/opt/anotherapp/lib\r官网文档2\n  https://support.rstudio.com/hc/en-us/articles/360049776974-Using-RStudio-Server-in-Windows-WSL2\u0026#8617;\n https://docs.rstudio.com/ide/server-pro/index.html\u0026#8617;\n https://support.rstudio.com/hc/en-us/articles/216079967-Upgrading-RStudio-Server\u0026#8617;\n https://liripo.github.io/post/wsl%E6%9B%B4%E6%96%B0%E5%88%B0wsl2/\u0026#8617;\n   ","date":"2020-09-06T00:00:00Z","permalink":"https://liripo.github.io/post/rstudio-server-in-linux/","tags":"linux","title":"Rstudio server in linux"},{"content":"更新 官网教程\n  首先检查自己的windows版本是否符和需求，\ncmd键入winver，可以看到你的版本。\n  systeminfo可以看下系统类型，在安装wsl2内核时需要注意，不过问题不大。\n系统符合要求的话，如果你装过了WSL的话，可以直接在powershell输入,\n记住，这儿请以管理员权限打开，之后操作都在管理员权限下操作。\nwsl -l -v\r没有装过的话，参考：https://liripo.github.io/post/windows10%E5%AE%89%E8%A3%85linux/\n这个图片这儿请假想为1,因为我已经是更新好后在写教程了。\n你的wsl程序如果只能用wsl1的话，是不会有-l参数的，所以在这里你也可以判断是不是能更新到wsl2，不能的话得获取符合要求的系统。\n之后输入\ndism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart\rdism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart\rwsl --set-default-version 2\r加入这儿遇到错误0x1bc的话，参考：https://github.com/microsoft/WSL/issues/5651,也就是需要右键点击wsl2内核进行卸载，再重新设置。\n之后输入：\nwsl --set-version \u0026lt;distribution name\u0026gt; \u0026lt;versionNumber\u0026gt;\r上述命令以我的Ubuntu-18.04为例，\nwsl --set-version Ubuntu-18.04 2\rwsl2则会自动安装，否则可以按照官网文档所示，手动下载。\n最后键入\nwsl -v -l\r看看是否是WSL2。\n","date":"2020-09-05T00:00:00Z","permalink":"https://liripo.github.io/post/wsl%E6%9B%B4%E6%96%B0%E5%88%B0wsl2/","tags":"linux","title":"wsl更新到WSL2"},{"content":"kaks的计算R包seqinr::kaks()可以计算，当然更多的使用KaKs_Calculator1\n软件获得在http://evolution.genomics.org.cn/software.htm.\n下载解压缩后可以在里面找到windows，Linux版本以及源代码，示例文件以及帮助文档。\n Ka/Ks，在遗传学中，Ka/Ks或者dN/dS表示的是异义替换（Ka）和同义替换（Ks）之间的比例。这个比例可以判断是否有选择压力作用于这个蛋白质编码基因。\n不导致氨基酸改变的核苷酸变异我们称为同义突变，反之则称为非同义突变。一般认为，同义突变不受自然选择，而非同义突变则受到自然选择作用。在进化分析中，了解同义突变和非同义突变发生的速率是很有意义的。常用的参数有以下几种：同义突变频率(Ks)、非同义突变频率(Ka)、非同义突变率与同义突变率的比值(Ka/Ks)。如果Ka/Ks\u0026gt;1，则认为有正选择效应。如果Ka/Ks=1，则认为存在中性选择。如果Ka/Ks\u0026lt;1，则认为有纯化选择作用。\n 而且Ka,Ks不考虑终止子，比如stop gain,stop loss。\nkaks_calculator使用的输入文件为axt文件\nNP_000026\rATGCTCCTGTG-CCACTGGCC\rATCCCC-TGCGCTCACTGGAC\rNP_000053\rACAGaTtCTACCc-GCCcACTA--GgtGtt\r---ggTTCTCCtACCcA-G-CACTACTggg\r就是一个基因或者一个开放阅读框有比对好的两条序列去计算。如果我们使用mega生成一个比对好的fasta文件后，\n\u0026gt;a\rATATTAGGTTTTTACCTACCCAGGAAAAGCCAACCAACCTCGATCTCTTGTAGATCTGTT\rCTCTAAACGAACTTTAAAATCTGTGTAGCTGTCGCTCGGCTGCATGCCTAGTGCACCTAC\r\u0026gt;b\r----TAGGTTTTTACCTACCCAGGAAAAGCCAACCAACCTCGATCTCTTGTAGATCTGTT\rCTCTAAACGAACTTTAAAATCTGTGTAGCTGTCGCTCGGCTGCATGCCTAGTGCACCTAC\r就前面四个我改成空位了。\n可以使用\nfa_to_axt.R转下，我自己写的脚本。\nlibrary(tidyverse)\rargs\u0026lt;-commandArgs(TRUE)\r##比对后fasta,第一个参数\r fasta \u0026lt;- args[1]\rif(is.na(fasta)){stop(\u0026#34;fasta文件必须提供!\u0026#34;)}\r#开放阅读框,第二个参数,可要可不要，不要就整个fasta文件转axt\r orf \u0026lt;- args[2]\rfas \u0026lt;- Biostrings::readDNAStringSet(fasta)\ras_axt \u0026lt;- function(DNAStrings,name){\rchr \u0026lt;- DNAStrings %\u0026gt;% as.character()\rchr_write \u0026lt;- base::paste(chr,collapse = \u0026#34;\\n\u0026#34;)\rres \u0026lt;- base::paste(name,chr_write,\u0026#34;\u0026#34;,sep = \u0026#34;\\n\u0026#34;)\rres\r}\rseq_from_bed \u0026lt;- function(orf_tbl){\rmap(1:nrow(orf_tbl),function(i){\rrow \u0026lt;- orf_tbl[i,]\rorfname \u0026lt;- row[[1]]\rstart \u0026lt;- row[[2]]\rend \u0026lt;- row[[3]]\rif((end - start + 1)%%3 != 0){stop(\u0026#34;长度不是3的倍数!\u0026#34;,call. = F)}\rsubseq \u0026lt;- Biostrings::subseq(fas,start,end)\rname \u0026lt;- paste0(orfname,\u0026#34;:\u0026#34;,start,\u0026#34;-\u0026#34;,end)\raxt \u0026lt;- as_axt(subseq,name = name)\raxt\r})\rfilename \u0026lt;- fs::path_file(fasta) %\u0026gt;% fs::path_ext_remove()\rif(is.na(orf)){\rllsc \u0026lt;- as_axt(fas,name = filename)\r}else{\rorf_tbl \u0026lt;- read_delim(orf,delim = \u0026#34;\\t\u0026#34;,col_names = F)\rllsc \u0026lt;- seq_from_bed(orf_tbl = orf_tbl)\r}\rllsc %\u0026gt;% write_lines(paste0(filename,\u0026#34;.axt\u0026#34;))\r使用,没有需要提取的对应位置的话，可以不传入开放阅读框的位置\nRscript fa_to_axt.R xxx.fasta\r如果你要提取出全基因序列某个能翻译蛋白质的序列区域，这用于多序列比对后的fasta文件，全基因组的可以用bedtools工具提取。\nRscript fa_to_axt.R xxx.fasta xxx.bed\r#xxx.bed如下\r c\t1\t3\rd\t5\t13\r当然，更好的是有直接测得的两个基因的序列，直接进行比对然后转axt。但是要是其中一条序列你不知道开放阅读框位置，就得先全基因比对了吧。\nKaKs_Calculator -i test.axt -o test.kaks -m MA\r其中还有一个-c参数，寻找密码子类型的，默认标准密码子。\n-m MA默认的这个最大似然方法十分耗时。可以试试跟-m NG的运行速度区别。\n 总之就是你必须获得两条比对好的序列，而且这序列是编码蛋白质的区域，然后可以自己写一个fasta文件转axt文件的程序或者用上面那个程序。\n use LWL, YN and MYN and standard Code:\nuse LWL, YN and MYN and standard Code\rKaKs_Calculator -i test.axt -o test.axt.kaks -m LWL -m YN -m MYN\r方法可以多个，至于选哪种就不清楚了。\n生成的结果：\n● Ka: Nonsynonymous substitution rate ● Ks: Synonymous substitution rate ● Ka/Ks: Selective strength ● P-Value (Fisher): The value computed by Fisher exact test ● Length: Sequence length (after removing gaps and stop codon(s)) ● S-Sites: Synonymous sites ● N-Sites: Nonsynonymous sites ● Fold-Sites (0:2:4): 0,2,4-fold degenerate sites ● Substitutions: Substitutions between sequences ● S-Substitutions: Synonymous substitutions ● N-Substitutions: Nonsynonymous substitutions ● Fold-S-Substitutions (0:2:4): Synonymous substitutions at 0,2,4-fold ● Fold-N-Substitutions (0:2:4): Nonsynonymous substitutions at 0,2,4-fold ● Divergence-Time: Divergence time\n● Substitution-Rate-Ratio (rTC:rAG:rTA:rCG:rTG:rCA/rCA): Ratios of six substitution rates to the substitution rate between C and A ● GC(1:2:3): GC content of entire sequences and of three codon positions ● ML-Score: Maximum likelihood score ● AICc: Value of AICc ● Akaike-Weight: Value of Akaike weight for model selection ● Model: Selected model for the method of MS\n这个软件还有绘图功能。详细看官方文档。\n  KaKs_Calculator: Calculating Ka and Ks Through Model Selection and Model Averaging https://doi.org/10.1016/S1672-0229(07)60007-2\u0026#8617;\n   ","date":"2020-09-03T00:00:00Z","permalink":"https://liripo.github.io/post/ka%E4%B8%8Eks%E8%AE%A1%E7%AE%97/","tags":"linux","title":"Ka与Ks计算"},{"content":"nvim安装 https://neovim.io/\nhttps://github.com/neovim/neovim/releases ====版本发布页面。\nneovim的linux版本你可以在上面找到，你可以选择nvim-linux.tar.gz里面有编译好的nvim文件，也可以选择官网说的appimage安装，不过appimage怎么装我也不清楚。\n配置 nvim的配置文件为~/.config/nvim/init.vim,没有则自己创键\n插件管理选择vim-plug\n插件管理文件安装 mkdir -p ~/.var/app/io.neovim.nvim/data/nvim/site\rcurl -fLo ~/.var/app/io.neovim.nvim/data/nvim/site/autoload/plug.vim https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim\r#建个文件夹作为插件安装目录吧\rmkdir ~/.var/app/io.neovim.nvim/data/nvim/site/plugged\r完成上述步骤后在init.vim中加入代码\n\u0026#34;\u0026#34;\u0026#34;\u0026#34;\u0026#34;\u0026#34;\u0026#34;\u0026#34;插件管理\rlet plug_install = 0\rlet autoload_plug_path = stdpath(\u0026#39;config\u0026#39;) . \u0026#39;/autoload/plug.vim\u0026#39;\rif !filereadable(autoload_plug_path)\rsilent exe \u0026#39;!curl -fL --create-dirs -o \u0026#39; . autoload_plug_path .\r\\ \u0026#39; https://raw.github.com/junegunn/vim-plug/master/plug.vim\u0026#39;\rexecute \u0026#39;source \u0026#39; . fnameescape(autoload_plug_path)\rlet plug_install = 1\rendif\runlet autoload_plug_path\r这个代码使得nvim识别到vim-plug插件。当你使用vim时，你则无需~/.vimrc中加入。\nnvim中R的使用 首先自动补全及vim中开启R的终端需要的插件，init.vim\n\u0026#34;配置安装目录及所需插件\rcall plug#begin(\u0026#39;~/.var/app/io.neovim.nvim/data/nvim/site/plugged\u0026#39;)\rPlug \u0026#39;jalvesaq/Nvim-R\u0026#39;\r\u0026#34;Plug \u0026#39;ycm-core/YouCompleteMe\u0026#39;\rPlug \u0026#39;gaalcaras/ncm-R\u0026#39;\rPlug \u0026#39;ncm2/ncm2\u0026#39;\r\u0026#34; Optional: for snippet support\r\u0026#34; Further configuration might be required, read below\rPlug \u0026#39;sirver/UltiSnips\u0026#39;\rPlug \u0026#39;ncm2/ncm2-ultisnips\u0026#39;\rcall plug#end()\rfiletype plugin indent on\r\u0026#34;\u0026#34;\u0026#34;\u0026#34;\u0026#34;\u0026#34;\u0026#34;\u0026#34;\u0026#34;\u0026#34;\u0026#34;\u0026#34;\u0026#34;\u0026#34;\u0026#34;\u0026#34;\u0026#34;\u0026#34;\u0026#34;\u0026#34;\u0026#34;\u0026#34;\u0026#34;\u0026#34;\u0026#34;\u0026#34;\r使用:PlugInstall安装插件\n加入提示你没有python3的话，你需要在init.vim添加\nlet g:python3_host_prog = \u0026#34;/mnt/d/linux/software/miniconda3/bin/python\u0026#34;\r上述路径修改为你的python路径。\n加入配色主题\n\u0026#34;配色主题\rPlug \u0026#39;sheerun/vim-polyglot\u0026#39;\r使用 打开vim后，在命令行模式输入\\rf即可打开R会话，\\l可以发送代码到R会话。\nnvim重要键绑定：\n  Ctrl-x Ctrl-o自动补全，\n  CTRL-xf来完成字符串下文件名\n   ","date":"2020-09-03T00:00:00Z","permalink":"https://liripo.github.io/post/nvim/","tags":"linux","title":"nvim"},{"content":"\r\r\rcode.sourceCode  span { display: inline-block; line-height: 1.25; }\rcode.sourceCode  span { color: inherit; text-decoration: inherit; }\rcode.sourceCode  span:empty { height: 1.2em; }\r.sourceCode { overflow: visible; }\rcode.sourceCode { white-space: pre; position: relative; }\rdiv.sourceCode { margin: 1em 0; }\rpre.sourceCode { margin: 0; }\r@media screen {\rdiv.sourceCode { overflow: auto; }\r}\r@media print {\rcode.sourceCode { white-space: pre-wrap; }\rcode.sourceCode  span { text-indent: -5em; padding-left: 5em; }\r}\rpre.numberSource code\r{ counter-reset: source-line 0; }\rpre.numberSource code  span\r{ position: relative; left: -4em; counter-increment: source-line; }\rpre.numberSource code  span  a:first-child::before\r{ content: counter(source-line);\rposition: relative; left: -1em; text-align: right; vertical-align: baseline;\rborder: none; display: inline-block;\r-webkit-touch-callout: none; -webkit-user-select: none;\r-khtml-user-select: none; -moz-user-select: none;\r-ms-user-select: none; user-select: none;\rpadding: 0 4px; width: 4em;\r}\rpre.numberSource { margin-left: 3em; padding-left: 4px; }\rdiv.sourceCode\r{ color: #cccccc; background-color: #303030; }\r@media screen {\rcode.sourceCode  span  a:first-child::before { text-decoration: underline; }\r}\rcode span.al { color: #ffcfaf; } /* Alert */\rcode span.an { color: #7f9f7f; font-weight: bold; } /* Annotation */\rcode span.at { } /* Attribute */\rcode span.bn { color: #dca3a3; } /* BaseN */\rcode span.bu { } /* BuiltIn */\rcode span.cf { color: #f0dfaf; } /* ControlFlow */\rcode span.ch { color: #dca3a3; } /* Char */\rcode span.cn { color: #dca3a3; font-weight: bold; } /* Constant */\rcode span.co { color: #7f9f7f; } /* Comment */\rcode span.cv { color: #7f9f7f; font-weight: bold; } /* CommentVar */\rcode span.do { color: #7f9f7f; } /* Documentation */\rcode span.dt { color: #dfdfbf; } /* DataType */\rcode span.dv { color: #dcdccc; } /* DecVal */\rcode span.er { color: #c3bf9f; } /* Error */\rcode span.ex { } /* Extension */\rcode span.fl { color: #c0bed1; } /* Float */\rcode span.fu { color: #efef8f; } /* Function */\rcode span.im { } /* Import */\rcode span.in { color: #7f9f7f; font-weight: bold; } /* Information */\rcode span.kw { color: #f0dfaf; } /* Keyword */\rcode span.op { color: #f0efd0; } /* Operator */\rcode span.ot { color: #efef8f; } /* Other */\rcode span.pp { color: #ffcfaf; font-weight: bold; } /* Preprocessor */\rcode span.sc { color: #dca3a3; } /* SpecialChar */\rcode span.ss { color: #cc9393; } /* SpecialString */\rcode span.st { color: #cc9393; } /* String */\rcode span.va { } /* Variable */\rcode span.vs { color: #cc9393; } /* VerbatimString */\rcode span.wa { color: #7f9f7f; font-weight: bold; } /* Warning */\r\r\r\r\rnewick\r树的可视化以及数据注释\rggtree绘制层次聚类图等\r进化树注释\rggtreeExtra\r\r\r\r\rData Integration, Manipulation and Visualization of Phylogenetic Trees\nlibrary(ggtree)\rlibrary(ape)\rlibrary(treeio)\rlibrary(patchwork)\rlibrary(tidyverse)\rnewick\rMEGA支持以三种不同的格式导出树：Newick，tabular和Nexus。其中newick可以直接使用read.tree读取。\r其中不管什么软件，都极为常用。自己尝试着写newick格式画树。\nnew \u0026lt;-\u0026quot;((A:3.0,B:4.0):2.0,(C:3.0,D:2.0):3.0,E:1.0);\u0026quot;\rtree \u0026lt;-read.tree(text = new)\rggtree(tree)+geom_tiplab()\r这样写的话我们会有两个值，tiplab跟edge.legnth\nggplot(tree, aes(x, y)) +geom_tree() +\rgeom_tiplab()\rp1 \u0026lt;-ggtree(read.tree(text = \u0026quot;(B,(A,D),C);\u0026quot;))\rp2 \u0026lt;-ggtree(read.tree(text = \u0026quot;(A,(B,C),D);\u0026quot;))\rp3 \u0026lt;-ggtree(read.tree(text = \u0026quot;((A,D),(C,B));\u0026quot;))+theme_tree2()\rp1+p2+p3\rggtree(read.tree(text = \u0026quot;(B,(A,D)1,C);\u0026quot;)) +\rgeom_nodelab()+geom_tiplab()\r上面即添加了AD-\u0026gt;BC的节点（node）信息。这个节点信息一般会储存bootstrap值。\n让我们再看看root\nrooted \u0026lt;-ape::root(tree,outgroup = which(tree$tip.label ==\u0026quot;D\u0026quot;))\rape:::.write.tree2(rooted,check_tips = T)\r## [1] \u0026quot;((((A:3,B:4):2,E:1):3,C:3):0,D:2);\u0026quot;\rp1 \u0026lt;-ggtree(rooted)+geom_tiplab()\rp2 \u0026lt;-ggtree(tree) +geom_tiplab()\rtree_root \u0026lt;-read.tree(text=\u0026#39;((((A:3,B:4):2,E:1):3,C:3):0,D:2):1;\u0026#39;)\rp3 \u0026lt;-ggtree(tree_root) +geom_tiplab() +geom_rootedge()\rp1+p2 +p3\rD移动到了最下面,这实际上就是有根了，当然也可以展示那种没有标签的，比如p3就是p2上修改罢了，加一个没有标签的根，但是这只是展示的方式而已（方便直观地从根开始看而已）（我觉得真正的有根树应该是在确定序列确定根后，使用那条根去计算距离等不是才对吗？）。\n看过newick格式的各种画树，我们再看看树数据转tibble长什么样\nggtree(tree)$data\r{\"columns\":[{\"label\":[\"parent\"],\"name\":[1],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"node\"],\"name\":[2],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"branch.length\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"label\"],\"name\":[4],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"isTip\"],\"name\":[5],\"type\":[\"lgl\"],\"align\":[\"right\"]},{\"label\":[\"x\"],\"name\":[6],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"y\"],\"name\":[7],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"branch\"],\"name\":[8],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"angle\"],\"name\":[9],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"7\",\"2\":\"1\",\"3\":\"3\",\"4\":\"A\",\"5\":\"TRUE\",\"6\":\"5\",\"7\":\"2.000000\",\"8\":\"3.5\",\"9\":\"144\"},{\"1\":\"7\",\"2\":\"2\",\"3\":\"4\",\"4\":\"B\",\"5\":\"TRUE\",\"6\":\"6\",\"7\":\"3.000000\",\"8\":\"4.0\",\"9\":\"216\"},{\"1\":\"8\",\"2\":\"3\",\"3\":\"3\",\"4\":\"C\",\"5\":\"TRUE\",\"6\":\"6\",\"7\":\"4.000000\",\"8\":\"4.5\",\"9\":\"288\"},{\"1\":\"8\",\"2\":\"4\",\"3\":\"2\",\"4\":\"D\",\"5\":\"TRUE\",\"6\":\"5\",\"7\":\"5.000000\",\"8\":\"4.0\",\"9\":\"360\"},{\"1\":\"6\",\"2\":\"5\",\"3\":\"1\",\"4\":\"E\",\"5\":\"TRUE\",\"6\":\"1\",\"7\":\"1.000000\",\"8\":\"0.5\",\"9\":\"72\"},{\"1\":\"6\",\"2\":\"6\",\"3\":\"0\",\"4\":\"NA\",\"5\":\"FALSE\",\"6\":\"0\",\"7\":\"2.666667\",\"8\":\"0.0\",\"9\":\"192\"},{\"1\":\"6\",\"2\":\"7\",\"3\":\"2\",\"4\":\"NA\",\"5\":\"FALSE\",\"6\":\"2\",\"7\":\"2.500000\",\"8\":\"1.0\",\"9\":\"180\"},{\"1\":\"6\",\"2\":\"8\",\"3\":\"3\",\"4\":\"NA\",\"5\":\"FALSE\",\"6\":\"3\",\"7\":\"4.500000\",\"8\":\"1.5\",\"9\":\"324\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\r\r\rtree %\u0026gt;%as_tibble()\r{\"columns\":[{\"label\":[\"parent\"],\"name\":[1],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"node\"],\"name\":[2],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"branch.length\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"label\"],\"name\":[4],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"7\",\"2\":\"1\",\"3\":\"3\",\"4\":\"A\"},{\"1\":\"7\",\"2\":\"2\",\"3\":\"4\",\"4\":\"B\"},{\"1\":\"8\",\"2\":\"3\",\"3\":\"3\",\"4\":\"C\"},{\"1\":\"8\",\"2\":\"4\",\"3\":\"2\",\"4\":\"D\"},{\"1\":\"6\",\"2\":\"5\",\"3\":\"1\",\"4\":\"E\"},{\"1\":\"6\",\"2\":\"6\",\"3\":\"NA\",\"4\":\"NA\"},{\"1\":\"6\",\"2\":\"7\",\"3\":\"2\",\"4\":\"NA\"},{\"1\":\"6\",\"2\":\"8\",\"3\":\"3\",\"4\":\"NA\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\r\r\r可以看到两个的不同。这就是为什么可以使用ggplot() + geom_tree(aes(x,y))的原因的，\nggtree(tree) +geom_text(aes(x = branch,label = branch.length))\r这样就可以将分枝长度绘制出来了。0嘛就是\nape:::.write.tree2(tree,check_tips = T)\r## [1] \u0026quot;((A:3,B:4):2,(C:3,D:2):3,E:1);\u0026quot;\r应该就是newick无根无值，ggtree自动补零,自动加根？\n\r树的可视化以及数据注释\rnwk \u0026lt;-system.file(\u0026quot;extdata\u0026quot;, \u0026quot;sample.nwk\u0026quot;, package=\u0026quot;treeio\u0026quot;)\rtree \u0026lt;-read.tree(nwk)\rape:::.write.tree2(tree,check_tips = T)\r## [1] \u0026quot;(((((((A:4,B:4):6,C:5):8,D:6):3,E:21):10,((F:4,G:12):14,H:8):13):13,((I:5,J:2):30,(K:11,L:11):2):17):4,M:56);\u0026quot;\rp1 \u0026lt;-ggtree(tree)\rp2 \u0026lt;-ggtree(tree, color=\u0026quot;firebrick\u0026quot;, size=2, linetype=\u0026quot;dotted\u0026quot;)\rp3 \u0026lt;-ggtree(tree,ladderize = F)\rp4 \u0026lt;-ggtree(tree,branch.length = \u0026quot;none\u0026quot;)\rp1+p2+p3+p4+plot_annotation(tag_levels = \u0026quot;I\u0026quot;)\rladderize不以梯形呈现树，branch.length可以只展示树的拓扑结构。\nlayouts \u0026lt;-c(\u0026#39;rectangular\u0026#39;, \u0026#39;dendrogram\u0026#39;, \u0026#39;slanted\u0026#39;, \u0026#39;fan\u0026#39;, \u0026#39;circular\u0026#39;, \u0026#39;inward_circular\u0026#39;, \u0026#39;radial\u0026#39;, \u0026#39;equal_angle\u0026#39;, \u0026#39;daylight\u0026#39;,\u0026#39;ape\u0026#39;)\rplots \u0026lt;-map(layouts,~ggtree(tr = tree,layout = .x))\r## Scale for \u0026#39;y\u0026#39; is already present. Adding another scale for \u0026#39;y\u0026#39;, which will\r## replace the existing scale.\r## Average angle change [1] 0.161786714463209\r## Average angle change [2] 0.050721258810625\r## Average angle change [3] 0.0238174251191971\rwrap_plots(plots) +plot_annotation(tag_levels = \u0026quot;A\u0026quot;) +plot_layout(ncol = 3,widths = c(2,2,2))\r更具体的看http://yulab-smu.top/treedata-book/chapter4.html\n\r查看选定的树枝及缩放选定树枝\n\r我觉得有时候这是有必要的。\np1 \u0026lt;-ggtree(tree) +geom_tiplab() +geom_nodelab(aes(label = node))\rp2 \u0026lt;-viewClade(p1, MRCA(p1, \u0026quot;I\u0026quot;, \u0026quot;L\u0026quot;))\rp3 \u0026lt;-scaleClade(p1, node=17, scale=.1) \rp1+p2 +p3 +plot_annotation(tag_levels = \u0026quot;I\u0026quot;)\r\r折叠与展开\n\rp4 \u0026lt;-p1 %\u0026gt;%collapse(node=21) +\rgeom_point2(aes(subset=(node==21)), shape=21, size=5, fill=\u0026#39;green\u0026#39;)\rp5 \u0026lt;-collapse(p4, node=23) +\rgeom_point2(aes(subset=(node==23)), shape=23, size=5, fill=\u0026#39;red\u0026#39;)\rp6 \u0026lt;-ggtree::expand(p5, node=23) %\u0026gt;%ggtree::expand(node=21)\rp5+p6\r\ropen_tree和rotate_tree就不展示了。\n\rgetNamespaceExports(ns = \u0026quot;ggtree\u0026quot;) %\u0026gt;%matrix(ncol = 4) %\u0026gt;%as_tibble()\r## Warning: The `x` argument of `as_tibble.matrix()` must have unique column names if `.name_repair` is omitted as of tibble 2.0.0.\r## Using compatibility `.name_repair`.\r## This warning is displayed once every 8 hours.\r## Call `lifecycle::last_warnings()` to see where this warning was generated.\r{\"columns\":[{\"label\":[\"V1\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"V2\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"V3\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"V4\"],\"name\":[4],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"geom_rootpoint\",\"2\":\"geom_motif\",\"3\":\"facet_plot\",\"4\":\"geom_highlight\"},{\"1\":\"layout_rectangular\",\"2\":\"unit\",\"3\":\"geom_tree2\",\"4\":\"ggsave\"},{\"1\":\"geom_text\",\"2\":\"layout_dendrogram\",\"3\":\"geom_tippoint\",\"4\":\"hexpand\"},{\"1\":\"geom_tree\",\"2\":\"gzoom\",\"3\":\"geom_tiplab\",\"4\":\"arrow\"},{\"1\":\"ggdensitree\",\"2\":\"decimal2Date\",\"3\":\"theme_tree2\",\"4\":\"nodepie\"},{\"1\":\"groupOTU\",\"2\":\"geom_nodelab\",\"3\":\"guide_legend\",\"4\":\"rotate\"},{\"1\":\"fortify\",\"2\":\"geom_treescale\",\"3\":\"nodelab\",\"4\":\"geom_balance\"},{\"1\":\"geom_label\",\"2\":\"layout_circular\",\"3\":\"xlim\",\"4\":\"geom_cladelabel2\"},{\"1\":\"geom_tiplab2\",\"2\":\"msaplot\",\"3\":\"facet_labeller\",\"4\":\"read.tree\"},{\"1\":\"theme\",\"2\":\"scale_fill_manual\",\"3\":\"geom_point\",\"4\":\"multiplot\"},{\"1\":\"geom_aline\",\"2\":\"xlim_expand\",\"3\":\"%%\",\"4\":\"nodebar\"},{\"1\":\"expand\",\"2\":\"geom_point2\",\"3\":\"range_format\",\"4\":\"layout_inward_circular\"},{\"1\":\"scale_color\",\"2\":\"collapse\",\"3\":\"geom_range\",\"4\":\"MRCA\"},{\"1\":\".__T__gzoom:ggtree\",\"2\":\"geom_nodelab2\",\"3\":\"%%\",\"4\":\"scaleClade\"},{\"1\":\"scale_color_manual\",\"2\":\"geom_taxalink\",\"3\":\"theme_tree\",\"4\":\"scale_colour_manual\"},{\"1\":\"facet_widths\",\"2\":\"theme_dendrogram\",\"3\":\"geom_facet\",\"4\":\"aes\"},{\"1\":\"viewClade\",\"2\":\"margin\",\"3\":\"nodeid\",\"4\":\"StatBalance\"},{\"1\":\"rtree\",\"2\":\"add_colorbar\",\"3\":\"gheatmap\",\"4\":\"layout_fan\"},{\"1\":\"get_heatmap_column_position\",\"2\":\"Date2decimal\",\"3\":\"ggtree\",\"4\":\".__T__scale_color:ggtree\"},{\"1\":\"open_tree\",\"2\":\"revts\",\"3\":\"scale_x_ggtree\",\"4\":\"as.polytomy\"},{\"1\":\"xlim_tree\",\"2\":\"geom_nodepoint\",\"3\":\"theme_inset\",\"4\":\"geom_text2\"},{\"1\":\"%\r这是ggtree所有导出的函数。\r我觉得有个函数很重要%\u0026lt;+%\r这函数源码为\n`%\u0026lt;+%`\r## function (pg, data) ## {\r## if (!is.data.frame(data)) {\r## stop(\u0026quot;input should be a data.frame...\u0026quot;)\r## }\r## pg %add% data\r## }\r## \u0026lt;bytecode: 0x0000000019ee81b8\u0026gt;\r## \u0026lt;environment: namespace:ggtree\u0026gt;\rggtree:::`%add%`\r## function (p, data) ## {\r## p$data \u0026lt;- p$data %add2% data\r## return(p)\r## }\r## \u0026lt;bytecode: 0x0000000019cf3ca0\u0026gt;\r## \u0026lt;environment: namespace:ggtree\u0026gt;\rggtree:::`%add2%`\r## function (d1, d2) ## {\r## if (\u0026quot;node\u0026quot; %in% colnames(d2)) {\r## cn \u0026lt;- colnames(d2)\r## ii \u0026lt;- which(cn %in% c(\u0026quot;node\u0026quot;, cn[!cn %in% colnames(d1)]))\r## d2 \u0026lt;- d2[, ii]\r## dd \u0026lt;- dplyr::left_join(d1, d2, by = \u0026quot;node\u0026quot;)\r## }\r## else {\r## d2[, 1] \u0026lt;- as.character(unlist(d2[, 1]))\r## d2 \u0026lt;- dplyr::rename(d2, label = 1)\r## dd \u0026lt;- dplyr::left_join(d1, d2, by = \u0026quot;label\u0026quot;)\r## }\r## dd \u0026lt;- dd[match(d1$node, dd$node), ]\r## return(dd)\r## }\r## \u0026lt;bytecode: 0x0000000019b2d038\u0026gt;\r## \u0026lt;environment: namespace:ggtree\u0026gt;\r将left_join函数封装起来了，使得我们可以轻易的在绘图时使用。\r这个函数在http://yulab-smu.top/treedata-book/chapter7.html有讲到。\r方便我们将绘图数据加入到绘图中\ninfo \u0026lt;-tibble(tip = tree$tip.label,group = cut_interval(seq_along(tree$tip.label),n = 3))\rggtree(tree)%\u0026lt;+%info +geom_tiplab(aes(color = group))\rp \u0026lt;-ggtree(tree)%\u0026lt;+%info\rp$data\r{\"columns\":[{\"label\":[\"parent\"],\"name\":[1],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"node\"],\"name\":[2],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"branch.length\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"label\"],\"name\":[4],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"isTip\"],\"name\":[5],\"type\":[\"lgl\"],\"align\":[\"right\"]},{\"label\":[\"x\"],\"name\":[6],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"y\"],\"name\":[7],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"branch\"],\"name\":[8],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"angle\"],\"name\":[9],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"group\"],\"name\":[10],\"type\":[\"fctr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"20\",\"2\":\"1\",\"3\":\"4\",\"4\":\"A\",\"5\":\"TRUE\",\"6\":\"48\",\"7\":\"12.000000\",\"8\":\"46.0\",\"9\":\"332.30769\",\"10\":\"[1,5]\"},{\"1\":\"20\",\"2\":\"2\",\"3\":\"4\",\"4\":\"B\",\"5\":\"TRUE\",\"6\":\"48\",\"7\":\"13.000000\",\"8\":\"46.0\",\"9\":\"360.00000\",\"10\":\"[1,5]\"},{\"1\":\"19\",\"2\":\"3\",\"3\":\"5\",\"4\":\"C\",\"5\":\"TRUE\",\"6\":\"43\",\"7\":\"11.000000\",\"8\":\"40.5\",\"9\":\"304.61538\",\"10\":\"[1,5]\"},{\"1\":\"18\",\"2\":\"4\",\"3\":\"6\",\"4\":\"D\",\"5\":\"TRUE\",\"6\":\"36\",\"7\":\"10.000000\",\"8\":\"33.0\",\"9\":\"276.92308\",\"10\":\"[1,5]\"},{\"1\":\"17\",\"2\":\"5\",\"3\":\"21\",\"4\":\"E\",\"5\":\"TRUE\",\"6\":\"48\",\"7\":\"9.000000\",\"8\":\"37.5\",\"9\":\"249.23077\",\"10\":\"[1,5]\"},{\"1\":\"22\",\"2\":\"6\",\"3\":\"4\",\"4\":\"F\",\"5\":\"TRUE\",\"6\":\"48\",\"7\":\"7.000000\",\"8\":\"46.0\",\"9\":\"193.84615\",\"10\":\"(5,9]\"},{\"1\":\"22\",\"2\":\"7\",\"3\":\"12\",\"4\":\"G\",\"5\":\"TRUE\",\"6\":\"56\",\"7\":\"8.000000\",\"8\":\"50.0\",\"9\":\"221.53846\",\"10\":\"(5,9]\"},{\"1\":\"21\",\"2\":\"8\",\"3\":\"8\",\"4\":\"H\",\"5\":\"TRUE\",\"6\":\"38\",\"7\":\"6.000000\",\"8\":\"34.0\",\"9\":\"166.15385\",\"10\":\"(5,9]\"},{\"1\":\"24\",\"2\":\"9\",\"3\":\"5\",\"4\":\"I\",\"5\":\"TRUE\",\"6\":\"56\",\"7\":\"2.000000\",\"8\":\"53.5\",\"9\":\"55.38462\",\"10\":\"(5,9]\"},{\"1\":\"24\",\"2\":\"10\",\"3\":\"2\",\"4\":\"J\",\"5\":\"TRUE\",\"6\":\"53\",\"7\":\"3.000000\",\"8\":\"52.0\",\"9\":\"83.07692\",\"10\":\"(9,13]\"},{\"1\":\"25\",\"2\":\"11\",\"3\":\"11\",\"4\":\"K\",\"5\":\"TRUE\",\"6\":\"34\",\"7\":\"4.000000\",\"8\":\"28.5\",\"9\":\"110.76923\",\"10\":\"(9,13]\"},{\"1\":\"25\",\"2\":\"12\",\"3\":\"11\",\"4\":\"L\",\"5\":\"TRUE\",\"6\":\"34\",\"7\":\"5.000000\",\"8\":\"28.5\",\"9\":\"138.46154\",\"10\":\"(9,13]\"},{\"1\":\"14\",\"2\":\"13\",\"3\":\"56\",\"4\":\"M\",\"5\":\"TRUE\",\"6\":\"56\",\"7\":\"1.000000\",\"8\":\"28.0\",\"9\":\"27.69231\",\"10\":\"(9,13]\"},{\"1\":\"14\",\"2\":\"14\",\"3\":\"0\",\"4\":\"NA\",\"5\":\"FALSE\",\"6\":\"0\",\"7\":\"3.460938\",\"8\":\"0.0\",\"9\":\"95.84135\",\"10\":\"NA\"},{\"1\":\"14\",\"2\":\"15\",\"3\":\"4\",\"4\":\"NA\",\"5\":\"FALSE\",\"6\":\"4\",\"7\":\"5.921875\",\"8\":\"2.0\",\"9\":\"163.99038\",\"10\":\"NA\"},{\"1\":\"15\",\"2\":\"16\",\"3\":\"13\",\"4\":\"NA\",\"5\":\"FALSE\",\"6\":\"17\",\"7\":\"8.343750\",\"8\":\"10.5\",\"9\":\"231.05769\",\"10\":\"NA\"},{\"1\":\"16\",\"2\":\"17\",\"3\":\"10\",\"4\":\"NA\",\"5\":\"FALSE\",\"6\":\"27\",\"7\":\"9.937500\",\"8\":\"22.0\",\"9\":\"275.19231\",\"10\":\"NA\"},{\"1\":\"17\",\"2\":\"18\",\"3\":\"3\",\"4\":\"NA\",\"5\":\"FALSE\",\"6\":\"30\",\"7\":\"10.875000\",\"8\":\"28.5\",\"9\":\"301.15385\",\"10\":\"NA\"},{\"1\":\"18\",\"2\":\"19\",\"3\":\"8\",\"4\":\"NA\",\"5\":\"FALSE\",\"6\":\"38\",\"7\":\"11.750000\",\"8\":\"34.0\",\"9\":\"325.38462\",\"10\":\"NA\"},{\"1\":\"19\",\"2\":\"20\",\"3\":\"6\",\"4\":\"NA\",\"5\":\"FALSE\",\"6\":\"44\",\"7\":\"12.500000\",\"8\":\"41.0\",\"9\":\"346.15385\",\"10\":\"NA\"},{\"1\":\"16\",\"2\":\"21\",\"3\":\"13\",\"4\":\"NA\",\"5\":\"FALSE\",\"6\":\"30\",\"7\":\"6.750000\",\"8\":\"23.5\",\"9\":\"186.92308\",\"10\":\"NA\"},{\"1\":\"21\",\"2\":\"22\",\"3\":\"14\",\"4\":\"NA\",\"5\":\"FALSE\",\"6\":\"44\",\"7\":\"7.500000\",\"8\":\"37.0\",\"9\":\"207.69231\",\"10\":\"NA\"},{\"1\":\"15\",\"2\":\"23\",\"3\":\"17\",\"4\":\"NA\",\"5\":\"FALSE\",\"6\":\"21\",\"7\":\"3.500000\",\"8\":\"12.5\",\"9\":\"96.92308\",\"10\":\"NA\"},{\"1\":\"23\",\"2\":\"24\",\"3\":\"30\",\"4\":\"NA\",\"5\":\"FALSE\",\"6\":\"51\",\"7\":\"2.500000\",\"8\":\"36.0\",\"9\":\"69.23077\",\"10\":\"NA\"},{\"1\":\"23\",\"2\":\"25\",\"3\":\"2\",\"4\":\"NA\",\"5\":\"FALSE\",\"6\":\"23\",\"7\":\"4.500000\",\"8\":\"22.0\",\"9\":\"124.61538\",\"10\":\"NA\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\r\r\r\rggtree绘制层次聚类图等\r具体的看http://yulab-smu.top/treedata-book/chapter9.html\nhc \u0026lt;-hclust(dist(mtcars))\rhc\r## ## Call:\r## hclust(d = dist(mtcars))\r## ## Cluster method : complete ## Distance : euclidean ## Number of objects: 32\rden \u0026lt;-as.dendrogram(hc)\rden\r## \u0026#39;dendrogram\u0026#39; with 2 branches and 32 members total, at height 425.3447\rclus \u0026lt;-cutree(hc, 4)\rclus\r## Mazda RX4 Mazda RX4 Wag Datsun 710 Hornet 4 Drive ## 1 1 1 2 ## Hornet Sportabout Valiant Duster 360 Merc 240D ## 3 2 3 1 ## Merc 230 Merc 280 Merc 280C Merc 450SE ## 1 1 1 2 ## Merc 450SL Merc 450SLC Cadillac Fleetwood Lincoln Continental ## 2 2 3 3 ## Chrysler Imperial Fiat 128 Honda Civic Toyota Corolla ## 3 1 1 1 ## Toyota Corona Dodge Challenger AMC Javelin Camaro Z28 ## 1 2 2 3 ## Pontiac Firebird Fiat X1-9 Porsche 914-2 Lotus Europa ## 3 1 1 1 ## Ford Pantera L Ferrari Dino Maserati Bora Volvo 142E ## 3 1 4 1\rg \u0026lt;-split(names(clus), clus)\rp \u0026lt;-ggtree(hc, linetype=\u0026#39;dashed\u0026#39;)\rclades \u0026lt;-sapply(g, function(n) MRCA(p, n))\rd \u0026lt;-data.frame(label = names(clus), \r cyl = mtcars[names(clus), \u0026quot;cyl\u0026quot;])\rp \u0026lt;-groupClade(p, clades, group_name=\u0026#39;subtree\u0026#39;) +aes(color=subtree)\rp %\u0026lt;+%d +\rlayout_dendrogram() +\rgeom_tippoint(size=5, shape=21, aes(fill=factor(cyl), x=x+.5), color=\u0026#39;black\u0026#39;) +\rgeom_tiplab(aes(label=cyl), size=3, hjust=.5, color=\u0026#39;black\u0026#39;) +\rgeom_tiplab(angle=90, hjust=1, offset=-10, show.legend=F) +\rscale_color_brewer(palette=\u0026#39;Set1\u0026#39;, breaks=1:4) +\rtheme_dendrogram(plot.margin=margin(6,6,80,6)) +\rtheme(legend.position=c(.9, .6))\r其中MRCA返回所输入的tip.label向量的最近的节点,可以直接传入列表。即找到一组节点的祖先节点。\r这个代码是treedata-book的代码，基本将层次树图的方方面面都讲到了。既然展示了groupClade，那就再试下groupOut\ngroup \u0026lt;-mtcars %\u0026gt;%rownames_to_column(\u0026quot;aa\u0026quot;) %\u0026gt;%select(aa,cyl) %\u0026gt;%split(.$cyl)\rgroup \u0026lt;-map(group,~.x[,1])\rp \u0026lt;-ggtree(hc)\rgroupOTU(p,group)+\raes(color = group) +\rlayout_dendrogram() +\rgeom_tiplab(angle=90, hjust=1, offset=-1, show.legend=F)+\rtheme_dendrogram(plot.margin=margin(6,6,80,6))\r## Warning: `filter_()` is deprecated as of dplyr 0.7.0.\r## Please use `filter()` instead.\r## See vignette(\u0026#39;programming\u0026#39;) for more help\r## This warning is displayed once every 8 hours.\r## Call `lifecycle::last_warnings()` to see where this warning was generated.\r\r进化树注释\r\rgeom_cladelabel 【用于标记进化枝】\rgeom_strip 【用于某两个tip间标记】\rgeom_hilight 【高亮分支】\rgeom_balance 【突出某个节点两个直接后代分支】\rgeom_taxalink 【分类单元连结】\rgeom_range 【显示置信区间】\r\rtext \u0026lt;-\u0026quot;(((((((((A1:0.00012831,A2:0.00010735)0.8130:0.00014485,A3:5.715e-05)0.5010:1.31e-05,A4:0.00022247)0.8490:4.053e-05,A5:9.82e-06)0.9970:0.00017401,(A6:0.00079318,(A7:0.00028724,(A8:0.00011095,A9:5.717e-05)0.6770:8.273e-05)1.0000:0.00041883)1.0000:0.00269228)0.9930:8.471e-05,A10:1.415e-05)0.9940:0.00010982,A11:0.00012538)0.5100:8.467e-05,((A12:1e-07,A13:0)1.0000:6.308e-05,(A14:1.17e-06,(A15:0.00023437,(A16:6.695e-05,A17:0.0001348)0.6060:1.07e-06)0.5940:3.211e-05)1.0000:0.00024049)0.6400:0.00017276)0.9980:8.37e-05,A18:6.729e-05,A19:0);\u0026quot;\rtree \u0026lt;-read.tree(text = text)\rp1 \u0026lt;-ggtree(tree) +geom_nodelab(aes(label = node)) +geom_tiplab()\rp2 \u0026lt;-ggtree(tree) +geom_tiplab() +\rgeom_cladelabel(node = 35,offset = .0001,label = \u0026quot;mg\u0026quot;)+\rgeom_cladelabel(node = 29,align = T,barsize = 3,geom = \u0026quot;label\u0026quot;,label = \u0026quot;gg\u0026quot;)\rp3 \u0026lt;-ggtree(tree) +geom_tiplab() +\rgeom_strip(\u0026quot;A13\u0026quot;,\u0026quot;A18\u0026quot;,label= \u0026quot;13-18\u0026quot;,offset.text=0,offset = -0.0035)\rp4 \u0026lt;-p2 +geom_hilight(node = 29,fill=\u0026#39;darkgreen\u0026#39;, type=\u0026quot;rect\u0026quot;)\rp5 \u0026lt;-p4 +geom_balance(node=35, fill=\u0026#39;steelblue\u0026#39;, color=\u0026#39;white\u0026#39;, alpha=0.6)\rp6 \u0026lt;-ggtree(tree, layout=\u0026quot;inward_circular\u0026quot;)+geom_tiplab(hjust = 1)+\rgeom_taxalink(taxa1=\u0026#39;A13\u0026#39;, taxa2=\u0026#39;A18\u0026#39;, color=\u0026quot;red\u0026quot;, alpha=0.5, \r outward=FALSE)\rp1+p2+p3+p4+p5+p6 +plot_annotation(tag_levels = \u0026quot;I\u0026quot;) +\rplot_layout(ncol = 2,heights = c(1,1,1),widths = c(1,1))\r\rFigure 1: capthion\r\rggtree还有拼图，分面图，图像注释这些。其中我很感兴趣的是ggmsa这个多序列拼图。\n\rggtreeExtra\r\r","date":"2020-08-26T00:00:00Z","permalink":"https://liripo.github.io/post/ggtree/","tags":"R","title":"ggtree"},{"content":"blogdown https://github.com/rstudio/blogdown在bookdown上有书，所以安装使用基本看下文档就知道了。\n当然，你也可以选择hugodown。\ncalade theme 我使用的是https://github.com/djnavarro/hugo-calade这个主题。\nhugo以及这个主题，一些默认的设置，比如数学公式，使用rstuio服务，中国比较难以加载。\nmathjax改成cdn服务 在网站根目录下，\\layouts\\partials\\foot_custom.html配置如下\n\u0026lt;!--\u0026lt;script src=\u0026#34;//yihui.name/js/math-code.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\r\u0026lt;script async src=\u0026#34;//mathjax.rstudio.com/latest/MathJax.js?config=TeX-MML-AM_CHTML\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\r--\u0026gt;\r\u0026lt;script async src=\u0026#34;{{ \u0026#34;/js/center-image.js\u0026#34; | relURL }}\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\r\u0026lt;script type=\u0026#34;text/javascript\u0026#34; id=\u0026#34;MathJax-script\u0026#34; async\rsrc=\u0026#34;https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\u0026#34;\u0026gt;\r\u0026lt;/script\u0026gt;\r\u0026lt;center\u0026gt;\r\u0026lt;!--用户名自己修改，加入网站运行时间。\r--\u0026gt;\rLiripo \u0026lt;SPAN id=span_dt_dt style=\u0026#34;color: #0196e3;\u0026#34;\u0026gt;\u0026lt;/SPAN\u0026gt;\r\u0026lt;SCRIPT language=javascript\u0026gt;\rfunction show_date_time(){\rwindow.setTimeout(\u0026#34;show_date_time()\u0026#34;, 1000);\rBirthDay=new Date(\u0026#34;7/8/2019 00:00:00\u0026#34;);//日期自己修改\rtoday=new Date();\rtimeold=(today.getTime()-BirthDay.getTime());\rsectimeold=timeold/1000\rsecondsold=Math.floor(sectimeold);\rmsPerDay=24*60*60*1000\re_daysold=timeold/msPerDay\rdaysold=Math.floor(e_daysold);\re_hrsold=(e_daysold-daysold)*24;\rhrsold=Math.floor(e_hrsold);\re_minsold=(e_hrsold-hrsold)*60;\rminsold=Math.floor((e_hrsold-hrsold)*60);\rseconds=Math.floor((e_minsold-minsold)*60);\rspan_dt_dt.innerHTML=\u0026#34;\u0026#34;+daysold+\u0026#34;天\u0026#34;+hrsold+\u0026#34;小时\u0026#34;+minsold+\u0026#34;分\u0026#34;+seconds+\u0026#34;秒\u0026#34;;\r}\rshow_date_time();\r\u0026lt;/SCRIPT\u0026gt;\r\u0026lt;/center\u0026gt;\r添加不蒜子统计url访问数 不蒜子是 Bruce 开发的一款轻量级的网页计数器,轻量。\n可以看下文章:https://fuckcloudnative.io/posts/hugo-add-busuanzi/有说hugo怎么添加不蒜子，并修改初始访问人数，不过我没用。\n我在hugo-calade\\layouts\\partials\\footer.html改成如下配置：\n\u0026lt;footer\u0026gt;\r\u0026lt;!--highlight.js --\u0026gt;\r\u0026lt;script src=\u0026#34;https://cdnjs.cloudflare.com/ajax/libs/highlight.js/10.1.2/highlight.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\r\u0026lt;!--and it\u0026#39;s easy to individually load additional languages --\u0026gt;\r\u0026lt;script src=\u0026#34;https://cdnjs.cloudflare.com/ajax/libs/highlight.js/10.1.2/languages/r.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\r\u0026lt;script src=\u0026#34;https://cdnjs.cloudflare.com/ajax/libs/highlight.js/10.1.2/languages/python.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\r\u0026lt;script\u0026gt;\rhljs.configure({languages: []});\rhljs.initHighlightingOnLoad();\r\u0026lt;/script\u0026gt;\r\u0026lt;!--添加不蒜子--\u0026gt;\r\u0026lt;script async src=\u0026#34;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\r\u0026lt;span id=\u0026#34;busuanzi_container_site_pv\u0026#34;\u0026gt;本站总访问量\u0026lt;span id =\u0026#34;busuanzi_value_site_pv\u0026#34;\u0026gt;\u0026lt;/span\u0026gt;次\u0026lt;/span\u0026gt;\r\u0026lt;span id=\u0026#34;busuanzi_container_site_uv\u0026#34;\u0026gt;\r本站访客数\u0026lt;span id=\u0026#34;busuanzi_value_site_uv\u0026#34;\u0026gt;\u0026lt;/span\u0026gt;人次\r\u0026lt;/span\u0026gt;\r\u0026lt;!----\u0026gt;\r{{ partial \u0026#34;foot_custom.html\u0026#34; . }}\r{{ with .Site.Params.footer }}\r\u0026lt;br/\u0026gt;\u0026lt;br/\u0026gt;\r{{ . | markdownify }}\r\u0026lt;br/\u0026gt;\u0026lt;br/\u0026gt;\r{{ end }}\r\u0026lt;/footer\u0026gt;\r在主题目录下，hugo-calade\\layouts_default中的single.html(这个文件用于修改文章的html)\n\u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html lang=\u0026#34;{{ .Site.LanguageCode }}\u0026#34;\u0026gt;\r{{ partial \u0026#34;header.html\u0026#34; . }}\r\u0026lt;body\u0026gt;\r{{ partial \u0026#34;header_image.html\u0026#34; . }}\r\u0026lt;div class=\u0026#34;main-content\u0026#34;\u0026gt;\r{{ partial \u0026#34;menu_strip.html\u0026#34; . }}\r{{ partial \u0026#34;post_title.html\u0026#34; . }}\r\u0026lt;main\u0026gt;\r{{ partial \u0026#34;toc.html\u0026#34; . }}\r{{ .Content }}\r\u0026lt;/main\u0026gt;\r{{ partial \u0026#34;footer.html\u0026#34; . }}\r\u0026lt;/div\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r可以看到这个文件在body中引入了partial文件夹下的post_title.html等文件，我们修改post_title.html这文件如下：\n\u0026lt;div\u0026gt;\r\u0026lt;h1\u0026gt;{{ .Title | markdownify }}\u0026lt;/h1\u0026gt;\r\u0026lt;h3\u0026gt;\r{{ if (gt .Params.date 0) }}{{ .Date.Format \u0026#34;02 Jan 2006\u0026#34; }}{{ end }}\r\u0026lt;/h3\u0026gt;\r\u0026lt;h5 id=\u0026#34;wc\u0026#34;\u0026gt;{{ .WordCount }} Words|Read in about {{ .ReadingTime }} Min|本文总阅读量\u0026lt;span id=\u0026#34;busuanzi_value_page_pv\u0026#34;\u0026gt;\u0026lt;/span\u0026gt;次\u0026lt;/h5\u0026gt;\r\u0026lt;/h5\u0026gt;\r\u0026lt;br\u0026gt;\u0026lt;br\u0026gt;\r\u0026lt;/div\u0026gt;\r这样就加入了文章的字数。不过hugo默认不统计中文，所以还需要在站点文件config.toml加入\n#添加中文计数\rhasCJKLanguage = true 还有个注意点，就是那些没有缩进的配置应该放在\n[permalinks]\r等配置前面，才能识别。\n嵌入B站视频 参考文章：https://mogeko.me/2020/079/\n更多的，可以看这篇文章:https://www.xiangyunhuang.com.cn/2019/05/another-hello-markdown/\n插入音乐 http://tool.liumingye.cn/music/这网站下歌不错。\n修改表格样式 修改主题hugo-calade\\static\\css下的style.css文件\n/* table formatting\rtable {\rmargin: auto;\rborder-top: 1px solid #666;\rborder-bottom: 1px solid #666;\r}\rtable thead th { border-bottom: 1px solid #ddd; }\rth, td { padding: 5px; }\rthead, tfoot, tr:nth-child(even) { background: #eee; }\r*/\rtable {\rborder: 4px solid #000000;\rmargin: auto;\r/*width: 100%;*/\rtext-align: left;\rborder-collapse: collapse;\r}\rtable td, table th {\rborder: 1px solid #000000;\rpadding: 8px 6px;\r}\rtable tbody td {\rfont-size: 18px;\r}\rtable thead {\rbackground: #CFCFCF;\rbackground: -moz-linear-gradient(top, #dbdbdb 0%, #d3d3d3 66%, #CFCFCF 100%);\rbackground: -webkit-linear-gradient(top, #dbdbdb 0%, #d3d3d3 66%, #CFCFCF 100%);\rbackground: linear-gradient(to bottom, #dbdbdb 0%, #d3d3d3 66%, #CFCFCF 100%);\rborder-bottom: 4px solid #000000;\r}\rtable thead th {\rfont-size: 20px;\rfont-weight: bold;\rcolor: #000000;\rtext-align: left;\rfont-family: \u0026#34;Arial Black\u0026#34;;\r}\rtable tfoot {\rfont-size: 14px;\rfont-weight: bold;\rcolor: #000000;\rborder-top: 3px solid #000000;\r}\rtable tfoot td {\rfont-size: 14px;\r}\rhugo markdown hugo markdown是小于pandoc markdown的，所以想加入突出显示得改用html的mark标签。\n为了hugo能够解析markdown文件中的html标签，可以在config.toml文件加入\n[markup.goldmark.renderer]\runsafe = true\r这样就可以增加mark等突出显示的标签了。具体详见：https://gohugo.io/news/0.60.0-relnotes/\n引入谷歌字体 在主题的footer.html中加入\n\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://fonts.loli.net/css?family=Tangerine\u0026#34;\u0026gt;\r具体参考https://sb.sb/blog/css-cdn/,将谷歌字体api，改为使用loli.net,谷歌api。\n之后引入这个字体作为mark的css。\n/*加入突出高亮*/\rmark {\rfont-family: Tangerine;\rfont-weight: bold;\rbackground-color: #333333;\rtext-shadow: 4px 4px 4px #aaa;\r}\r引入行内公式 我通常会用符号$作为一个行内数学公式的标识符。但是貌似现在除了Pandoc会解析外，其他都没有这个支持。\nhttps://yihui.org/cn/2017/04/mathjax-markdown/提到了怎么修改。\nhttps://gohugo.io/getting-started/configuration-markup/#goldmarkhugo配置文件教程。\n目前默认使用goldmark渲染markdown。（注：没弄好。）\n修改table目录 正如上面goldmark配置链接，默认\n[markup.tableOfContents]\rendLevel = 3\rordered = false\rstartLevel = 2\r开始解析是从标题head2 开始，改成1开始。\n浮动目录 link链接修改\nhugo shortcode\nhugo toc修改\n对于普通的markdown文件，可以使用{{.TableOfContents}}进行设置，对于这个主题，你可以修改主题文件中的toc.html\n{{ if (.Params.toc) }}\r\u0026lt;aside\u0026gt;\r\u0026lt;div id=\u0026#39;anchors-navbar\u0026#39;\u0026gt;\r\u0026lt;i class=\u0026#39;fas fa-anchor\u0026#39;\u0026gt;\u0026lt;/i\u0026gt;\r{{.TableOfContents}}\r\u0026lt;/div\u0026gt;\r\u0026lt;/aside\u0026gt;\r{{ end }}\r之后根据class id属性修改css。\n/* formatting table of contents */\r#TableOfContents {\rbackground: #333399;\rdisplay: table;\rfont-size: 75%;\rmargin-bottom: 1em;\rpadding: 0px;\rwidth: auto;\r}\r#anchors-navbar {\r/*border: 1px solid;*/\r/*border-radius: 1px;*/\r-webkit-box-shadow: 10px 20px 30px 10px teal;\r/*box-shadow: 0 6px 12px #333333;*/\rbackground-clip: padding-box;\rpadding: 6px 6px;\rposition: fixed;\rright: 50px;\rtop: 68px;\rfont-size: 14px;\r/*white-space: nowrap;*/\rz-index: 999;\rcursor: pointer;\rtext-align: left;\rmax-height: 50%;\roverflow-y: auto;\roverflow-x: hidden;\r/*display: table;*/\rwidth: auto;\rmax-width: 300px;\rbackground: #333399;\r}\r#anchors-navbar ul{\rdisplay: none;\rtext-align: left;\rpadding-right: 10px;\rpadding-left: 18px;\rpadding-top: 5px;\rlist-style-type: lower-greek;\rmargin-left: 10px;\r}\r#anchors-navbar:hover ul{\rdisplay: block;\r}\r#anchors-navbar ul li a {\rtext-decoration: none;\rborder-bottom: none;\rfont-size: 18px;\rcolor: #ff69b4;\rbackground: 0 0;\rtext-overflow: ellipsis;\roverflow: hidden;\rwhite-space: nowrap;\rposition: relative;\rfont-weight: bold;\r}\r#anchors-navbar ul li a:hover {\rtext-decoration: underline;\rfont-weight: bold;\rcolor: #CCCCCC;\r}\r#anchors-navbar ul li .title-icon {\rpadding-right: 4px;\r}\r.fa-anchor {\rcolor:#FF6600;\r/*background-color: #333333;*/\rtext-shadow: 1px 1px 1px #ccc;\rfont-size: 2em;\r}\r加入js\niterativeUL: function($dom) {\rvar li_list = []\r$dom.children(\u0026#34;li\u0026#34;).each(function(i, item) {\rvar _li = { url: $(item).children(\u0026#34;a\u0026#34;).attr(\u0026#34;href\u0026#34;), name: $(item).children(\u0026#34;a\u0026#34;).text(),\rchildren: []\r} $sub_ul = $(item).children(\u0026#34;ul\u0026#34;)\rif ($sub_ul.length \u0026gt; 0) {\r_li.children = main.iterativeUL($sub_ul)\r} li_list.push(_li)\r}) return li_list\r};\riterativeUI: function(root, template, prefix) {\rtemplate += \u0026#34;\u0026lt;ul\u0026gt;\u0026#34;\r$.each(root, function(i, item) {\rvar next_prefix = prefix + String(i+1) + \u0026#34;.\u0026#34; template += \u0026#39;\u0026lt;li\u0026gt;\u0026#39;+\r\u0026#39;\u0026lt;i class=\u0026#34;fa fa-hand-o-right\u0026#34; aria-hidden=\u0026#34;true\u0026#34;\u0026gt;\u0026lt;/i\u0026gt;\u0026#39;+\r\u0026#39;\u0026lt;span class=\u0026#34;title-icon \u0026#34;\u0026gt;\u0026lt;/span\u0026gt;\u0026#39;+\r\u0026#39;\u0026lt;a href=\u0026#34;99991997\u0026#34;\u0026gt;\u0026lt;b\u0026gt;99991998 \u0026lt;/b\u0026gt;99991999\u0026lt;/a\u0026gt;\u0026#39;\r.replace(\u0026#34;99991997\u0026#34;, item.url)\r.replace(\u0026#34;99991999\u0026#34;, item.name)\r.replace(\u0026#34;99991998\u0026#34;, next_prefix) +\r\u0026#39;\u0026lt;/li\u0026gt;\u0026#39;\rif (item.children.length \u0026gt; 0) {\rtemplate = main.iterativeUI(item.children, template, next_prefix)\r} }) template += \u0026#34;\u0026lt;/ul\u0026gt;\u0026#34;\rreturn template\r};\rinitNavigations: function() {\rvar $navigations = $(\u0026#34;#TableOfContents\u0026#34;);\r/* 这是个大坑, 需要大于号\u0026gt;来限制只选择一级子元素，否则会有多组ul被匹配到 */\rvar root = main.iterativeUL($(\u0026#34;#TableOfContents \u0026gt; ul\u0026#34;))\rif (root.length \u0026lt;= 0) {\rreturn;\r}\rvar html = main.iterativeUI(root, \u0026#39;\u0026#39;, \u0026#39;\u0026#39;)\r//重新替换Toc模板\r $navigations.html(html)\r//由于导航栏固定,所以调整目录锚点往上偏移导航栏高度的距离\r var fixSet = $(\u0026#34;#main-navbar\u0026#34;).height() + 10; $(\u0026#39;nav#TableOfContents a[href^=\u0026#34;#\u0026#34;][href!=\u0026#34;#\u0026#34;]\u0026#39;).click(function(e) {\re.preventDefault();\r$(\u0026#39;html, body\u0026#39;).animate({scrollTop: $(decodeURI(this.hash)).offset().top - fixSet}, 400);\r}); };\r至于Rmarkdown,你可以修改后缀名.Rmd为.Rmarkdown,这两个区别见https://bookdown.org/yihui/blogdown/output-format.html\n或者knitr编译成.md文件，然后由hugo解析。\nhttp://estebanmoro.org/post/2019-02-04-setting-up-your-blog-with-rstudio-and-blogdown-iii-modify-your-theme/\nhttps://dadascience.design/post/r-some-tricks-when-working-with-blogdown-hugo-working-draft/\n当然，最好的方法是直接修改blogdown的pandoc模板，blogdown运行blogdown::serve_site等函数使用bloddown::html_page直接生成.html文件的，中间是使用pandoc进行markdown解析的。\nblogdown:::pkg_file(\u0026#39;resources\u0026#39;, \u0026#39;template-minimal.html\u0026#39;)\r可以找到这个简单的模板文件。\n原来的：\n$if(toc)$\r\u0026lt;div id=\u0026#34;$idprefix$TOC\u0026#34;\u0026gt;\r$toc$\r$endif$\r可以加上刚刚使用toc float的类\n$if(toc)$\r\u0026lt;aside\u0026gt;\r\u0026lt;div id=\u0026#39;anchors-navbar\u0026#39;\u0026gt;\r\u0026lt;i class=\u0026#39;fas fa-anchor\u0026#39;\u0026gt;\u0026lt;/i\u0026gt;\r\u0026lt;div id=\u0026#34;$idprefix$TOC\u0026#34;\u0026gt;\r$toc$\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/aside\u0026gt;\r$endif$\r这样就解决了。\n但是这样可不是长久之计，毕竟一更新这个包不就没了。\n还有高亮跟加入toc在yaml中使用\noutput:\rblogdown::html_page:\rhighlight: zenburn\rtoc: true\r发现只有这个高亮适合这主题。\n添加分页 https://bookdown.org/yihui/blogdown/templates.html#how-to\nhttps://lvv.me/posts/2019/12/26_hugo_theme_dev_tips/\n最后我的list文件是这样的\n\u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html lang=\u0026#34;{{ .Site.LanguageCode }}\u0026#34;\u0026gt;\r{{ partial \u0026#34;header.html\u0026#34; . }}\r\u0026lt;body\u0026gt;\r{{ partial \u0026#34;default_header_image.html\u0026#34; . }}\r\u0026lt;div class=\u0026#34;main-content site-main section-inner thin animated fadeIn faster\u0026#34;\u0026gt;\r{{ partial \u0026#34;menu_strip.html\u0026#34; . }}\r\u0026lt;h1\u0026gt;{{ .Title | markdownify }}\u0026lt;/h1\u0026gt;\r{{ .Content }}\r\u0026lt;div class=\u0026#34;prettylistcontainer\u0026#34;\u0026gt;\r\u0026lt;ul class=\u0026#34;prettylist\u0026#34;\u0026gt;\r\u0026lt;!--range (where .Data.Pages \u0026#34;Section\u0026#34; \u0026#34;!=\u0026#34; \u0026#34;\u0026#34;) --\u0026gt;\r{{ $paginator := .Paginate .Data.Pages }}\r{{ range $paginator.Pages }}\r\u0026lt;li class=\u0026#34;prettylist\u0026#34;\u0026gt;\r\u0026lt;p class=\u0026#34;prettylist\u0026#34;\u0026gt;\r\u0026lt;a href=\u0026#34;{{ .URL }}\u0026#34;\u0026gt;{{ .Title | markdownify }}\u0026lt;/a\u0026gt;\u0026amp;nbsp;\u0026amp;nbsp;\r\u0026lt;span class=\u0026#34;prettylistdate\u0026#34;\u0026gt;{{ .Date.Format \u0026#34;02 Jan 2006\u0026#34; }}\u0026lt;/span\u0026gt;\r\u0026lt;div class=\u0026#34;posts-group\u0026#34;\u0026gt;\r\u0026lt;br\u0026gt;\r\u0026lt;!--\u0026lt;span class=\u0026#34;prettylistsummary\u0026#34;\u0026gt;{{ .Summary | markdownify }}\u0026lt;/span\u0026gt;\r--\u0026gt;\r\u0026lt;/p\u0026gt;\r\u0026lt;/li\u0026gt;\r{{ end }}\r\u0026lt;/ul\u0026gt;\r\u0026lt;/div\u0026gt;\r{{ partial \u0026#34;pagination.html\u0026#34; . }} {{ partial \u0026#34;footer.html\u0026#34; . }}\r\u0026lt;/div\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r\\partial目录下的pagination.html文件如下\n{{ if or (.Paginator.HasPrev) (.Paginator.HasNext) }}\r\u0026lt;div class=\u0026#34;pagination\u0026#34;\u0026gt;\r{{- if .Paginator.HasPrev }}\r\u0026lt;a class=\u0026#34;pagination__item pagination__item--prev btn\u0026#34; href=\u0026#34;{{ .Paginator.Prev.URL }}\u0026#34;\u0026gt;«\u0026lt;/a\u0026gt;\r{{- end }}\r\u0026lt;span class=\u0026#34;pagination__item pagination__item--current\u0026#34;\u0026gt;{{ .Paginator.PageNumber }}/{{ .Paginator.TotalPages }}\u0026lt;/span\u0026gt;\r{{- if .Paginator.HasNext }}\r\u0026lt;a class=\u0026#34;pagination__item pagination__item--next btn\u0026#34; href=\u0026#34;{{ .Paginator.Next.URL }}\u0026#34;\u0026gt;»\u0026lt;/a\u0026gt;\r{{- end }}\r\u0026lt;/div\u0026gt;\r{{ end }} 之后就是加css了，\n/*增加文章分页css*/\r.pagination {\rmargin-top: 20px\r}\r.pagination__item {\rdisplay: inline-block;\rpadding: 10px 15px;\rfont-weight: 700;\rcolor: #333333;\rbackground: #336633\r}\r.pagination__item:hover, .pagination__item--current {\rcolor: #fff;\rbackground: #535e75\r}\r每页显示多少文章数，在站点配置文件改,默认10。\nPaginate = 10\r具体看文章:https://fffou.com/post/2020-05-14/\n添加RSS hugo默认有RSS，你仔细看你的网站会发现有一个index.xml文件，但是谷歌插件不会自动识别这个文件，必须打开，不大友好。\n在header.html添加，\n\u0026lt;link rel=\u0026quot;alternate\u0026quot; type=\u0026quot;application/rss+xml\u0026quot; href=\u0026quot;https://liripo.github.io/index.xml\u0026quot; title=\u0026quot;Liripo\u0026quot;\u0026gt;\r这样会在你整个网站添加链接，不想的话可以只添加到你的主页。\n添加站内搜素 https://palant.info/2020/06/04/the-easier-way-to-use-lunr-search-with-hugo/\n我使用如下教程:\nhttps://gist.github.com/cmod/5410eae147e4318164258742dd053993\n除了文件需要修改下，其余均如文档所述，运行CMD+/即可对站内进行检索。\n里面的fastsearch,js更改如下\nvar fuse; // holds our search engine\rvar searchVisible = false; var firstRun = true; // allow us to delay loading json data unless search activated\rvar list = document.getElementById(\u0026#39;searchResults\u0026#39;); // targets the \u0026lt;ul\u0026gt;\rvar first = list.firstChild; // first child of search list\rvar last = list.lastChild; // last child of search list\rvar maininput = document.getElementById(\u0026#39;searchInput\u0026#39;); // input box for search\rvar resultsAvailable = false; // Did we get any search results?\r\r// ==========================================\r// The main keyboard event listener running the show\r//\rdocument.addEventListener(\u0026#39;keydown\u0026#39;, function(event) {\r// CMD-/ to show / hide Search\r if (event.metaKey \u0026amp;\u0026amp; event.which === 191) {\r// Load json search index if first time invoking search\r // Means we don\u0026#39;t load json unless searches are going to happen; keep user payload small unless needed\r if(firstRun) {\rloadSearch(); // loads our json data and builds fuse.js search index\r firstRun = false; // let\u0026#39;s never do this again\r }\r// Toggle visibility of search box\r if (!searchVisible) {\rdocument.getElementById(\u0026#34;fastSearch\u0026#34;).style.visibility = \u0026#34;visible\u0026#34;; // show search box\r document.getElementById(\u0026#34;searchInput\u0026#34;).focus(); // put focus in input box so you can just start typing\r searchVisible = true; // search visible\r }\relse {\rdocument.getElementById(\u0026#34;fastSearch\u0026#34;).style.visibility = \u0026#34;hidden\u0026#34;; // hide search box\r document.activeElement.blur(); // remove focus from search box  searchVisible = false; // search not visible\r }\r}\r// Allow ESC (27) to close search box\r if (event.keyCode == 27) {\rif (searchVisible) {\rdocument.getElementById(\u0026#34;fastSearch\u0026#34;).style.visibility = \u0026#34;hidden\u0026#34;;\rdocument.activeElement.blur();\rsearchVisible = false;\r}\r}\r// DOWN (40) arrow\r if (event.keyCode == 40) {\rif (searchVisible \u0026amp;\u0026amp; resultsAvailable) {\rconsole.log(\u0026#34;down\u0026#34;);\revent.preventDefault(); // stop window from scrolling\r if ( document.activeElement == maininput) { first.focus(); } // if the currently focused element is the main input --\u0026gt; focus the first \u0026lt;li\u0026gt;\r else if ( document.activeElement == last ) { last.focus(); } // if we\u0026#39;re at the bottom, stay there\r else { document.activeElement.parentElement.nextSibling.firstElementChild.focus(); } // otherwise select the next search result\r }\r}\r// UP (38) arrow\r if (event.keyCode == 38) {\rif (searchVisible \u0026amp;\u0026amp; resultsAvailable) {\revent.preventDefault(); // stop window from scrolling\r if ( document.activeElement == maininput) { maininput.focus(); } // If we\u0026#39;re in the input box, do nothing\r else if ( document.activeElement == first) { maininput.focus(); } // If we\u0026#39;re at the first item, go to input box\r else { document.activeElement.parentElement.previousSibling.firstElementChild.focus(); } // Otherwise, select the search result above the current active one\r }\r}\r});\r// ==========================================\r// execute search as each character is typed\r//\rdocument.getElementById(\u0026#34;searchInput\u0026#34;).onkeyup = function(e) { executeSearch(this.value);\r}\r// ==========================================\r// fetch some json without jquery\r//\rfunction fetchJSONFile(path, callback) {\rvar httpRequest = new XMLHttpRequest();\rhttpRequest.onreadystatechange = function() {\rif (httpRequest.readyState === 4) {\rif (httpRequest.status === 200) {\rvar data = JSON.parse(httpRequest.responseText);\rif (callback) callback(data);\r}\r}\r};\rhttpRequest.open(\u0026#39;GET\u0026#39;, path);\rhttpRequest.send(); }\r// ==========================================\r// load our search index, only executed once\r// on first call of search box (CMD-/)\r//\rfunction loadSearch() { fetchJSONFile(\u0026#39;/index.json\u0026#39;, function(data){\rvar options = { // fuse.js options; check fuse.js website for details\r shouldSort: true,\rlocation: 0,\rdistance: 100,\rthreshold: 0.4,\rminMatchCharLength: 2,\rkeys: [\r\u0026#39;title\u0026#39;,\r\u0026#39;permalink\u0026#39;,\r\u0026#39;tags\u0026#39;,\r\u0026#39;content\u0026#39;\r]\r};\rfuse = new Fuse(data, options); // build the index from the json file\r });\r}\r// ==========================================\r// using the index we loaded on CMD-/, run // a search query (for \u0026#34;term\u0026#34;) every time a letter is typed\r// in the search box\r//\rfunction executeSearch(term) {\rlet results = fuse.search(term); // the actual query being run using fuse.js\r let searchitems = \u0026#39;\u0026#39;; // our results bucket\r if (results.length === 0) { // no results based on what was typed into the input box\r resultsAvailable = false;\rsearchitems = \u0026#39;\u0026#39;;\r} else { // build our html  for (let item in results.slice(0,5)) { // only show first 5 results\r searchitems = searchitems + \u0026#39;\u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;\u0026#39; + results[item].item.permalink + \u0026#39;\u0026#34; tabindex=\u0026#34;0\u0026#34;\u0026gt;\u0026#39; + \u0026#39;\u0026lt;span class=\u0026#34;title\u0026#34;\u0026gt;\u0026#39; + results[item].item.title + \u0026#39;\u0026lt;/span\u0026gt;\u0026lt;br /\u0026gt; \u0026lt;span class=\u0026#34;sc\u0026#34;\u0026gt;\u0026#39; + results[item].item.tags + \u0026#39;\u0026lt;/em\u0026gt;\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt;\u0026#39;;\r}\rresultsAvailable = true;\r}\rdocument.getElementById(\u0026#34;searchResults\u0026#34;).innerHTML = searchitems;\rif (results.length \u0026gt; 0) {\rfirst = list.firstChild.firstElementChild; // first result container — used for checking against keyboard up/down location\r last = list.lastChild.firstElementChild; // last result container — used for checking against keyboard up/down location\r }\r}\rserach.css如下\n#fastSearch { visibility: hidden;\rposition: fixed;\rright: 0px;\rtop: 0px;\rdisplay: inline-block;\rwidth: 300px;\r} #fastSearch input { padding: 4px 10px;\rwidth: 100%;\rheight: 31px;\rfont-size: 1.6em;\rcolor: #aaa;\rfont-weight: bold;\rbackground-color: #000;\rborder-radius: 3px 3px 0px 0px;\rborder: none;\routline: none;\rtext-align: left;\rdisplay: inline-block;\r}\r#searchResults li { list-style: none; margin-left: 0em;\rbackground-color: #333; border-bottom: 1px dotted #000;\r}\r#searchResults li .title { font-size: 1.1em; margin-bottom: 10px; display: inline-block;}\r#searchResults { visibility: inherit; display: inline-block; width: 320px; }\r#searchResults a { text-decoration: none !important; padding: 10px; display: inline-block; }\r#searchResults a:hover, a:focus { outline: 0; background-color: #666; color: #fff; }\rindex.json如下\n{{- $.Scratch.Add \u0026#34;index\u0026#34; slice -}}\r{{- range .Site.Pages -}}{{- $.Scratch.Add \u0026#34;index\u0026#34; (dict \u0026#34;title\u0026#34; .Title \u0026#34;tags\u0026#34; .Params.tags \u0026#34;content\u0026#34; .Plain \u0026#34;permalink\u0026#34; .Permalink \u0026#34;date\u0026#34; .Params.date) -}}{{- end -}}\r{{- $.Scratch.Get \u0026#34;index\u0026#34; | jsonify -}}\r","date":"2020-08-16T00:00:00Z","permalink":"https://liripo.github.io/post/blogdown%E5%8F%8Ahugo%E4%BD%BF%E7%94%A8%E4%B8%BB%E9%A2%98%E4%BF%AE%E6%94%B9/","tags":"R","title":"blogdown及hugo使用主题修改"},{"content":"安装 https://www.megasoftware.net/，下载windows的GUI版本，要使用CC（命令行）版本\u0026ndash;配置好环境变量即可。然后如果觉得windows配置不好，也可以安装linux版本（服务器），这里我选择ubantu CC（在官网中你可以直接下载能使用的二进制文件，也可以使用*.deb文件进行安装）。\n使用  分子进化的研究是核酸及氨基酸序列，究竟选择哪个？序列的选取要遵循以下原则：1）如果DNA序列的两两间的一致度≥70%，选用DNA序列。因为，如果DNA序列都如此相似，它的蛋白质会相似到看不出区别，这对构建系统发生树是不利的。所以这种情况下应该选用DNA序列，而不选蛋白质序列。2）如果DNA序列的两两间的一致度≤70%，DNA序列和蛋白质序列都可以选用。\n 首先需要一个fasta文件，这在官网示例点击hsp20.meg,有一个四个物种没有比对好的fas文件（就是fasta文件）。\n由于需要使用图片，这里我使用pdf文件分享，懒得把图片保存在云床上或者放在网站中了，虽然pdf也是放网站里，但是只需要操作一遍呀。（果然有图片什么的最烦了！）\npdf路径：pdf，看后面内容直接使用pdf吧。\n可以看到一个DNA seq跟翻译的蛋白序列，然后还有个Display的栏可以更改序列的查看方式，比如换成没有背景颜色等等。具体可以自行试试。\n这里我们点击Alignment栏，可以看到\n有两种比对方法：ClustalW跟MUSCLE（貌似还有一个叫T-coffee）\n ClustalW是现在用的最广和最经典的多序列比对，是目前使用最广泛的多序列比对程序。（而且也可以用于双序列比对）它采用的是一种渐进的比对方法(progressive methods)，先将多个序列两两比对构建距离矩阵，反映序列之间两两关系；然后根据距离矩阵计算产生系统进化指导树，对关系密切的序列进行加权；然后从最紧密的两条序列开始，逐步引入临近的序列并不断重新构建比对，直到所有序列都被加入为止。 Muscle的速度比较快，比clustalw的速度快几个数量级,而且序列数越多速度的差别越大。不过只能用于多序列，之所以比clustalw快一方面是因为没有进行两两序列比对。  对于示例文件这种小文件，我们使用ClustalW是不错的选择。T-coffee相比似乎更慢更精确。（不过当文件相似度\u0026gt;80%时，三个程序精确度都在90%以上）\n 比对结束后可以保存好比对后的fas文件，或者保存成meg文件之类的都行，或者每种格式都保存一次。毕竟运行一次多序列比对文件大挺耗时。\nfas文件保存的是比对后文件，meg文件可以进行下一步的进化树分析。我一般还保存好比对好的fasta文件，方便后续其他分析。\n 这里我们就可以点击PHYLOGENY进行进化树分析了，有多种方法根据距离矩阵构建进化树，之后就可以看进化树了。\nlinux CC 首先在GUI界面选择\n之后即可进行设置生成*.mao文件了。\n比如先试下序列比对\nmegacc -a *.mao -d *.fasta -f fatsa -o ./\r-f保存成meg文件的时候不知道为什么用windows的megax一直打开失败，虽然你可以直接在linux建树，但是-f fasta可以直接megax打开建树，毕竟建树时间不长，所以我喜欢这个工作模式。\n参数深入理解    方法名 方法名     ML，Maximum likelihood 最大似然法   NJ，Neighbor-Joining 邻接法   MP，Maximum parsimony 最大简约法   ME，Minimum Evolution 最小进化法   Bayesian 贝叶斯推断   UPGMA 不常用    进化树分析目前相对常用的方法是NJ，一篇综述（Hall BG. Mol Biol Evol 2005, 22(3):792-802）认为贝叶斯的方法最好，其次是ML，然后是MP。\n之后test选择Bootstrap method ,点击OK。得到\n其中100为bootstrap值,大于70的表示这个节点比较可靠。\n boostrap值含义:即自展值，可用来检验所计算的进化树分支可信度。Bootstrap几乎是构建系统进化树一个必须的选项。一般Bootstrap的值\u0026gt;70(或者70%)，则认为构建的进化树较为可靠。如果Bootstrap的值太低，则有可能进化树的拓扑结构有错误，进化树是不可靠的。\n 通过工具栏可以对树的形状进行调整。（右键树的分枝等也能修改颜色）可以保存成pdf等。pdf可以用AI美化。（original tree是按照比例尺画的，Boostrap consensus tree则展示了树的关系图，不过original tree似乎会截断太长的树，我也不知道怎么调，所以最好选择其他画树工具。）\n记得保存树文件Newick,方便美化。（最好把bootstrap值跟branch length保存下来）\n保存下来的newick可以用iTOL或者ggtree等美化。iTOL使用可以直接自己尝试。\n序列比对分析 1.序列相似性比较和序列同源性分析\n序列相似性比较：将待研究序列与DNA或蛋白质序列库进行比较，用于找出与此序列相似的已知序列。完成这一步只需要两两序列比对的算法。例如:BLAST、FASTA。 序列同源性分析: 将待研究序列与一组与之同源，但来自不同物种的序列进行多序列比较，以确定该序列与其他序列间的同源性大小。完成这一步需要多序列比对算法。例如:Clustal。\n2.序列同源性分析(多序列比对)的意义\n 用于描述一组序列之间的相似性关系，以便了解一个基因家族的基本特征，寻找motif,保守区域。(motif:是蛋白质分子具有特定功能的或者作为一个独立结构域一部分相近的二级结构聚合体) 用于描述一个同源基因之间的亲缘关系的远近，应用到分子进化分析中。即是进化分析。 其他：构建profile、打分矩阵。  多序列比对其他工具 当然，也可以安装MUSCLE等软件进行使用。（或者使用在线工具之类的，比如https://www.ebi.ac.uk/Tools/msa/clustalw2/）\nT-coffee目前还没用过。\nR中多序列比对 msa: an R package for multiple sequence alignment文章介绍了开发的msa包，这个包可以在bioconductor获得。【ps:因为依赖Biocstrings,所以安装起来还挺麻烦，不过遇到错误慢慢解决吧，报错原因大部分是因为网络或者依赖的包版本不对之类的】\n而这个包封装了msaPrettyPrint函数绘图，十分不错。当然你也可以使用mega打开fasta文件进行查看，截图并AI美化。或者选择试试R 包ggmsa。\n用mega的hsa序列试下，官网下的示例文件的那条hsa.meg我命名为了hsa.fasta(个人习惯比对好的以后缀名.fas表示)\nlibrary(msa)\rfasta \u0026lt;- readDNAStringSet(\u0026#34;./hsp20.fasta\u0026#34;)\rfasta\r很漂亮。\nfas \u0026lt;- msa(fasta,method = \u0026#34;Muscle\u0026#34;)\rfas\rprint(fas,show=\u0026#34;complete\u0026#34;) #print全部比对好的序列\r msa函数目前有三种比对方法，可以根据需要选择相应方法。\nmsaprettyprint函数的使用 不论是在linux还是windows，你都需要这个pdflatex程序。\n我们需要Texlive这软件，安装很麻烦1，或者说用apt下载。\n最后我选择使用R包tinytex安装。当然你弄过R markdown基本就是有这程序了。\ndevtools的安装就不在这儿说了，也非必要要用devtools下载。\ndevtools::install_github(\u0026#39;yihui/tinytex\u0026#39;)\rtinytex::install_tinytex()\rlinux一般会帮你下在~/.TinyTeX目录下，使用前请配好环境变量，msa才能使用。\nwindows可以自己下个CTEX之类的，或者用tinytex下就行，使用时仍旧先配好环境变量。\n在Linux下使用这函数你完全可以按照官方的说明文档使用。\n在windows我遇到了找不到文件fasta文件及找不到texshade.sty文件的报错。虽然一开始我是通过修改msaprettyprint函数生成的tex文件解决了，但是稍微阅读了下源代码，发现比较便捷的方式处理找不到文件的错误。接下来记录下这两种解决方式。\n官方文档代码：\nlibrary(msa)\rmySequenceFile \u0026lt;- system.file(\u0026#34;examples\u0026#34;, \u0026#34;exampleAA.fasta\u0026#34;, package=\u0026#34;msa\u0026#34;)\rmySequences \u0026lt;- readAAStringSet(mySequenceFile)\rmyFirstAlignment \u0026lt;- msa(mySequences)\rmsaPrettyPrint(myFirstAlignment, output=\u0026#34;pdf\u0026#34;, showNames=\u0026#34;none\u0026#34;,\rshowLogo=\u0026#34;none\u0026#34;, askForOverwrite=FALSE, verbose=FALSE)\r最后这函数在我的当前目录下生成了myFirstAlignment.tex文件之后报错了。\n通过打开tex文件，会发现这一栏这个路径我们在windows是打不开的，这里需要改成正确的能打开的路径。\n修改之后使用Rstudio的Compile PDF也发生报错，\n找不到texshade.sty文件，而这个文件所在路径在:\nsystem.file(\u0026#34;tex\u0026#34;, \u0026#34;texshade.sty\u0026#34;, package=\u0026#34;msa\u0026#34;)\r无奈看下源码，之后使用\ntools::texi2dvi(\u0026#34;./myFirstAlignment.tex\u0026#34;, quiet = F, pdf =T, texinputs = system.file(\u0026#34;tex\u0026#34;, package = \u0026#34;msa\u0026#34;), clean = TRUE, index = FALSE)\r就解决了。ps:麻烦\n阅读源码及稍微看下帮助文档，\nmsaPrettyPrint(myFirstAlignment, output=\u0026#34;pdf\u0026#34;, showNames=\u0026#34;none\u0026#34;,\rshowLogo=\u0026#34;none\u0026#34;, askForOverwrite=FALSE, verbose=T,alFile = \u0026#34;a.fasta\u0026#34;)\r运行上述命令即可完成编译。\nalFile = \u0026quot;a.fasta\u0026quot;在当前目录指定生成fasta文件，verbose = T即是运行tools::texi2dvi函数,所以在windows使用时你不是utf-8编码估计应该都需要加入这两个参数。\n  https://stone-zeng.github.io/2018-05-13-install-texlive-ubuntu/\u0026#8617;\n   ","date":"2020-08-15T00:00:00Z","permalink":"https://liripo.github.io/post/mega%E4%BD%BF%E7%94%A8%E5%8F%8A%E5%A4%9A%E5%BA%8F%E5%88%97%E6%AF%94%E5%AF%B9/","tags":"bio","title":"Mega使用及多序列比对"},{"content":"","date":null,"permalink":"https://liripo.github.io/tags/analysis/","tags":null,"title":"analysis"},{"content":"文章：基因表达数据批次效应去除方法的研究进展\nlimma::removeBatchEffect  limma 包中的removeBatchEffect 是构建了一个线性模型,然后进行QR分解从而去除批次效应\n n = 20\ra1 = rnorm(n,mean = 5,sd =1)\ra2 = rnorm(n,mean = 5,sd =1)\ra3 = rnorm(n,mean = 500,sd =100)\ra4 = rnorm(n,mean = 500,sd =100)\ra1[1] = 200\ra4[2] = 1\rdat = data.frame(a1,a2,a3,a4)\rbatch = c(1,1,2,2)\rdf = limma::removeBatchEffect(dat,\rbatch = batch)\rdf\r上面的代码第6、7行加入异常值，这导致了去批次后出现负值的情况，当然，那个负值所在的列的值(基因表达量)不一定是存在异常值，在同一批次中的某一个基因异常高表达,会导致其他基因因为表达谱相对论从而变成异常低表达。\n异常值的处理方法\n 使用 3σ或者 1.5IQR原则过滤异常值 log转换(这个方法可以把偏态数据进行拉回来) sigmoid函数对数据进行压缩(这个方法适用于除了异常值后方差较小的数据) 如果这个基因你压根就不关心直接删掉  ","date":"2020-08-14T00:00:00Z","permalink":"https://liripo.github.io/post/%E5%8E%BB%E6%89%B9%E6%AC%A1%E6%95%88%E5%BA%94/","tags":"analysis","title":"去批次效应"},{"content":"最新的blast可以在页面ftp://ftp.ncbi.nih.gov/blast/executables/LATEST/找到。\n本地使用 blast手册页\nblast命令行\nblastn使用,blastn -task有四个选项，分别为\n  blastn\n  blastn-short\n  megablast\n  dc-megablast\n  具体可以在手册页找到。 一开始应该建库， 比如xxx.fasta核苷酸序列建库,可以简单\nmakeblastdb -in xxx.fasta -dbtype nucl\rmakeblastdb参数\n-in 需要建库的fasta序列\r-dbtype 如果是蛋白库则用prot，核酸库用nucl\r-out 所建数据库的名称\r-parse_seqids =\u0026gt; Parse bar delimited sequence identifiers (e.g., gi|129295) in FASTA input.\r-hash_index =\u0026gt; Create index of sequence hash values.\r-out =\u0026gt;Name of BLAST database to be created. Input file name is used if none provided. This field is required if input consists of multiple files.\r更加具体的可以看blast命令行\n比对的话我喜欢借鉴metablastr(R包)的输出，在命令行使用\nblastn -query xxx.fasta \\\r -db reference.fasta \\\r -num_threads 30 \\\r -task megablast \\\r -outfmt \u0026#34;10 qseqid sseqid pident nident length mismatch gapopen gaps positive ppos qstart qend qlen qcovs qcovhsp sstart send slen evalue bitscore score\u0026#34; \u0026gt;xxx.csv\r之后使用R给输出加上表头\nblast \u0026lt;- metablastr::read_blast(xxx.csv,out.format = \u0026#34;csv\u0026#34;)\r默认的-outfmt是0。以比对的形式展示。\nSRA数据下载后，解压后得到fastq文件，可以转为fasta之后进行megablast之类的，当然，也可以在NCBI上操作，只是输出结果有5000条的限制。\n或者有一个https://ncbi.github.io/magicblast/可以试试直接分析sra数据。\n","date":"2020-08-02T00:00:00Z","permalink":"https://liripo.github.io/post/ncbi/","tags":"bio","title":"blast学习"},{"content":"\r\rcode.sourceCode  span { display: inline-block; line-height: 1.25; }\rcode.sourceCode  span { color: inherit; text-decoration: inherit; }\rcode.sourceCode  span:empty { height: 1.2em; }\r.sourceCode { overflow: visible; }\rcode.sourceCode { white-space: pre; position: relative; }\rdiv.sourceCode { margin: 1em 0; }\rpre.sourceCode { margin: 0; }\r@media screen {\rdiv.sourceCode { overflow: auto; }\r}\r@media print {\rcode.sourceCode { white-space: pre-wrap; }\rcode.sourceCode  span { text-indent: -5em; padding-left: 5em; }\r}\rpre.numberSource code\r{ counter-reset: source-line 0; }\rpre.numberSource code  span\r{ position: relative; left: -4em; counter-increment: source-line; }\rpre.numberSource code  span  a:first-child::before\r{ content: counter(source-line);\rposition: relative; left: -1em; text-align: right; vertical-align: baseline;\rborder: none; display: inline-block;\r-webkit-touch-callout: none; -webkit-user-select: none;\r-khtml-user-select: none; -moz-user-select: none;\r-ms-user-select: none; user-select: none;\rpadding: 0 4px; width: 4em;\r}\rpre.numberSource { margin-left: 3em; padding-left: 4px; }\rdiv.sourceCode\r{ color: #cccccc; background-color: #303030; }\r@media screen {\rcode.sourceCode  span  a:first-child::before { text-decoration: underline; }\r}\rcode span.al { color: #ffcfaf; } /* Alert */\rcode span.an { color: #7f9f7f; font-weight: bold; } /* Annotation */\rcode span.at { } /* Attribute */\rcode span.bn { color: #dca3a3; } /* BaseN */\rcode span.bu { } /* BuiltIn */\rcode span.cf { color: #f0dfaf; } /* ControlFlow */\rcode span.ch { color: #dca3a3; } /* Char */\rcode span.cn { color: #dca3a3; font-weight: bold; } /* Constant */\rcode span.co { color: #7f9f7f; } /* Comment */\rcode span.cv { color: #7f9f7f; font-weight: bold; } /* CommentVar */\rcode span.do { color: #7f9f7f; } /* Documentation */\rcode span.dt { color: #dfdfbf; } /* DataType */\rcode span.dv { color: #dcdccc; } /* DecVal */\rcode span.er { color: #c3bf9f; } /* Error */\rcode span.ex { } /* Extension */\rcode span.fl { color: #c0bed1; } /* Float */\rcode span.fu { color: #efef8f; } /* Function */\rcode span.im { } /* Import */\rcode span.in { color: #7f9f7f; font-weight: bold; } /* Information */\rcode span.kw { color: #f0dfaf; } /* Keyword */\rcode span.op { color: #f0efd0; } /* Operator */\rcode span.ot { color: #efef8f; } /* Other */\rcode span.pp { color: #ffcfaf; font-weight: bold; } /* Preprocessor */\rcode span.sc { color: #dca3a3; } /* SpecialChar */\rcode span.ss { color: #cc9393; } /* SpecialString */\rcode span.st { color: #cc9393; } /* String */\rcode span.va { } /* Variable */\rcode span.vs { color: #cc9393; } /* VerbatimString */\rcode span.wa { color: #7f9f7f; font-weight: bold; } /* Warning */\r\r\r\r\rflametree\rlearn code\rflametree_plot\rflametree_grow\rgrow_sapling\rgrow_tree\rgrow_layer\rgrow_shoots\r\r\rlast\r\r\r\r\rflametree\rflametree使用贝塞尔曲线绘制了很好看的树。\nlibrary(tidyverse)\rflametree::flametree_grow() %\u0026gt;%flametree::flametree_plot()\r\rlearn code\rflametree_plot\rflametree::flametree_plot\r## function (tree, background = \u0026quot;antiquewhite4\u0026quot;, palette = \u0026quot;viridis::inferno\u0026quot;) ## {\r## mapping \u0026lt;- ggplot2::aes(x = coord_x, y = coord_y, group = id_path, ## size = seg_wid, color = seg_col)\r## picture \u0026lt;- ggplot2::ggplot(data = tree, mapping = mapping) + ## ggforce::geom_bezier2(show.legend = FALSE, lineend = \u0026quot;round\u0026quot;) + ## paletteer::scale_color_paletteer_c(palette = palette) + ## theme_mono(color = background)\r## return(picture)\r## }\r## \u0026lt;bytecode: 0x00000000210b9a38\u0026gt;\r## \u0026lt;environment: namespace:flametree\u0026gt;\r绘图源代码中使用了ggforce::geom_bezier2函数去绘制图形，我在看这个函数的源代码时发现StatBezier在数据转换使用了一个ggforce:::getBeziers函数，没怎么看明白cpp代码，而且ggplot2的扩展我也还没怎么弄清。不过大概意思就是根据贝塞尔曲线生成一系列的点，然后使用geom_path绘制图形。\n搜了下贝塞尔曲线是什么，参考了https://github.com/BooheeFE/weekly/issues/31。\n然后摸索了一下函数flametree::flametree_grow()生成的数据，它生成了每三个点为一组的数据。这里我们就看看前三行数据,就不用knitr输出整个表了\nflametree::flametree_grow() %\u0026gt;%head(3)-\u0026gt;data\rdata\r## # A tibble: 3 x 10\r## coord_x coord_y seg_deg seg_len seg_col seg_wid id_time id_path id_step\r## \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt;\r## 1 0 0 90 1 0 0.905 1 1 0\r## 2 0 0.5 90 1 0.5 0.905 1 1 1\r## 3 0 1 90 1 1 0.905 1 1 2\r## # ... with 1 more variable: id_leaf \u0026lt;lgl\u0026gt;\r试着按照参考的三个点的贝塞尔曲线写了个函数，当然推导过程我还没看看怎么推导的~~\nr_getbeziers \u0026lt;-function(data,coordx,coord_y,n = 100){\r p_x \u0026lt;-data$coord_x \r p_y \u0026lt;-data$coord_y\r n_t \u0026lt;-seq(0,1,length.out = n)\r outx \u0026lt;-(1-n_t)^2*p_x[1] +2*(1-n_t)*n_t*p_x[2] +n_t^2*p_x[3]\r outy \u0026lt;-(1-n_t)^2*p_y[1] +2*(1-n_t)*n_t*p_y[2] +n_t^2*p_y[3]\r out \u0026lt;-tibble(x = outx , y = outy)\r out\r}\r验证一下,\ndata %\u0026gt;%r_getbeziers(coordx,coord_y)-\u0026gt;a\rb \u0026lt;-ggforce:::getBeziers(data$coord_x,data$coord_y,id = data$id_path,100)\rall(b$paths ==a)\r## [1] TRUE\r贝塞尔曲线就到这吧。所以剩下一个绘制flametree树图的问题就是如何生成每三个点为一组的数据了,当然，按照flametree::flametree_plot函数所示，数据还需要加上线的大小以及颜色。\n\rflametree_grow\rflametree::flametree_grow\r## function (seed = 286, time = 6, scale = c(0.8, 0.9), angle = c(-10, ## 10, 20), split = 2, prune = 0) ## {\r## param \u0026lt;- list(seed = seed, time = time, scale = scale, angle = angle, ## split = split, prune = prune)\r## set.seed(param$seed)\r## tree \u0026lt;- grow_sapling() %\u0026gt;% grow_tree(param) %\u0026gt;% shape_tree()\r## tree$id_leaf \u0026lt;- tree$id_time == max(tree$id_time)\r## return(tree)\r## }\r## \u0026lt;bytecode: 0x0000000018fd41f0\u0026gt;\r## \u0026lt;environment: namespace:flametree\u0026gt;\r这些参数，seed明显就是用来可重复的，time帮助文档说是迭代的次数，经过摸索，它是要生成多少次树枝，而split是生成的分枝个数，prune是修剪的概率。prune的实现原理是使用sample_n跟stats::rbinom实现的，可以看看flametree:::grow_shoots的代码，这里默认0是不修剪，暂时先不管它了。\r看下time = 2,split = 1的图长什么样。\nflametree::flametree_grow(time = 2,split = 1,angle = 10,scale = 0.9) %\u0026gt;%\rflametree::flametree_plot()\rgrow_sapling\rflametree:::grow_sapling() %\u0026gt;%print()\r## # A tibble: 1 x 9\r## x_0 y_0 x_1 y_1 x_2 y_2 seg_deg seg_len id_time\r## \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt;\r## 1 0 0 0 0.5 0 1 90 1 1\r可以看到生成一个初始tibble,(x_0:y_2)列是绘制贝塞尔曲线的三个点，经过flametree:::shape_tree函数最后转成长列表格式。seg_deg是生成的角度，现在可能不太好说明。seg_len是树枝的长度，id_time则是进行的迭代id。\n\rgrow_tree\rflametree:::grow_tree\r## function (sapling, param) ## {\r## tree \u0026lt;- purrr::accumulate(.x = 1:param$time, .f = grow_layer, ## .init = sapling, param = param)\r## return(tree)\r## }\r## \u0026lt;bytecode: 0x0000000019187398\u0026gt;\r## \u0026lt;environment: namespace:flametree\u0026gt;\r可以看到，.init参数是sapling,即生成的数据框列表第一个是sapling,之后进行迭代。\r花了挺久时间才明白.init参数是什么作用。\n\rgrow_layer\rflametree:::grow_layer\r## function (shoots, time, param) ## {\r## new_shoots \u0026lt;- purrr::map_dfr(.x = 1:param$split, .f = grow_shoots, ## shoots = shoots, param = param)\r## return(new_shoots)\r## }\r## \u0026lt;bytecode: 0x0000000019191088\u0026gt;\r## \u0026lt;environment: namespace:flametree\u0026gt;\r可以看到split参数就是用来生成多少行的数据框的，\r先看下grow_shoots源码，\nflametree:::grow_shoots\r## function (time, shoots, param) ## {\r## n_shoots \u0026lt;- nrow(shoots)\r## n_pruned \u0026lt;- stats::rbinom(n = 1, size = n_shoots - 1, prob = param$prune)\r## ch_seg_len \u0026lt;- sample(x = param$scale, size = n_shoots, replace = TRUE)\r## ch_seg_deg \u0026lt;- sample(x = param$angle, size = n_shoots, replace = TRUE)\r## shoots \u0026lt;- shoots %\u0026gt;% dplyr::mutate(x_0 = x_2, y_0 = y_2, ## seg_len = seg_len * ch_seg_len, x_1 = x_0 + extend_x(seg_len/2, ## seg_deg), y_1 = y_0 + extend_y(seg_len/2, seg_deg), ## seg_deg = seg_deg + ch_seg_deg, id_time = id_time + 1L, ## x_2 = x_0 + extend_x(seg_len, seg_deg), y_2 = y_0 + extend_y(seg_len, ## seg_deg), ) %\u0026gt;% dplyr::sample_n(size = n_shoots - ## n_pruned)\r## return(shoots)\r## }\r## \u0026lt;bytecode: 0x00000000191b14c0\u0026gt;\r## \u0026lt;environment: namespace:flametree\u0026gt;\rtime参数并没有在grow_shoots使用到。所以当用1:param$split为time参数，且默认split为2时,生成的点是有可能跟原来重复的。也就是有的地方geom_path会绘制多次。验证一下，\nflametree::flametree_grow()-\u0026gt;a\ra %\u0026gt;%filter(id_time ==7) %\u0026gt;%nrow()\r## [1] 192\ra %\u0026gt;%filter(id_time ==7) %\u0026gt;%select(-id_path) %\u0026gt;%\rdistinct() %\u0026gt;%nrow()\r## [1] 171\r可以看到有些行数被去重了。（应该是这样的）\r\u0026gt;这儿是不是应该修改成split的两个不会重复呢？(虽然这样想，我还没试着改下)\nflametree::flametree_grow(seed = 100) %\u0026gt;%flametree::flametree_plot()\r这个图很显然就是第一个枝桠没有生出两个分支的例子了。\r\u0026gt;备注：重新看下作者的帮助文档，她也说了split是生成最大的分支的意思（怪我一开始没理解这参数的意思）\n\rgrow_shoots\r这个函数源码正如上所示，\r起始的shoots为sapling,即\nsapling \u0026lt;-flametree:::grow_sapling()\rshoots \u0026lt;-sapling\r然后这个函数代码中，第三第四行分别scale,angle的随机数，默认参数的随机选择比较少些,试下参数改成scale= runif(100,0.8,0.9)。\nflametree::flametree_grow(seed= 100,scale = runif(100,0.6,0.9)) %\u0026gt;%\rflametree::flametree_plot()\rhh,有必要么。。。\n接着看下最后的操作，下一个生成的shoots会是啥，这里我们用参数split = 1来看看，就是函数accumulate累加生成的shoots都为1行。如果按照默认参数time = 6,split = 2的话，起始shoots为一行，之后变1*2行，1*2*2行,…1*2^6行。\nshoots \u0026lt;-shoots %\u0026gt;%dplyr::mutate(\r x_0 = x_2, \r y_0 = y_2, \r seg_len = seg_len *ch_seg_len, \r x_1 = x_0 +extend_x(seg_len/2,seg_deg), \r y_1 = y_0 +extend_y(seg_len/2, seg_deg), \r seg_deg = seg_deg +ch_seg_deg, \r id_time = id_time +1L, \r x_2 = x_0 +extend_x(seg_len, seg_deg), \r y_2 = y_0 +extend_y(seg_len, seg_deg),)\r可以看到，p0第一个点，p1第二个点，p2第三个点，新的shoots的p0是上一个shoots的p2,seg_len跟seg_deg就是新生成的shoots长度跟角度的修改。\nflametree:::extend_x\r## function (distance, angle) ## {\r## distance * cos(radians(angle))\r## }\r## \u0026lt;bytecode: 0x000000001a495f70\u0026gt;\r## \u0026lt;environment: namespace:flametree\u0026gt;\rflametree:::radians\r## function (degree) ## {\r## 2 * pi * degree/360\r## }\r## \u0026lt;bytecode: 0x000000001a496bb0\u0026gt;\r## \u0026lt;environment: namespace:flametree\u0026gt;\r然后p1点的延伸使用的是新的shoots的长度跟原来的shoots的角度,p2点的延伸使用新的shoots的长度与角度生成。（为什么不都使用新的长度跟角度呢）\n所以假设ch_seg_len = 0.9,ch_seg = 10的话,新的shoots即为，\n# A tibble: 1 x 9\rx_0 y_0 x_1 y_1 x_2 y_2 seg_deg seg_len id_time\r\u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt;\r1 0 1 2.76e-17 1.45 -0.156 1.89 100 0.9 2\r\r\r\rlast\r总的差不多就是这样了,之后对grow_tree的数据转成长数据就行了。\r作者在github上绘制的图\nflametree::flametree_grow(seed = 4, time = 13) %\u0026gt;%\rflametree::flametree_plot()\r\r","date":"2020-07-28T00:00:00Z","permalink":"https://liripo.github.io/post/flametree%E5%AD%A6%E4%B9%A0/","tags":"R","title":"flametree学习"},{"content":"\r\rcode.sourceCode  span { display: inline-block; line-height: 1.25; }\rcode.sourceCode  span { color: inherit; text-decoration: inherit; }\rcode.sourceCode  span:empty { height: 1.2em; }\r.sourceCode { overflow: visible; }\rcode.sourceCode { white-space: pre; position: relative; }\rdiv.sourceCode { margin: 1em 0; }\rpre.sourceCode { margin: 0; }\r@media screen {\rdiv.sourceCode { overflow: auto; }\r}\r@media print {\rcode.sourceCode { white-space: pre-wrap; }\rcode.sourceCode  span { text-indent: -5em; padding-left: 5em; }\r}\rpre.numberSource code\r{ counter-reset: source-line 0; }\rpre.numberSource code  span\r{ position: relative; left: -4em; counter-increment: source-line; }\rpre.numberSource code  span  a:first-child::before\r{ content: counter(source-line);\rposition: relative; left: -1em; text-align: right; vertical-align: baseline;\rborder: none; display: inline-block;\r-webkit-touch-callout: none; -webkit-user-select: none;\r-khtml-user-select: none; -moz-user-select: none;\r-ms-user-select: none; user-select: none;\rpadding: 0 4px; width: 4em;\r}\rpre.numberSource { margin-left: 3em; padding-left: 4px; }\rdiv.sourceCode\r{ color: #cccccc; background-color: #303030; }\r@media screen {\rcode.sourceCode  span  a:first-child::before { text-decoration: underline; }\r}\rcode span.al { color: #ffcfaf; } /* Alert */\rcode span.an { color: #7f9f7f; font-weight: bold; } /* Annotation */\rcode span.at { } /* Attribute */\rcode span.bn { color: #dca3a3; } /* BaseN */\rcode span.bu { } /* BuiltIn */\rcode span.cf { color: #f0dfaf; } /* ControlFlow */\rcode span.ch { color: #dca3a3; } /* Char */\rcode span.cn { color: #dca3a3; font-weight: bold; } /* Constant */\rcode span.co { color: #7f9f7f; } /* Comment */\rcode span.cv { color: #7f9f7f; font-weight: bold; } /* CommentVar */\rcode span.do { color: #7f9f7f; } /* Documentation */\rcode span.dt { color: #dfdfbf; } /* DataType */\rcode span.dv { color: #dcdccc; } /* DecVal */\rcode span.er { color: #c3bf9f; } /* Error */\rcode span.ex { } /* Extension */\rcode span.fl { color: #c0bed1; } /* Float */\rcode span.fu { color: #efef8f; } /* Function */\rcode span.im { } /* Import */\rcode span.in { color: #7f9f7f; font-weight: bold; } /* Information */\rcode span.kw { color: #f0dfaf; } /* Keyword */\rcode span.op { color: #f0efd0; } /* Operator */\rcode span.ot { color: #efef8f; } /* Other */\rcode span.pp { color: #ffcfaf; font-weight: bold; } /* Preprocessor */\rcode span.sc { color: #dca3a3; } /* SpecialChar */\rcode span.ss { color: #cc9393; } /* SpecialString */\rcode span.st { color: #cc9393; } /* String */\rcode span.va { } /* Variable */\rcode span.vs { color: #cc9393; } /* VerbatimString */\rcode span.wa { color: #7f9f7f; font-weight: bold; } /* Warning */\r\r\r最初,我在工作的时候绘制柱状图分面时遇到了柱子不等长的情况，然后使用ggtree::facet_widths解决了。之后谷歌搜索ggplot2 facet width发现ggplot2 facet_grid已经支持可以改变分面宽度的参数。\n\rlibrary(tidyverse)\r## Warning: 程辑包\u0026#39;tidyverse\u0026#39;是用R版本4.0.2 来建造的\r## -- Attaching packages -------------------------------------- tidyverse 1.3.0 --\r## √ ggplot2 3.3.2 √ purrr 0.3.4\r## √ tibble 3.0.3 √ dplyr 1.0.1\r## √ tidyr 1.1.1 √ stringr 1.4.0\r## √ readr 1.3.1 √ forcats 0.5.0\r## Warning: 程辑包\u0026#39;ggplot2\u0026#39;是用R版本4.0.2 来建造的\r## Warning: 程辑包\u0026#39;tibble\u0026#39;是用R版本4.0.2 来建造的\r## Warning: 程辑包\u0026#39;tidyr\u0026#39;是用R版本4.0.2 来建造的\r## Warning: 程辑包\u0026#39;dplyr\u0026#39;是用R版本4.0.2 来建造的\r## -- Conflicts ----------------------------------------- tidyverse_conflicts() --\r## x dplyr::filter() masks stats::filter()\r## x dplyr::lag() masks stats::lag()\rset.seed(2020)\riris_n \u0026lt;-slice_sample(iris,n = 50)\riris_long \u0026lt;-iris_n %\u0026gt;%\rpivot_longer(cols = -Species,names_to = \u0026quot;x\u0026quot;,values_to = \u0026quot;y\u0026quot;)\riris_long \u0026lt;-iris_long %\u0026gt;%\rfilter(Species !=\u0026quot;versicolor\u0026quot; |x !=\u0026quot;Sepal.Length\u0026quot;)\rp \u0026lt;-ggplot(iris_long,aes(x,y)) +geom_col() +\rfacet_grid(cols = vars(Species),scales = \u0026quot;free_x\u0026quot;)\rp\r可以看到这样有一个柱子宽度不等的情况,因为默认分面等宽，现在ggplot2可以通过添加参数space = \"free_x,你可以看看这篇博客举得例子（之前也弄过一样的，所以链接过去作个记录），或者\nggtree::facet_widths(p,widths = c(4,3,4))\r## Registered S3 method overwritten by \u0026#39;treeio\u0026#39;:\r## method from\r## root.phylo ape\r而这个函数源如下\nggtree::facet_widths\r## function (p, widths) ## {\r## if (!is.null(names(widths))) {\r## .panel \u0026lt;- panel_col_levels(p)\r## w \u0026lt;- rep(1, length = length(.panel))\r## names(w) \u0026lt;- .panel\r## w[names(widths)] \u0026lt;- widths\r## widths \u0026lt;- w\r## }\r## gt \u0026lt;- ggplot_gtable(ggplot_build(p))\r## j \u0026lt;- gt$layout$l[grep(\u0026quot;panel-\u0026quot;, gt$layout$name)]\r## gt$widths[j] \u0026lt;- gt$widths[j] * widths\r## return(ggplotify::as.ggplot(gt))\r## }\r## \u0026lt;bytecode: 0x0000000020fd4840\u0026gt;\r## \u0026lt;environment: namespace:ggtree\u0026gt;\r类似于stackoverflow上的解决方案，不过多了as.ggplot。\nlibrary(grid)\rgt =ggplot_gtable(ggplot_build(p))\rgt$layout\r## t l b r z clip name\r## 23 1 1 13 13 0 on background\r## 1 8 5 8 5 1 on panel-1-1\r## 2 8 7 8 7 1 on panel-1-2\r## 3 8 9 8 9 1 on panel-1-3\r## 4 6 5 6 5 3 off axis-t-1\r## 5 6 7 6 7 3 off axis-t-2\r## 6 6 9 6 9 3 off axis-t-3\r## 7 9 5 9 5 3 off axis-b-1\r## 8 9 7 9 7 3 off axis-b-2\r## 9 9 9 9 9 3 off axis-b-3\r## 10 8 4 8 4 3 off axis-l-1\r## 11 8 10 8 10 3 off axis-r-1\r## 12 7 5 7 5 2 on strip-t-1\r## 13 7 7 7 7 2 on strip-t-2\r## 14 7 9 7 9 2 on strip-t-3\r## 15 5 5 5 9 4 off xlab-t\r## 16 10 5 10 9 5 off xlab-b\r## 17 8 3 8 3 6 off ylab-l\r## 18 8 11 8 11 7 off ylab-r\r## 19 4 5 4 9 8 off subtitle\r## 20 3 5 3 9 9 off title\r## 21 11 5 11 9 10 off caption\r## 22 2 2 2 2 11 off tag\r可以看到name列panel开头的有三个，对应于p的三个分面，对应的l列分别为5，7，9\ngt$widths[c(5,7,9)] \u0026lt;-gt$widths[c(5,7,9)]*c(4,3,4)\rgrid.draw(gt)\r","date":"2020-07-28T00:00:00Z","permalink":"https://liripo.github.io/post/ggplot2-facet%E5%88%86%E9%9D%A2%E5%8F%8A%E5%AE%BD%E5%BA%A6/","tags":"R","title":"ggplot2 facet分面及宽度"},{"content":"安装 可以查看官网 之后使用jupyter notebook即可运行\n修改工作目录 没有jupyter配置文件需要生成一个初始的配置文件\njupyter notebook --generate-config\r之后会在命令行生成一个配置文件：\u0026quot;C:\\Users\\Administrator\\.jupyter\\jupyter_notebook_config.py\u0026quot;\n查找The directory to use for notebooks and kernels字样 修改#c.NotebookApp.notebook_dir = “”为所要的工作目录，记得去掉“#”号。\n快捷键 jupyter的快捷键帮助是中文的，可以直接看Help.\njupyter使用R 网址github\n使用多个python版本 在其他python路径中安装ipykernel,第一个是你的其他python版本的具体路径\npython3.7.exe -m pip install ipykernel\r然后运行\npython3.7.exe -m ipykernel install -h\r查看帮助，发现有个\u0026ndash;user 和\u0026ndash;name \u0026ndash;display-name参数可以使用 所以接着运行\npython3.7.exe -m ipykernel install --user --name python3.7 --display-name python3.7\r之后运行\njupyter kernelspec list\r应该会看到你的用户目录多了个文件夹,比如我的,因为我还装了R，所以有个ir\nAvailable kernels:\rpython3 C:\\Users\\Liripo\\AppData\\Roaming\\jupyter\\kernels\\python3\rpython3.7 C:\\Users\\Liripo\\AppData\\Roaming\\jupyter\\kernels\\python3.7\rir C:\\ProgramData\\jupyter\\kernels\\ir\rlinux下安装jupyterlab 【为什么我执着于conda与源码编译，直接下载二进制版本,单纯只是因为我没有sudo权限。】\nconda install -c conda-forge jupyterlab\r顺便的jupyter notebook也装上了。\njupyter notebook --version\r配置 jupyter lab --generate-config\r## Writing default config to: /home/liripo/.jupyter/jupyter_notebook_config.py\r如上所述，修改默认工作区。\njupyter使用R,\n1.R中下载包：\ninstall.packages(\u0026#39;IRkernel\u0026#39;)\r2.注册内核\n# in R 4.0.2\rIRkernel::installspec(name = \u0026#39;ir402\u0026#39;, displayname = \u0026#39;R4.0.2\u0026#39;)\r使用Rstuio快捷键\n在运行命令前，需要装好node.js和npm，可以在node官网下载二进制版本，解压后配置环境变量。之后bash下运行：\njupyter labextension install @techrah/text-shortcuts jupyter kernelspec list\rjupyter kernelspec list看下是否有R内核。\n使用 在使用jupyter写了一个脚本后，例如保存为Untitled.ipynb，使用命令转换为R脚本。\njupyter nbconvert --to script Untitled.ipynb\rjupyterlab绘图使用中文 wget https://github.com/welai/glow-sans/releases/download/v0.9/GlowSansSC-Normal-v0.9.zip ~/.fonts\runzip GlowSansSC-Normal-v0.9.zip\r#查看下载的字体\rfc-list\r#查看支持的中文字体\rfc-list :lang=zh\r下载好后会看到中文支持字体。\n/home/liripo/.fonts/GlowSansSC-Normal-ExtraBold.otf: Glow Sans SC,未来荧黑,Glow Sans SC Normal,未来荧黑 Normal:style=Normal ExtraBold,ExtraBold\r/home/liripo/.fonts/GlowSansSC-Normal-Heavy.otf: Glow Sans SC,未来荧黑,Glow Sans SC Normal,未来荧黑 Normal:style=Normal Heavy,Heavy\r/home/liripo/.fonts/GlowSansSC-Normal-ExtraLight.otf: Glow Sans SC,未来荧黑,Glow Sans SC Normal,未来荧黑 Normal:style=Normal ExtraLight,ExtraLight\r/home/liripo/.fonts/GlowSansSC-Normal-Regular.otf: Glow Sans SC,未来荧黑,Glow Sans SC Normal,未来荧黑 Normal:style=Normal Regular,Regular\r/home/liripo/.fonts/GlowSansSC-Normal-Thin.otf: Glow Sans SC,未来荧黑,Glow Sans SC Normal,未来荧黑 Normal:style=Normal Thin,Thin\r/home/liripo/.fonts/GlowSansSC-Normal-Bold.otf: Glow Sans SC,未来荧黑,Glow Sans SC Normal,未来荧黑 Normal:style=Normal Bold,Bold\r/home/liripo/.fonts/GlowSansSC-Normal-Light.otf: Glow Sans SC,未来荧黑,Glow Sans SC Normal,未来荧黑 Normal:style=Normal Light,Light\r/home/liripo/.fonts/GlowSansSC-Normal-Book.otf: Glow Sans SC,未来荧黑,Glow Sans SC Normal,未来荧黑 Normal:style=Normal Book,Book\r/home/liripo/.fonts/GlowSansSC-Normal-Medium.otf: Glow Sans SC,未来荧黑,Glow Sans SC Normal,未来荧黑 Normal:style=Normal Medium,Medium\r生成缓存,快速在程序中使用\nfc-cache\r重启jupyter lab即可.\n","date":"2020-07-20T00:00:00Z","permalink":"https://liripo.github.io/post/jupyter%E4%BD%BF%E7%94%A8/","tags":null,"title":"jupyter使用"},{"content":"\r\rcode.sourceCode  span { display: inline-block; line-height: 1.25; }\rcode.sourceCode  span { color: inherit; text-decoration: inherit; }\rcode.sourceCode  span:empty { height: 1.2em; }\r.sourceCode { overflow: visible; }\rcode.sourceCode { white-space: pre; position: relative; }\rdiv.sourceCode { margin: 1em 0; }\rpre.sourceCode { margin: 0; }\r@media screen {\rdiv.sourceCode { overflow: auto; }\r}\r@media print {\rcode.sourceCode { white-space: pre-wrap; }\rcode.sourceCode  span { text-indent: -5em; padding-left: 5em; }\r}\rpre.numberSource code\r{ counter-reset: source-line 0; }\rpre.numberSource code  span\r{ position: relative; left: -4em; counter-increment: source-line; }\rpre.numberSource code  span  a:first-child::before\r{ content: counter(source-line);\rposition: relative; left: -1em; text-align: right; vertical-align: baseline;\rborder: none; display: inline-block;\r-webkit-touch-callout: none; -webkit-user-select: none;\r-khtml-user-select: none; -moz-user-select: none;\r-ms-user-select: none; user-select: none;\rpadding: 0 4px; width: 4em;\r}\rpre.numberSource { margin-left: 3em; padding-left: 4px; }\rdiv.sourceCode\r{ color: #cccccc; background-color: #303030; }\r@media screen {\rcode.sourceCode  span  a:first-child::before { text-decoration: underline; }\r}\rcode span.al { color: #ffcfaf; } /* Alert */\rcode span.an { color: #7f9f7f; font-weight: bold; } /* Annotation */\rcode span.at { } /* Attribute */\rcode span.bn { color: #dca3a3; } /* BaseN */\rcode span.bu { } /* BuiltIn */\rcode span.cf { color: #f0dfaf; } /* ControlFlow */\rcode span.ch { color: #dca3a3; } /* Char */\rcode span.cn { color: #dca3a3; font-weight: bold; } /* Constant */\rcode span.co { color: #7f9f7f; } /* Comment */\rcode span.cv { color: #7f9f7f; font-weight: bold; } /* CommentVar */\rcode span.do { color: #7f9f7f; } /* Documentation */\rcode span.dt { color: #dfdfbf; } /* DataType */\rcode span.dv { color: #dcdccc; } /* DecVal */\rcode span.er { color: #c3bf9f; } /* Error */\rcode span.ex { } /* Extension */\rcode span.fl { color: #c0bed1; } /* Float */\rcode span.fu { color: #efef8f; } /* Function */\rcode span.im { } /* Import */\rcode span.in { color: #7f9f7f; font-weight: bold; } /* Information */\rcode span.kw { color: #f0dfaf; } /* Keyword */\rcode span.op { color: #f0efd0; } /* Operator */\rcode span.ot { color: #efef8f; } /* Other */\rcode span.pp { color: #ffcfaf; font-weight: bold; } /* Preprocessor */\rcode span.sc { color: #dca3a3; } /* SpecialChar */\rcode span.ss { color: #cc9393; } /* SpecialString */\rcode span.st { color: #cc9393; } /* String */\rcode span.va { } /* Variable */\rcode span.vs { color: #cc9393; } /* VerbatimString */\rcode span.wa { color: #7f9f7f; font-weight: bold; } /* Warning */\r\r\r\r\rπ值的计算\r试下动态图\r\r\r\r\rπ值的计算\r构造一个单位正方形和一个单位圆的1/4，往整个区域内随机投入点，根据点到原点的距离\u0026gt;1还是\u0026lt;=1判断点是落在1/4的圆内还是在圆外，从而根据落在两个不同区域的点的数目，求出两个区域的比值。这个比值乘以4，即是圆周率π。\n圆的面积：\\(\\frac{1}{4}\\pi\\)\n正方形面积：\\(1\\)\n概率：\\(p = \\frac{1}{\\frac{1}{4}\\pi} = \\frac{圆内点数}{圆外点个数}\\)\n所以,\\(\\pi = 4p\\)\nlibrary(tidyverse)\rpi_data \u0026lt;-function(n){\r x0 \u0026lt;-0\r y0 \u0026lt;-0\r x \u0026lt;-runif(n)\r y \u0026lt;-runif(n)\r distances \u0026lt;-sqrt((x-x0)^2+(y-y0)^2)\r point \u0026lt;-ifelse(distances \u0026lt;=1, \u0026quot;inside\u0026quot;, \u0026quot;outside\u0026quot;)\r id \u0026lt;-1:n\r pi_predict \u0026lt;-cumsum(point ==\u0026quot;inside\u0026quot;)/id *4\r data \u0026lt;-data.frame(id, x, y, distances, point, pi_predict)\r}\rdata1000 \u0026lt;-pi_data(n = 1000)\rp1 \u0026lt;-ggplot(data1000) +\rgeom_rect(aes(xmin = 0,xmax = 1,ymin = 0, ymax = 1),color = \u0026quot;black\u0026quot;,alpha = 0) +\rggforce::geom_arc(aes(x0 = 0, y0 = 0,r = 1,\r start = 0,end = pi/2)) +coord_fixed() +\rgeom_point(data = data1000,aes(x,y,color = point))\rp1\rp2 \u0026lt;-ggplot(data1000) +\rgeom_line(aes(x = id,y = pi_predict))+\rgeom_hline(yintercept = pi)\rp2\r\r试下动态图\rlibrary(gganimate)\r## Warning: 程辑包\u0026#39;gganimate\u0026#39;是用R版本4.0.2 来建造的\ranim \u0026lt;-ggplot(data1000) +\rgeom_rect(aes(xmin = 0,xmax = 1,ymin = 0, ymax = 1),color = \u0026quot;black\u0026quot;,alpha = 0) +\rggforce::geom_arc0(aes(x0 = 0, y0 = 0,r = 1,\r start = 0,end = pi/2)) +coord_fixed() +\rgeom_point(data = data1000,aes(x,y,color = point,group = id)) +\rtransition_reveal(along = id) +\rlabs(title = \u0026quot;frame:{frame} of {nframes}\u0026quot;)\ranim2 \u0026lt;-animate(anim, nframes = 100, fps = 10,\r width = 550, height = 540, res = 90,\r renderer = gifski_renderer(loop = T))\ranim2\rmake_run2 \u0026lt;-function(pi_data){\r anim \u0026lt;-ggplot(pi_data,aes(id ,pi_predict)) +\rgeom_line() +\rgeom_point(aes(group = seq_along(id)),color = \u0026quot;red\u0026quot;,size = 1)+\rtransition_reveal(id)+\rgeom_hline(yintercept = pi)\r anim2 \u0026lt;-animate(anim, nframes = 100, fps = 10,\r width = 550, height = 540, res = 90,\r renderer = gifski_renderer(loop = T))\r}\rlast \u0026lt;-make_run2(data1000)\rlast\r\r","date":"2020-07-20T00:00:00Z","permalink":"https://liripo.github.io/post/%E8%92%99%E7%89%B9%E5%8D%A1%E6%B4%9B%E8%AE%A1%E7%AE%97%CF%80/","tags":"R","title":"蒙特卡洛计算Π"},{"content":"参考网址：https://zhwhong.cn/2017/04/14/ROC-AUC-Precision-Recall-analysis/\n","date":"2020-04-28T00:00:00Z","permalink":"https://liripo.github.io/post/roc%E4%B8%8Eauc%E7%90%86%E8%A7%A3/","tags":"analysis","title":"ROC与AUC理解"},{"content":"","date":null,"permalink":"https://liripo.github.io/tags/docker/","tags":null,"title":"docker"},{"content":"docker从入门到实践\n安装docker linux ubuntu\n1.安装依赖\nsudo apt-get install \\\r apt-transport-https \\\r ca-certificates \\\r curl \\\r software-properties-common\r2.为了确认所下载软件包的合法性，需要添加软件源的 GPG 密钥。\n$ curl -fsSL https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu/gpg | sudo apt-key add -\r# 官方源\r# $ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\r3.然后，我们需要向 source.list 中添加 Docker 软件源\n$ sudo add-apt-repository \\\r\u0026quot;deb [arch=amd64] https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu \\\r$(lsb_release -cs) \\\rstable\u0026quot;\r# 官方源\r# $ sudo add-apt-repository \\\r# \u0026quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \\\r# $(lsb_release -cs) \\\r# stable\u0026quot;\r4.安装\nsudo apt-get install docker-ce\r另一种方式，使用脚本安装 curl -fsSL get.docker.com -o get-docker.sh\rsudo sh get-docker.sh --mirror Aliyun\r使用 sudo service docker start #运行\rsudo docker --help\r建立docker用户组，将当前用户加入 sudo groupadd docker\rsudo usermod -aG docker $USER\r退出重连即可无需sudo。\n如果网络不行，添加镜像源 sudo mkdir /etc/docker\rsudo vim /etc/docker/daemon.json\r#添加如下信息\r{\r\u0026#34;registry-mirrors\u0026#34;: [\r\u0026#34;https://dockerhub.azk8s.cn\u0026#34;,\r\u0026#34;https://hub-mirror.c.163.com\u0026#34;\r]\r}\r重启即可sudo service docker restart\n","date":"2020-03-28T00:00:00Z","permalink":"https://liripo.github.io/post/docker%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/","tags":"docker","title":"docker安装使用"},{"content":"apt卸载软件 内容如下：\n 卸载软件：sudo apt-get remove 软件名(+版本号) 卸载软件并删除依赖：sudo apt-get remove \u0026ndash;auto-remove 软件名(+版本号) 清除软件：sudo apt-get purge 软件名(+版本号) 清除软件及依赖：sudo apt-get purge \u0026ndash;auto-remove 软件名(+版本号)  conda 现在清华镜像源一直没更新最新版本的R让我很无奈，所以我清除了conda的清华镜像源，选择conda-forge,具体可以看它官网首页就有介绍怎么使用了。当然，使用它可能还取决于你的网络哦。\nconda search r-base\rconda install r-base == 4.0.2\r即可。\nR包更新 更新版本后，R包必须全部更新\ninstall.package(\u0026#34;rvcheck\u0026#34;)\rrvcheck::uodate_all()\r","date":"2020-03-28T00:00:00Z","permalink":"https://liripo.github.io/post/linux%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E5%8F%8Arr%E5%8C%85%E5%AE%89%E8%A3%85/","tags":"linux","title":"linux软件安装及R、R包安装"},{"content":"RCpp与R包 首先在生成R骨架的时候，比一般没调用C++多执行一下Rscript -e 'usethis::use_rcpp()'。然后在.gitignore文件中添加src/*.o,src/*.so,src/*.dll防止编译文件导入到git中。并且在DESCRIPTION文件中必须添加LinkingTo: Rcpp, Imports: Rcpp才能识别Rcpp库。\n接着就是添加两个roxygen到代码中即可。参考如下：\n#' @useDynLib Rcpp文件名\r#' @importFrom Rcpp sourceCpp\rNULL\r计算矩阵欧式距离 Rcpp::cppFunction(\u0026#34;NumericMatrix dist_crpp (NumericMatrix x){\rint row = x.nrow();\rdouble d;\rNumericMatrix out (row,row);\rfor (int i = 0;i \u0026lt; row;i++){\rfor (int j = i+1;j \u0026lt; row;j++){\rNumericVector v1 = x.row(i);\rNumericVector v2 = x.row(j);\rNumericVector v3 = v2 - v1;\rd = sqrt(sum(pow(v3,2)));\rout(j,i) = d;\r//out(i,j) = d;\r}\r}\rreturn (out);\r} \u0026#34;)\r","date":"2020-03-28T00:00:00Z","permalink":"https://liripo.github.io/post/rcpp/","tags":"R","title":"Rcpp"},{"content":"R包开发书籍\nWriting R Extensions\nhttps://qianjiye.de/2015/04/r-packages\nR package 使用devtools+Rtools进行R包开发，而Linux可以使用dockor+Rstudio开发版本。\ncreate_package() library(devtools)\rcreate_package(\u0026#34;./liripo.R\u0026#34;)\ruse_r() 使用use_r(\u0026quot;scales\u0026quot;)在R文件夹下生成一个scales.R文件。\n下面举个我写的例子，参考函数scales::show_col\n#\u0026#39; @title show your colors by ggplot2\r #\u0026#39;\r #\u0026#39; @param colors colors\r #\u0026#39; @param ncol ncol\r #\u0026#39; @importFrom ggplot2 ggplot geom_tile aes aes_\r #\u0026#39; @importFrom ggplot2 geom_text scale_fill_manual theme_void\r #\u0026#39; @export\r show_color \u0026lt;- function(colors,ncol = NULL){\rn \u0026lt;- length(colors)\rncol \u0026lt;- ncol %||% ceiling(sqrt(length(colors)))\rnrow \u0026lt;- ceiling(n/ncol)\rtbl \u0026lt;- data.frame(cols = rep(1:ncol,times = nrow),\rrows = rep(nrow:1,each = ncol),\rcolors = c(colors,rep(NA,ncol*nrow-length(colors)))\r)\rtbl \u0026lt;- na.omit(tbl)\rp \u0026lt;- ggplot(tbl,aes_(~cols,y =~rows))+\rgeom_tile(aes_(fill = ~colors),color = \u0026#34;black\u0026#34;,show.legend = F) +\rgeom_text(aes_(label = ~colors)) +\rscale_fill_manual(values = tbl$colors,breaks = tbl$colors) +\rtheme_void()\rclass \u0026lt;- attributes(p)$class\rattr(p,\u0026#34;class\u0026#34;) \u0026lt;- c(class,\u0026#34;show_color\u0026#34;)\rp\r}\r#\u0026#39; @rdname print\r #\u0026#39; @export\r #\u0026#39; @method print show_color\r print.show_color \u0026lt;- function(x,...){\rprint(x,...)\r}\r里面ggplot2写R包时应使用aes_替代aes函数，具体可以?aes\\_,当你想在R包中使用dplyr时，你可以运行R代码vignette(\u0026quot;programming\u0026quot;)看看dplyr的编程文档。\n举个例子：\n#\u0026#39; @title ---\r #\u0026#39; @importFrom dplyr filter  #\u0026#39; @importFrom rlang .data\r print_99 \u0026lt;- function(){\rtable \u0026lt;- expand.grid(a = 1:9,b = 1:9) %\u0026gt;%\rfilter(.data$a \u0026lt;= .data$b)\r}\rdocument devtools::document()会自动根据上面的rocelt调用Roxygen2生成man/*.Rd文件和Description文件。\n具体可见vignette(\u0026quot;rd\u0026quot;)\nuse_package 这个函数会在DESCRIPTION下引入R包依赖的其他R包,如：\nImports: ggplot2,\rstats\rload_all() load_all()默认载入当前路径的包，类似library()，然后你可以试试写的代码。\n\u0026gt;exists(\u0026#34;show_color\u0026#34;, where = \u0026#34;.GlobalEnv\u0026#34;, inherits = FALSE)\r[1] FLASE\r#可以看到当前全局环境没有这个函数，确实是以包的函数载入\r \u0026gt;search()#看到载入的包\r check() 使用check()检查R包，可以看到是否有报错。\nuse_mit_licence use_mit_licence(\u0026quot;Liripo\u0026quot;)可以生成MIT许可证，具体生成什么许可证可以?use_mit_license()\n快捷插入skeleon代码 Rstudio可以点击code\u0026ndash;\u0026gt;Inseart roxygen skeleton快速插入，当然函数不规范的话，无法使用这个操作。\n\u0026gt; document()\rUpdating liripo.R documentation\rLoading liripo.R\rWriting NAMESPACE\rWriting NAMESPACE\rWriting scale.Rd\rR包中文 目前来说，不要使用中文。必须使用的可以看看函数?stringi::stri_escape_unicode()使用生成的unicode替代。ps:不过我使用后还是提示我使用ASCII字符编码。\ninstall() install()将包载入到.libpath()路径。看下是否安装上了：\n\u0026gt; stringr::str_detect(.packages(all.available = TRUE),\u0026#34;liripo.R\u0026#34;,)\r[1] TRUE\rcheck_built()和build() check_built()检查tar.gz包。\nbuild()生成tar.gz包，便于分享。\nR包加入数据集 use_data()函数可以对R对象生成/data/*.rda文件，之后使用use_r(\u0026quot;R包名-package\u0026quot;)，在这个新生成的文件加入skeleon，例子：\n#\u0026#39; @name Rliripo\r #\u0026#39; @docType package\r #\u0026#39; @importFrom grDevices colorRampPalette\r #\u0026#39; @importFrom stats na.omit\r NULL\r#\u0026#39;It\u0026#39;s the color data of rmb\r #\u0026#39;\r #\u0026#39;used to this package\r #\u0026#39;@docType data\r #\u0026#39;@name rmb\r NULL\r#\u0026#39;It\u0026#39;s the Codon table\r #\u0026#39;\r #\u0026#39;used to this package\r #\u0026#39;@docType data\r #\u0026#39;@name dna_pro_table\r NULL\r#\u0026#39;It\u0026#39;s the seqence data of 2003 SARS\r #\u0026#39;\r #\u0026#39;used to this package\r #\u0026#39;@docType data\r #\u0026#39;@name SARS\r NULL\rglobalVariables(c(\u0026#34;rmb\u0026#34;,\u0026#34;dna_pro_table\u0026#34;))\rglobalVariables使得能在编写的R包中直接使用这些数据集。\n","date":"2020-03-28T00:00:00Z","permalink":"https://liripo.github.io/post/r%E5%8C%85%E5%BC%80%E5%8F%91/","tags":"R","title":"R包开发"},{"content":"静态网页 简单的静态网页使用rvest包完全可以胜任。\n动态网页 需要移动鼠标点击鼠标的则可以使用RSelenium 其作用是用R调用Selenium Server，通过Selenium Server我们可以对网页进行操作，然后爬取操作后的数据，从而进行爬取动态页面。\n初次使用  java安装 谷歌驱动安装,由于需要对应谷歌浏览器的版本，所以可以都使用最新的版本。下载,注意chrome驱动一定要和chrome浏览器对应 ,比如我的浏览器83.4109\u0026hellip;. ，查看浏览器版本，点击谷歌浏览器右上【…】—【帮助】–【关于Google Chrome】就可以看到浏览器版本了。然后我就下载83开头的就行。 记得将下载的谷歌驱动与chrome.exe放在一个文件夹下，然后将这个文件夹路径添加至环境变量。如何添加环境变量可自行goole。 Selenium Standalone Server下载,我下载的是selenium-server-standalone-3.141.59.jar selenium server使用可以在文件所在目录运行  java -jar .\\selenium-server-standalone-3.141.59.jar\r或者直接在Rstudio中运行\nsystem(\u0026#39;java -jar \u0026#34;C:/RSelenium/selenium-server-standalone-3.11.0.jar\u0026#34;\u0026#39;,wait = FALSE)\r运行结束后勿关闭，最小化即可。\nRSelenium使用与实例 爬取富集分析网站示例代码\n其中txt前几行如下\nCESC 1 Cluster0 https://biit.cs.ut.ee/gplink/l/1WPg5kkuQq\rCESC 2 Cluster1 https://biit.cs.ut.ee/gplink/l/cN9yKkqzSj\rCESC 3 Cluster2 https://biit.cs.ut.ee/gplink/l/WEBiuG-4S_\r 代码,里面添加了一些无限循环操作。\n library(rvest)\rlibrary(RSelenium)\rlibrary(fs)\rlibrary(tidyverse)\r#连接浏览器\r #运行server\r isempty \u0026lt;- function(){\rhtml \u0026lt;- remDr$getPageSource()[[1]]\rhtml \u0026lt;- read_html(html)\rxpath \u0026lt;- \u0026#34;/html/body/div/div/div/div[3]/div[3]/div/div/div\u0026#34;\rhtmltext \u0026lt;- html %\u0026gt;% html_nodes(xpath = \u0026#34;/html/body/div/div/div/div[3]/div[3]/div/div/div\u0026#34;) %\u0026gt;% html_text(trim = T)\r#页面没刷新情况\r if(rlang::is_empty(htmltext))return(TRUE) #没有结果情况\r if(htmltext == \u0026#34;No results.\u0026#34;){\rreturn(\u0026#34;No results.\u0026#34;)\r}else{\rboolen \u0026lt;- html %\u0026gt;% html_nodes(\u0026#34;.active+ .tab-button a\u0026#34;) %\u0026gt;% rlang::is_empty()\r}\r}\risempty2 \u0026lt;- function(){\rhtml \u0026lt;- remDr$getPageSource()[[1]]\rhtml \u0026lt;- read_html(html)\rboolen \u0026lt;- html %\u0026gt;% html_nodes(xpath = \u0026#34;/html/body/div/div/div/div[3]/div[3]/div/div/div[1]/div[2]/div[2]/div[1]/div/button[1]\u0026#34;) %\u0026gt;% rlang::is_empty()\r}\r#R中运行selenium server\r system(\u0026#39;java -jar \u0026#34;../selenium-server-standalone-3.141.59.jar\u0026#34;\u0026#39;,\rwait = FALSE)\r#------打开浏览器，模拟点击\r remDr \u0026lt;- remoteDriver(\rbrowserName = \u0026#34;chrome\u0026#34;,\rremoteServerAddr = \u0026#34;localhost\u0026#34;,\rport = 4444L)\rremDr$open()\rtxt \u0026lt;- read_csv(\u0026#34;clusterurl.csv\u0026#34;,col_names = F)\rtxt \u0026lt;- txt %\u0026gt;% separate(X2,sep = \u0026#34;\u0026#34;,into = c(\u0026#34;row\u0026#34;,\u0026#34;cluster\u0026#34;,\u0026#34;url2\u0026#34;))\rgetgprofiler \u0026lt;- function(url){\rtmp \u0026lt;- txt %\u0026gt;% filter(url2 == url)\rremDr$navigate(url)\r#沉睡40秒\r Sys.sleep(30)\r#判断是否加载完全，不完全则一直沉睡,没有限定次数错误退出的情况。\r boolen1 \u0026lt;- isempty()\r#还有一种没有显著结果的\r if(boolen1 == \u0026#34;No results.\u0026#34;)return(\u0026#34;No results.\u0026#34;)\rwhile(boolen1){\rremDr$navigate(url)\rSys.sleep(20)\rboolen1 \u0026lt;- isempty()\r}\rx \u0026lt;- remDr$findElement(using = \u0026#34;css selector\u0026#34;,value = \u0026#34;.active+ .tab-button a\u0026#34;)\rremDr$mouseMoveToLocation(webElement=x)\rremDr$click()\rSys.sleep(5)\rboolen2 \u0026lt;- isempty2()\rwhile(boolen2){\rremDr$mouseMoveToLocation(webElement=x)\rremDr$click()\rboolen2 \u0026lt;- isempty2()\r}\rxpath \u0026lt;- \u0026#34;/html/body/div/div/div/div[3]/div[3]/div/div/div[1]/div[2]/div[2]/div[1]/div/button[1]\u0026#34;\rl \u0026lt;- remDr$findElement(using = \u0026#39;xpath\u0026#39;,value = xpath)\rremDr$mouseMoveToLocation(webElement=l)\r#下载\r remDr$click()\r#下载这儿强制5秒\r Sys.sleep(5)\r#下载文件路径\r file \u0026lt;- fs::dir_ls(\u0026#34;C:\\\\Users\\\\Liripo\\\\Downloads\u0026#34;,\rtype = \u0026#34;file\u0026#34;,regexp = \u0026#34;gProfiler_hsapiens.+csv$\u0026#34;)\r#文件重命名\r while(rlang::is_empty(file)){\r#如果为空则重新点击下载\r remDr$mouseMoveToLocation(webElement=l)\rremDr$click()\rfile \u0026lt;- fs::dir_ls(\u0026#34;C:\\\\Users\\\\Liripo\\\\Downloads\u0026#34;,\rtype = \u0026#34;file\u0026#34;,regexp = \u0026#34;gProfiler_hsapiens.+csv$\u0026#34;)\r}\r#重命名文件并移动\r filename \u0026lt;- paste(tmp[[1]],tmp[[3]],\u0026#34;gprofiler\u0026#34;,sep = \u0026#34;-\u0026#34;)\rfile_move(path = file,\rnew_path = paste0(\u0026#34;G:\\\\liripo\\\\Rwork\\\\20200622-clusterresult\\\\\u0026#34;,\rfilename,\u0026#34;.csv\u0026#34;))\r}\rlapply(txt$url2[1:5],getgprofiler)\r","date":"2020-03-28T00:00:00Z","permalink":"https://liripo.github.io/post/r%E7%88%AC%E8%99%AB/","tags":"R","title":"R爬虫"},{"content":"TCGA样本id解析 如：TCGA-75-5122-01A-01R-1755-07,ID\n  TCGA：Project, 所有TCGA样本名均以这个开头，标志。\n  75：表示肺腺癌，具体对应编码在https://gdc.cancer.gov/resources-tcga-users/tcga-code-tables/tissue-source-site-codes\n  5112:Participant, 参与者编号\n  ==01：Sample, 这两个数字可以说是最关键、最被大家注意的，其中编号01~09表示肿瘤，其他代码表示正常对照，具体如https://gdc.cancer.gov/resources-tcga-users/tcga-code-tables/sample-type-codes,在TCGA样本名中，这个位置最常见的就是01和11，当然偶尔也会有其他的数字==\n  A：Vial, 在一系列患者组织中的顺序，绝大多数样本该位置编码都是A; 很少数的是B，表示福尔马林固定石蜡包埋组织，已被证明用于测序分析的效果不佳，所以不建议使用-01B的样本数据。\n区分不同样本。\n  01,portion，同属于一个患者组织的不同部分的顺序编号，Order of portion in a sequence of 100 - 120 mg sample portions，01为The first portion of the sample，一般值为01-99.\n  R：分析分子类型，R为RNA，具体如：https://gdc.cancer.gov/resources-tcga-users/tcga-code-tables/portion-analyte-codes\n  1755:Plate, 在一系列96孔板中的顺序，值大表示制板越晚\n  07：Center, 测序或鉴定中心编码，更多编码详见:https://gdc.cancer.gov/resources-tcga-users/tcga-code-tables/center-codes\n  数据下载 ","date":"2020-03-28T00:00:00Z","permalink":"https://liripo.github.io/post/tcga/","tags":"bio","title":"TCGA"},{"content":"超几何分布是统计学中的一种离散分布，它描述了由有限个物件中抽出n个物件，成功抽出指定种类的物件的个数。 也是生物信息学中常用的一种统计分布模型。我们在GO，KEGG的富集分析时就采用的是这个模型。 其数学表达式如下： $$ p(k)=P(X=k)=\\frac{\\binom{M}{k}*\\binom{N-M}{n-k}}{\\binom{N}{n}} $$\nR中使用choose函数计算\n(choose(M,k))*(choose(N-M,n-k))/(choose(N,n))\r其中：\nN： 总样本数\nm： 总样本中“特定类别”的数量\nn: 从总样本中随机抽取的数量\nk: 抽取样本中属于“特定类别”的数量\n但是我们做统计模型时，统计不是分布概率，而是累积概率，所以计算的p_value 值计算公式为： $$ p = 1-\\sum_{i = 0}^{k-1}\\frac{\\binom{M}{i}*\\binom{N-M}{n-i}}{\\binom{N}{n}} $$ R函数phyper：\n1-phyper(k-1,m, N-m, n,)\rphyper(k-1,M, N-M, n, lower.tail=F)\rGo富集分析计算  从gprofiler官网看到背景基因集有18126个ENSG\n N \u0026lt;- 18126\rgoid \u0026lt;- \u0026#34;GO:0016491\u0026#34;\r goid在人中包含的ENSMBL基因\n go \u0026lt;- gprofiler2::gconvert(query = goid,organism = \u0026#34;hsapiens\u0026#34;,target = \u0026#34;ENSG\u0026#34;)\rM \u0026lt;- nrow(go)\r 假设查询56个基因，17个在这个go里面，那么超几何分布累积概率p(x\u0026gt;=17)的概率应为：\n n \u0026lt;- 56\rk \u0026lt;- 17\rp \u0026lt;- 1 - phyper(k - 1,M, N-M, n, lower.tail=T)\r## [1] 7.967889e-11\r 使用二项式分布累积概率计算,二项式分布，是有放回的抽样，你可以多次抽到同一基因，这是不符合的。所以这个计算只能说是做为近似的估计值。\n1-sum(sapply(0:k-1, function(i) choose(n,i) * (M/N)^i * (1-M/N)^(n-i)))\r## [1] 9.148204e-11\r 使用$2\\times2$列联表进行独立性检验\nd \u0026lt;- data.frame(gene.not.interest=c(M-k, N-M-n+k), gene.in.interest=c(k, n-k))\rrow.names(d) \u0026lt;- c(\u0026#34;In_category\u0026#34;, \u0026#34;not_in_category\u0026#34;)\r\u0026gt; d\rgene.not.interest gene.in.interest\rIn_category 751 17\rnot_in_category 17319 39\r经典的有卡方检验和fisher's exact test\n 卡方检验\n \u0026gt; chisq.test(d,)\rPearson\u0026#39;s Chi-squared test with Yates\u0026#39; continuity correction\rdata: d\rX-squared = 88.108, df = 1, p-value \u0026lt; 2.2e-16\rWarning message:\rIn chisq.test(d, ) : Chi-squared近似算法有可能不准\r对于２x２表来说，卡方检验通常也只能做为近似估计值，特别是当sample size或expected all count比较小的时候，计算并不准确。\n fisher's exact test,它使用的是超几何分布来计算p值,所以fisher's exact test和超几何模式计算的p-值是一样的。\n \u0026gt;fisher.test(d)\rFisher\u0026#39;sExactTestforCountData data: d\rp-value = 7.968e-11\ralternative hypothesis: true odds ratio is not equal to 1\r95 percent confidence interval:\r0.05470043 0.18852771\rsample estimates:\rodds ratio 0.09951436 超几何分布是偏态的，所以fisher.test默认的双侧检验。而使用双侧和单侧的p值是一样的，不过会影响对置信区间的估计。\n","date":"2020-03-28T00:00:00Z","permalink":"https://liripo.github.io/post/%E5%AF%8C%E9%9B%86%E5%88%86%E6%9E%90%E8%B6%85%E5%87%A0%E4%BD%95%E5%88%86%E5%B8%83/","tags":"R","title":"富集分析超几何分布"},{"content":" 生存分析是研究生存时间的分布规律，以及生存时间和相关因素之间关系的一种统计分析方法\n 经常用于：\n Cancer studies for patients survival time analyses（临床癌症上病人生存分析）  生存分析使用的方法：\n Kaplan-Meier plots to visualize survival curves（根据生存时间分布，估计生存率以及中位生存时间，以生存曲线方式展示，从而分析生存特征，一般用Kaplan-Meier法，还有寿命法） Log-rank test to compare the survival curves of two or more groups（通过比较两组或者多组之间的的生存曲线，一般是生存率及其标准误，从而研究之间的差异，一般用log rank检验） Cox proportional hazards regression to describe the effect of variables on survival（用Cox风险比例模型来分析变量对生存的影响，可以两个及两个以上的因素，很常用）  一般做生存分析，可以用KM（Kaplan-Meier）方法估计生存率，做生存曲线，然后可以根据分组检验一下多组间生存曲线是否有显著的差异，最后用Cox风险比例模型来研究下某个因素对生存的影响。\n生存曲线（survival curve）则是将每个时间点的生存率连接在一起的曲线，一般随访时间为X轴，生存率为Y轴；曲线平滑则说明高生存率，反之则低生存率；中位生存率（median survival time）越长，则说明预后较好\nKaplan-Meier方法计算：\n S(ti)=S(ti−1)(1−di/ni) S(ti−1)指在ti−1年还存活的概率 ni指在在ti年之前还存活的人数 di指在事件发生的人数 t0=0，S(0)=1 Kaplan-Meier曲线为我们描画了患者生存率随时间变化的特征。他完美的将时间因素考虑在内，各个时间点的生存率值也被称为时点生存率。\n ","date":"2020-03-28T00:00:00Z","permalink":"https://liripo.github.io/post/%E7%94%9F%E5%AD%98%E5%88%86%E6%9E%90/","tags":"analysis","title":"生存分析"},{"content":"shiny开发应用程序 shiny目前可以开发成移动端，web应用程序和打包成exe文件（很麻烦）。\nshiny比较重要的点及函数 shiny程序会自动加载R文件夹下的R脚本，css,js,png等可以放在www文件夹下，链接时必须省略www/,data数据放置data文件夹下\nreq()、validata()是没有合理输入暂停的利器，reactive反应性有必要学习，这两个的组合就是一个eventReactive()函数了吧。 isolate()函数，parse()函数，envl()\n","date":"2020-03-27T00:00:00Z","permalink":"https://liripo.github.io/post/shiny%E5%AD%A6%E4%B9%A0/","tags":"R","title":"shiny学习"},{"content":"windows10安装ubuntu，以及源码安装python到指定目录，及更多相关配置。\n温馨提示：目前已有wsl2,推荐安装wsl2。\n安装ubuntu 1.windows10选择【开始】-\u0026gt;【设置】-\u0026gt; 【安全和更新】-\u0026gt;【开发者选项】，选择【开发人员模式】 2.打开控制面板\u0026mdash;\u0026mdash;\u0026gt;程序与功能\u0026mdash;-\u0026gt;启用或关闭windows功能\u0026mdash;\u0026mdash;\u0026gt;勾选 [适用于linux的windows子系统] 选项 3.打开Microsoft Store,搜索wsl 下载ubuntu或者Centos\n打开ubuntu软件\n添加root的passwd,初次使用。\nsudo passwd\r[sudo] password for jd:输入当前用户的密码\rEnter new UNIX password:设置root用户的密码\rRetype new UNIX password:再次输入设置root用户的密码\rpasswd: password updated successfully\r 修改ubuntu的apt源：  sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak\rsudo vim /etc/apt/sources.list\r添加清华源\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse\rdeb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse\rdeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse\rdeb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse\rdeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse\rdeb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse\rdeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse\rdeb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse\rdeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse\rdeb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse\r更新\nsudo apt-get update\rsudo apt-get upgrade\rsudo apt-get autoremove\r添加ssh服务，xshell连接ubuntu  卸载 ssh server  sudo apt-get remove openssh-server\r安装 ssh server  sudo apt-get install openssh-server\r修改 ssh server 配置  sudo vim /etc/ssh/sshd_config\rPort 2222 #默认的是22，但是windows有自己的ssh服务，也是监听的22端口，所以这里要改一下\rUsePrivilegeSeparation no\rPasswordAuthentication yes\r启动ssh server\nsudo service ssh start\r#设置开机启动\r#由于wsl比较特殊，systemctl不是rc.0级运行，无法使用\r#sudo systemctl enable ssh\r#sudo vim /etc/rc.local\r#service ssh start\r#以上均不能解决开机自启问题，因为linux子系统还不算真正的linux\rxshell连接linux子系统 设置xming和ubuntu开机自动启动 开始菜单搜索运行\u0026ndash;\u0026gt;键入shell：startup，将需要开机自动启动软件快捷方式复制到当前文件夹。\n源码安装python到指定目录 #安装ssl\rsudo apt-get install openssl\rsudo apt-get install libssl-dev\rwget https://www.python.org/ftp/python/3.8.0/Python-3.8.0.tgz\rtar -zxvf Python-3.8.0.tgz\r#vim Modules/Setup\r#修改结果如下：\r# Socket module helper for socket(2)\r_socket socketmodule.c timemodule.c\r# Socket module helper for SSL support; you must comment out the other\r# socket line above, and possibly edit the SSL variable:\r#SSL=/usr/local/ssl\r_ssl _ssl.c \\\r -DUSE_SSL -I$(SSL)/include -I$(SSL)/include/openssl \\\r -L$(SSL)/lib -lssl -lcrypto\r安装make和zlib* sudo apt-get install make \u0026amp;\u0026amp; sudo apt-get install zlib*\r编译安装 ./configure --enable-optimizations --prefix=/mnt/d/linux/softwore/python\rmake\rsudo -H make install #记得加-H\r配置~/.bashrc和~/.vimrc ~/.bashrc\nexport PS1=\u0026#34;\\[\\e[37;1m\\][\\[\\e[33;1m\\]\\u\\[\\e[37;1m\\]@\\h:\\[\\e[34;1m\\]\\w\\[\\e[37;1m\\]]\\$\\[\\e[0m\\]\u0026#34;\ralias lt=\u0026#39;ll -th\u0026#39;\ralias le=\u0026#39;less -SN\u0026#39;\r# Source global definitions\rif [ -f /etc/bashrc ]; then\r. /etc/bashrc\rfi\r#####添加软件路径\rexport PATH=/mnt/d/linux/softwore/python/bin:$PATH\r~/.vimrc\nset number\rset vb t_vb= \u0026#34;关警告声\rset nohlsearch\rhi Comment ctermfg =blue\rhi String ctermfg =darkyellow\rset showmatch \u0026#34;自动匹配相应括号\rhi Number ctermfg = green\rhi MatchParen ctermbg=darkyellow guibg= white\rhighlight Function cterm=bold\rhi Type ctermfg =blue\rset tabstop =4\rhi Special ctermfg = red\rhi Identifier cterm = bold \u0026#34;变量标识符名称。\rhi Statement cterm = bold\r\u0026#34;\u0026#34;编程语言的声明，一般是像“if”或“while”这样的关键字。\rhi PreProc ctermfg = grey cterm=bold \u0026#34;预处理颜色,一般像R的library\rset paste\rset wildmenu\r\u0026#34;\u0026#34;\u0026#34;\u0026#34;\u0026#34;\u0026#34;\u0026#34;\u0026#34;插件管理\rcall plug#begin(\u0026#39;~/.vim/plugged\u0026#39;)\rcall plug#end()\rfiletype plugin indent on\r\u0026#34;\u0026#34;\u0026#34;\u0026#34;\u0026#34;\u0026#34;\u0026#34;\u0026#34;\u0026#34;\u0026#34;\u0026#34;\u0026#34;\u0026#34;\u0026#34;\u0026#34;\u0026#34;\u0026#34;\u0026#34;\u0026#34;\u0026#34;\u0026#34;\u0026#34;\u0026#34;\u0026#34;\u0026#34;\u0026#34;\r\u0026#34;pep8\rau BufNewFile,BufRead *.py\r\\ set tabstop=4 |\r\\ set softtabstop=4 |\r\\ set shiftwidth=4 |\r\\ set textwidth=79 |\r\\ set expandtab |\r\\ set autoindent |\r\\ set fileformat=unix\rset encoding=utf-8\r\u0026#34;一键运行代码\rmap \u0026lt;F5\u0026gt; :call CompileRunGcc()\u0026lt;CR\u0026gt;\rfunc! CompileRunGcc()\rexec \u0026#34;w\u0026#34;\rif \u0026amp;filetype == \u0026#39;c\u0026#39;\rexec \u0026#34;!g++ % -o %\u0026lt;\u0026#34;\rexec \u0026#34;!time ./%\u0026lt;\u0026#34;\relseif \u0026amp;filetype == \u0026#39;cpp\u0026#39;\rexec \u0026#34;!g++ % -o %\u0026lt;\u0026#34;\rexec \u0026#34;!time ./%\u0026lt;\u0026#34;\relseif \u0026amp;filetype == \u0026#39;java\u0026#39;\rexec \u0026#34;!javac %\u0026#34;\rexec \u0026#34;!time java %\u0026lt;\u0026#34;\relseif \u0026amp;filetype == \u0026#39;sh\u0026#39;\r:!time bash %\relseif \u0026amp;filetype == \u0026#39;python\u0026#39;\rexec \u0026#34;!time python %\u0026#34;\relseif \u0026amp;filetype == \u0026#39;html\u0026#39;\rexec \u0026#34;!firefox % \u0026amp;\u0026#34;\relseif \u0026amp;filetype == \u0026#39;go\u0026#39;\r\u0026#34; exec \u0026#34;!go build %\u0026lt;\u0026#34;\rexec \u0026#34;!time go run %\u0026#34;\relseif \u0026amp;filetype == \u0026#39;mkd\u0026#39;\rexec \u0026#34;!~/.vim/markdown.pl % \u0026gt; %.html \u0026amp;\u0026#34;\rexec \u0026#34;!firefox %.html \u0026amp;\u0026#34;\relseif \u0026amp;filetype == \u0026#39;R\u0026#39;\rexec \u0026#34;!time Rscript %\u0026#34;\rendif\rendfunc\r\u0026#34;高亮显示当前行\r#set cursorline\r#hi CursorLine cterm=underline\rWSL开机自启动ssh 1.win+R搜索运行，输入shell:startup，进入开始菜单启动程序目录(C:\\Users\\用户名\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup)\n2.编辑脚本文件保存到上述目录，文件名startWSL.vbs\nstartWSL.vbs\nSet ws = WScript.CreateObject(\u0026#34;WScript.Shell\u0026#34;)\rcmd = \u0026#34;C:\\Windows\\System32\\bash.exe -c \u0026#34;\u0026#34;bash /init.sh\u0026#34;\u0026#34;\u0026#34;\r\u0026#39;运行命令不显示cmd窗口\rws.Run cmd, 0, false\rSet ws = Nothing\rWScript.quit\r3.编辑init.sh文件到linux系统根目录，/init.sh如下\n#!/bin/bash\rpn=$(ps aux|grep -v grep|grep sshd|wc -l)\r[ -d /var/run/sshd ] || mkdir /var/run/sshd\rchmod 744 /var/run/sshd\rif [ \u0026#34;${pn}\u0026#34; != \u0026#34;0\u0026#34; ]; then\rpid=$(ps aux|grep -v grep|grep /usr/sbin/sshd|awk \u0026#39;{print $2}\u0026#39;)\rkill $pid\rfi\r/usr/sbin/sshd -D\r4.ubuntu需要默认root运行\n#在cmd 下：\rwslconfig /list # 查看wsl版本 #ubuntu 16.04\rubuntu1604 config --default-user root\r#Ubuntu 18.04\rubuntu1804 config --default-user root\rWSL开启chmod功能  由于我在使用hexo d -g时遇到了些问题，出现Operation not permitted的问题，虽然文件看着是777的权限，但是报错让人很无奈。\n Linux 挂载需要开启一些特性，解决办法是更改 wsl.conf 文件。\nsudo vim /etc/wsl.conf\r添加挂载磁盘的一些默认设置。\n[automount]\renabled = true\roptions = \u0026#34;metadata,umask=22,fmask=11\u0026#34;\rmountFsTab = false\r以管理员权限运行cmd,重启linux子系统。\nnet.exe stop LxssManager\r之后在所需要使用文件夹，运行\nsudo chmod -R 777 software\r便可以自由操纵那个文件夹了。\n源码编译最新的vim  备注：不知道为什么一直失败\n git clone https://github.com/vim/vim.git\rcd vim/src\n./configure --with-features=huge --enable-multibyte --enable-rubyinterp --enable-pythoninterp --enable-python3interp --enable-luainterp --enable-cscope --enable-gui=gtk3 --enable-perlinterp --with-python-config-dir=/usr/lib/python2.7/config-x86_64-linux-gnu/ --with-python3-config-dir=/usr/lib/python3.6/config-3.6m-x86_64-linux-gnu/ --prefix=/usr/local/vim\r--with-features=huge：支持最大特性 --enable-rubyinterp：打开对 ruby 编写的插件的支持 --enable-pythoninterp：打开对 python 编写的插件的支持 --enable-python3interp：打开对 python3 编写的插件的支持 --enable-luainterp：打开对 lua 编写的插件的支持 --enable-perlinterp：打开对 perl 编写的插件的支持 --enable-multibyte：打开多字节支持，可以在 Vim 中输入中文 --enable-cscope：打开对cscope的支持 -\r-enable-gui=gtk3 表示生成采用 GNOME3 风格的 gvim --with-python3-config-dir=/usr/lib/python3.6/config-3.6m-x86_64-linux-gnu/ 指定 python3路径,已经弃用\r--prefix=/usr/local/vim：指定将要安装到的路径\r记住，\u0026ndash;with-python3-config-dir为python3的配置路径，不是执行路径。\n 源码编译失败，使用apt更新  sudo apt remove vim\rsudo apt-get install vim\r","date":"2020-03-21T14:27:47Z","permalink":"https://liripo.github.io/post/windows10%E5%AE%89%E8%A3%85linux/","tags":"linux","title":"windows10安装linux"},{"content":"","date":null,"permalink":"https://liripo.github.io/categories/","tags":null,"title":"Categories"},{"content":"","date":null,"permalink":"https://liripo.github.io/categories/ggplot2/","tags":null,"title":"ggplot2"},{"content":"文章包含一些我绘制过的ggplot2图一些美化方法。\nggplot2修改绘图字体 使用extrafont包,\nlibrary(extrafont)\rloadfonts(device = \u0026#34;win\u0026#34;)\r这样你就能使用windowsFonts()函数看到的字体 对于英文字体，我一直选用family = \u0026ldquo;serif\u0026rdquo;，完全能应对大部分图形字体。 当然，extrafont包支持把所有字体导入到extrafontdb包中。\nfont_import() #导入字体库\r fonts() #查看导入的字体向量\r ggplot2的theme函数能用来修改字体family、face、size等text标签参数，或者说是字体属性。\n下图是我绘制散点图的一个函数，可以重点关注theme。\nplotfun \u0026lt;- function(df,x,y){\r#x,y为列名字符串,df参数为tibble\r p \u0026lt;- ggplot(df,aes(get(x),get(y))) + geom_point(size = 1) +\rlabs(title = \u0026#34;Point Plot\u0026#34;,x=x,y=y)+\rtheme(text=element_text(family=\u0026#34;serif\u0026#34;),\raxis.title=element_text(size=14,hjust = 0.5,face = \u0026#34;bold\u0026#34;),\rplot.title = element_text(hjust = 0.5,size = 20 , face = \u0026#34;bold\u0026#34;),\rlegend.text = element_text(hjust = 0.5,size = 12 , face = \u0026#34;bold\u0026#34;),\rlegend.text.align = 0 ,\rlegend.title = element_text(hjust = 0.5,size = 12 , face = \u0026#34;bold\u0026#34;),\raxis.line = element_line(linetype = 1),\rpanel.grid.major = element_blank())\rp1 \u0026lt;- p + geom_smooth(method=\u0026#34;lm\u0026#34;,se=F) #添加lm线性回归直线\r return(p1)\r}\r拼接图形 使用包patchwork\nlibrary(patchwork)\r对于上面那个函数，可以使用mapply循环绘制ggplot2对象列表，但是函数需要修改下，似乎不接受作为参数传入,把函数数据框参数去掉，往函数添加形似mtcars的数据框。\nplist \u0026lt;- mapply(plotfun,x = colnames(mtcars)[3],y = colnames(mtcars)[4:7],SIMPLIFY = F)\r#对列表拼接\r patch \u0026lt;- wrap_plots(plist,nrow = 2,guides = \u0026#34;collect\u0026#34;)\r拼图也可以绘制为分面图 使用gather函数对形式mtcars数据变形。这里就不放入真实数据了，虽说使用mtcars运行我的代码图毫无意义。\n比如去mtcas的mpg列与其他列绘制散点图\nga \u0026lt;- mtcars %\u0026gt;% gather(name1,value1,-mpg) %\u0026gt;%\rgather(name2,value2,mpg)%\u0026gt;%\rggplot(aes(value1,value2)) + geom_point(size = 1) +\rlabs(title = \u0026#34;Point Plot\u0026#34;,x=\u0026#34;name2\u0026#34;,y=\u0026#34;\u0026#34;)+\rfacet_wrap(~name1,strip.position = \u0026#34;left\u0026#34;)\r保存高清的png 我喜欢使用png去保存图片，当然更清晰的是tiff等\npng(file=\u0026#34;xx.png\u0026#34;,width = 10000,height = 4500,res = 600)\rp\rdev.off()\r这是我经常使用的保存图片方式。\nplotly包 这个包可以绘制交互式点图，但是对于上述拼接的图不能支持，所以我才会去绘制分面图，方便看数据。\n这个图使用很简单，使用ggplotly(p)即可在Rstudio导出一个网页图,p为ggplot绘制。\n当然，这个包有其他函数，只是基本没用过。\n2000*2000的corr相关性图 使用ggcor包\nlibrary(tidyverse)\rlibrary(ggcor)\rx \u0026lt;- matrix(rnorm(100*2000),nrow = 100)\r#cor相关性值还未计算\r #直接绘制相关性图,由于2000个过多\r plot \u0026lt;- quickcor(x) +geom_raster + remove_axis()\r#或者计算好后传入ggcor\r cortbl \u0026lt;- cor(x)%\u0026gt;%cor_tbl(type = \u0026#34;upper\u0026#34;)\r#corr值颜色\r cortbl$a \u0026lt;- ifelse(cortbl$r\u0026gt;0,\u0026#34;red\u0026#34;,ifelse(cortbl$r \u0026lt; 0 ,\r\u0026#34;green\u0026#34;,\u0026#34;white\u0026#34;))\r#绘制及保存\r p \u0026lt;- ggcor(cortbl, mapping = aes_string(x = \u0026#34;.col.id\u0026#34;, y = \u0026#34;.row.id\u0026#34;)) +\rgeom_tile(mapping = aes(fill = a))+\rscale_fill_manual(name = \u0026#34;color\u0026#34;,values = levels(factor(cortbl$a)),\rlabels = c(\u0026#34;green:corr\u0026lt;0\u0026#34;,\r\u0026#34;red:corr\u0026gt;0\u0026#34;,\r\u0026#34;white:corr =0\u0026#34;)) + remove_axis()\rpdf(\u0026#34;ggcor.pdf\u0026#34;)\rprint(p)\rdev.off()\r","date":"2020-03-08T19:10:29Z","permalink":"https://liripo.github.io/post/ggplot2%E7%BB%98%E5%88%B6%E5%9B%BE%E6%94%B6%E5%BD%95/","tags":"R","title":"ggplot2绘制图收录"},{"content":"","date":null,"permalink":"https://liripo.github.io/categories/java/","tags":null,"title":"java"},{"content":"使用aspose-words java更新word文档目录页码。正版需要购买。\n代码，保存为文件word.java\nimport com.aspose.words.Document;\rpublic class word {\rpublic static void main(String[] args) throws Exception{\rDocument doc = new Document(\u0026#34;模板.docx\u0026#34;); // 更新目录\r doc.updateFields();\rdoc.save(\u0026#34;结果文件.docx\u0026#34;);\r}\r}\r之后构建CLASSPATH环境变量。\n添加export CLASSPATH=~/.jar/aspose-words-15.8.0-jdk16.jar到~/.bashrc\nsource ~/.bashrc\n即可编译java源文件\n#$CLASSPATH可以缺省\rjavac -cp $CLASSPATH word.java\rjava -cp $CLASSPATH word\r","date":"2020-03-04T22:22:45Z","permalink":"https://liripo.github.io/post/java%E6%9B%B4%E6%96%B0word%E6%96%87%E6%A1%A3%E7%9B%AE%E5%BD%95%E9%A1%B5%E7%A0%81/","tags":"word","title":"java更新word文档目录页码"},{"content":"","date":null,"permalink":"https://liripo.github.io/tags/word/","tags":null,"title":"word"},{"content":"","date":null,"permalink":"https://liripo.github.io/tags/%E6%95%B0%E6%8D%AE%E4%B8%8B%E8%BD%BD/","tags":null,"title":"数据下载"},{"content":"","date":null,"permalink":"https://liripo.github.io/categories/%E6%95%B0%E6%8D%AE%E4%B8%8B%E8%BD%BD/","tags":null,"title":"数据下载"},{"content":"经常性下载速度很慢，纪录一些有用工具。\nwget wget -c 链接 #-c参数为断点续传\r#倘若失败，还可以使用\rwget --tries=0 -c 恢复下载\raxel 链接：https://pan.baidu.com/s/1OpDKL-HUTHtvprpNNSU1Hw 提取码：khq0 windows版本，使用方式\naxel -n 15 ftp或者http网址\r","date":"2020-03-01T17:19:55Z","permalink":"https://liripo.github.io/post/%E6%95%B0%E6%8D%AE%E4%B8%8B%E8%BD%BD%E5%B7%A5%E5%85%B7/","tags":"数据下载","title":"数据下载工具"},{"content":"","date":null,"permalink":"https://liripo.github.io/categories/docx%E6%A8%A1%E5%9D%97/","tags":null,"title":"docx模块"},{"content":"","date":null,"permalink":"https://liripo.github.io/tags/python/","tags":null,"title":"python"},{"content":" docx文件是office2007之后的版本使用的，docx格式的文件本质上是一个zip文件，主要内容是保存为XML格式的，因此可以通过修改Word背后的XML文件来设置自动更新域 。\n  python-docx是一个用于创建和更新Microsoft Word（.docx）文件的Python库 。\n 中文教程，分享的cmd笔记\n官方文档\n首先，谈谈一份word的组成部分，其基本是由标题，段落，表格，图片，分页，页眉页脚，目录，文本框，形状，章节，然后就是文字字体，字号等。【python-docx目前貌似还没有目录以及文本框的相关操作，所以对于涉及这两方面的暂时无法使用python-docx操作】\n当你将一份word模板使用函数 Document() 打开，或者新建一份空白文档时，你就得到了一个文档对象，如：\nfrom docx import Document\rdocument = Document()\r对于对象document即word文档，其势必由上述所述的部分组成，其中最基本的即是段落，可以使用add_paragraph方法添加段落，而对于一个已存在的段落而言，如：\nparagraph = document.add_paragraph(\u0026#39;Lorem ipsum dolor sit amet.\u0026#39;)\rparagraph.style = \u0026#39;List Bullet\u0026#39;\r在空白文档加入段落，或者获取模板第四个段落paragraph = document.paragraphs[3]，可以在其后面使用add_run方法添加文字获得一个run对象，添加的字符格式是默认的，这时你可以对这个run进行字体加粗，斜体，字体名等操作，如：\nrun = paragraph.add_run(\u0026#39;dolor\u0026#39;)\rrun.bold = True\r#英文字体名修改\r run.font.name = \u0026#39;黑体\u0026#39;\r#中文字体名修改\r chinese = qn(\u0026#39;w:eastAsia\u0026#39;)\rrun._element.rPr.rFonts.set(chinese, u\u0026#39;黑体\u0026#39;) #u为unicode编码\r 当然，你也可以修改段落的style,但是我在实践中遇到字体无法修改的情况，可以自行尝试。\n标题添加就不说了，一般报告模板都会有的，但是记住，标题也是属于一个段落。\n对于表格，你可在段落paragraphs处使用方法add_table添加，在整篇文档段落计算时，表格不属于段落，反倒是添加的表格由行列，单元格组成，而单元格之中又包含了段落，段落中又可以使用run对象进行操作。\n说个例子，实际中我为了将自动化生成的表格文字单元格居中费了不少功夫。\n首先我们需要找到官网的说明文档，找到cell即单元格这个对象，我们会发现，它有一些方法去修改这个单元格，\nvertical_alignment这个方法，而对于居中，还是向上靠均存在WD_CELL_VERTICAL_ALIGNMENT这个预设好的对象里，而通过调用居中的方法即可实现单元格居中，如：\nfrom docx.enum.table import WD_CELL_VERTICAL_ALIGNMENT\rcell.vertical_alignment = WD_CELL_VERTICAL_ALIGNMENT.CENTER\r具体学习看官方文档即可。\n","date":"2020-02-12T13:19:22Z","permalink":"https://liripo.github.io/post/python-docx%E7%AC%94%E8%AE%B0/","tags":"python","title":"python-docx笔记"},{"content":" 原始测序文件fq.gz经genome比对，变异检测得到vcf文件，亦即变异位点文件， 只是通过看vcf文件我们是不知道些变异位点到底是位于基因的exon、intron、UTR等的哪些区域的 ，所以需要注释， 常用的vcf注释软件有annovar和snpEff 。\n ANNOVAR annovar官网\n安装 官网注册下载即可，程序为perl脚本，\nANNOVAR结构 ANNOVAR │ annotate_variation.pl #主程序，功能包括下载数据库，三种不同的注释\r│ coding_change.pl #可用来推断蛋白质序列\r│ convert2annovar.pl #将多种格式转为.avinput的程序\r│ retrieve_seq_from_fasta.pl #用于自行建立其他物种的转录本\r│ table_annovar.pl #注释程序，可一次性完成三种类型的注释\r│ variants_reduction.pl #可用来更灵活地定制过滤注释流程\r│\r├─example #存放示例文件\r│\r└─humandb #人类注释数据库\rANNOVAR下载数据库 Perl annotate_variation.pl -buildver hg19 -downdb -webfrom annovar refGene humandb/\r#可用-downdb avdblist参数查看可供下载数据库列表\r# -buildver 表示version\r# -downdb 下载数据库的指令\r# -webfrom annovar 从annovar提供的镜像下载，不加此参数将寻找数据库本身的源\r# humandb/ 存放于humandb/目录下\r# 默认使用gene-based注释类型以及refGene数据库，即基于基因的注释\r基于区域的注释(Region-based Annotation):揭示variant与不同基因组特定段的关系，例如：它是否落在已知的保守基因组区域。基于区域的注释的数据库一般由UCSC提供;在一个数据库中，它不在乎位置的精确匹配，它不在乎核苷酸的识别。\nannotate_variation.pl -regionanno -build hg19 -out ex1 -dbtype phastConsElements46way example/ex1.avinput humandb/\r# -regionanno 表示使用基于区域的注释\r# -dbtype phastConsElements46way 表示使用\u0026#34;phastConsElements46way\u0026#34;数据库，注意需要使用Region-based的数据库\rFilter-based Annotation（基于过滤的注释）:filter-based和region-based主要的区别是，filter-based针对mutation（核苷酸的变化）而region-based针对染色体上的位置。例如region-based比对chr1:1000-1000而filter-based比对chr1:1000-1000上的A-\u0026gt;G\\\nnnotate_variation.pl -filter -dbtype 1000g2012apr_eur -buildver hg19 -out ex1 example/ex1.avinput humandb/\r# -filter 使用基于过滤的注释\r# -dbtype 1000g2012apr_eur 使用\u0026#34;1000g2012apr_eur\u0026#34;数据库\r#运行命令后，已知的变异会被写入一个*dropped结尾的文件，而没有在数据库中找到的变异将会被写入*filtered结尾的文件，*dropped文件是我们所需要的结果\rvcf转.avinput ANNOVAR使用.avinput格式，最重要为前5列\n 染色体(Chromosome) 起始位置(Start) 结束位置(End) 参考等位基因(Reference Allele) 替代等位基因(Alternative Allele) 剩下为注释部分（可选）  convert2annovar.pl -format vcf4 NL190929.vcf \u0026gt;out.avinput\r#根据前五列去重\rawk \u0026#39;!a[$1,$2,$3,$4,$5]++{print $0}\u0026#39; out.avinput \u0026gt;uniq.avinput\rANNOVAR注释功能 用table_annovar.pl进行注释\ntable_annovar.pl uniq.avinput ~/software/annovar/humandb -buildver hg19 -out annoresult -remove -protocol refGene,avsnp150,1000g2015aug_all,1000g2015aug_eas,1000g2015aug_sas,1000g2015aug_amr,1000g2015aug_afr,1000g2015aug_eur,gnomad_exome_20190125,dbnsfp30a,intervar_20170202,clinvar_20190305 -operation g,f,f,f,f,f,f,f,f,f,f,f 2\u0026gt;annovar.log \u0026amp;wait\r# -buildver hg19 表示使用hg19版本\r# -out annoresult 表示输出文件的前缀为annoresult\r# -remove 表示删除注释过程中的临时文件，试了下不加，多产生27个文件，其中annoresult.hg19_multianno.txt文件为后续分析使用\r# -protocol 表示注释使用的数据库，用逗号隔开，且要注意顺序\r# -operation 表示对应顺序的数据库的类型（g代表gene-based、r代表region-based、f代表filter-based），用逗号隔开，注意顺序\r# -nastring . 表示用点号替代缺省的值\r# -csvout 表示最后输出.csv文件\r#2\u0026gt;annovar.log 将标准错误输出到文件中\r#wait等待所有线程的程序运行完执行下一步操作\rInterVar InterVar 这个软件是同个作者写的，是增加Intervar注释的软件。\n#按照参考的配置文件配好相关路径\rcp ~/config.ini ./ python2 ~/InterVar-master/Intervar.py -c ./config.ini 2\u0026gt;Intervar.log\r#从其运行来看，是对数据库Intervar再次运行脚本annotate_variation.pl生成annocar数据库，convert2annovar.pl ,table_annovar.pl产生三个文件，其中\rintervar_result.hg19_multianno.txt.intervar为后续分析使用，\r##去重\rawk \u0026#39;!a[$1,$2,$3,$4,$5]++{print $0}\u0026#39; intervar_result.hg19_multianno.txt.intervar \u0026gt;intervar_result_uniq\r","date":"2020-01-20T23:58:40Z","permalink":"https://liripo.github.io/post/vcf%E6%96%87%E4%BB%B6%E6%B3%A8%E9%87%8A/","tags":"analysis","title":"vcf文件注释"},{"content":" 使用以上两个软件+vardict/varscan/outLyzer构建UMI分析流程\n fastp 安装 conda install -c bioconda fastp\rfastp处理UMI功能  结果路径：253：/data3/liaorp/umi/NL190929/fastp+genecore/umi_process\n 默认情况下fastp启动质量过滤，-q参数来指定合格的 phred 质量值,-u参数来指定最多可以有多少百分比的质量不合格碱基,使用-Q禁用1 默认启动长度过滤，可以使用-L禁用，\u0026ndash;length_required默认15（即低于15的舍弃），\u0026ndash;length_limit限制长度 默认情况下，适配器修整是启用的，可以通过-A或\u0026ndash;disable_adapter_trimming禁用 -w, \u0026ndash;thread参数可使用多线程\nmkdir umi_process \u0026amp;\u0026amp; cd umi_process\rfastp -i ../NL190929-1C.R1.fastq.gz -o R1.fastq.gz -I ../NL190929-1C.R2.fastq.gz -O R2.fastq.gz \\\r -U --umi_loc=per_read --umi_len=3 --umi_skip=4 --umi_prefix=UMI \\\r -Q -L -A\r产生的fastq的query names形如，这是gencore接受的query names。\n@ST-E00252:685:H5CLNCCX2:1:1101:27884:2680:UMI_CAG_AGA 1:N:0:TTCGTTGG+TACACACG\r生成bam文件  传入的fasta参考文件以及bed文件只是计算相应区域覆盖率。\n 使用bwa+samtools生成比对的bam文件 脚本：\nbwa mem -t 10 /data3/liaorp/hg/hg19.fa R1.fastq.gz R2.fastq.gz \u0026gt; bwa.sam\r#samtools将sam转bam并排序\rsamtools view -Sb bwa.sam |samtools sort -n -o sortquery.bam\r#samtools index sortquery.bam samtools貌似只能对pos位置排序（即默认排序）建立索引，上面选用-n参数进行query排序导致失败了。\n在后面使用gencore时提示我仍旧没有sort\n尝试改用picard进行sort，使用输入文件samtools转bam的输出文件\njava -jar /data3/liaorp/software/picard.jar SortSam I=sam.bam O=picardsort.bam SO=queryname\r还是提示未排序 使用samtools默认排序即可\nsamtools sort -@ 10 -o sortpos.bam sam.bam\rgencore  具有处理UMIs和报告信息性结果的功能,可以对重复序列进行删除以及降低背景噪音。2\n 安装 cd ~/gitclone \u0026amp;\u0026amp; wget [http://opengene.org/gencore/gencore](http://opengene.org/gencore/gencore)\rchmod a+x ./gencore\r#~/.soft已在环境变量中，将程序软连接过去，省去配置环境变量的麻烦\rcd ~/.soft \u0026amp;\u0026amp; ln -s ~/gitclone/gencore ./\r运行 脚本\nmkdir gencore \u0026amp;\u0026amp; cd gencore\rgencore -i ../umi_process/sortpos.bam -o gencore.unsort.bam -r /data3/liaorp/hg/hg19.fa \\\r -b ../snp.probe.bed -u UMI -s 1 --high_qual 30\r结果目录：253：/data3/liaorp/umi/NL190929/fastp+genecore/gencore\n对结果按碱基排序\nsamtools sort -@ 20 -o sortgencore.bam gencore.unsort.bam\r 需要建立索引后进行vardictjava变异检测！！！\n samtools index sortgencore.bam\rvardictjava变体识别 脚本\njava -jar /data3/liaorp/software/VarDictJava-master/build/libs/VarDict-1.7.0.jar \\\r -G /data3/liaorp/hg/hg19.fa -N NL19332 -f 0.01 \\\r -b sortgencore.bam \\\r -z -c 1 -S 2 -E 3 -g 4 \\\r ../snp.probe.bed \\\r | /data3/liaorp/software/VarDictJava-master/dist/VarDict-1.7.0/bin/teststrandbias.R \\\r | /data3/liaorp/software/VarDictJava-master/dist/VarDict-1.7.0/bin/var2vcf_valid.pl -N NL19332 -E -f 0.01 \\\r |awk \u0026#39;{if ($1 ~ /^#/) print; else if ($4 != $5) print }\u0026#39; \\\r \u0026gt; tmp.vcf\rjava -Xmx32g -jar /data3/liaorp/software/picard.jar SortVcf \\\r I=tmp.vcf O=NL19332.vcf SD=/data3/liaorp/hg/picard_CreateSequenceDictionary/hg19.dict\r参考文献：\n  Chen S, Zhou Y, Chen Y, Gu J. Fastp: an ultra-fast all-in-one FASTQ preprocessor. Bioinformatics. 2018;34:884–90.\u0026#8617;\n Chen, S., Zhou, Y., Chen, Y. et al. Gencore: an efficient tool to generate consensus reads for error suppressing and duplicate removing of NGS data. BMC Bioinformatics 20, 606 (2019) doi:10.1186/s12859-019-3280-9\u0026#8617;\n  ","date":"2020-01-07T23:05:42Z","permalink":"https://liripo.github.io/post/fastp-gencore%E4%BD%BF%E7%94%A8/","tags":"UMI","title":"fastp+gencore使用"},{"content":"","date":null,"permalink":"https://liripo.github.io/tags/umi/","tags":null,"title":"UMI"},{"content":"","date":null,"permalink":"https://liripo.github.io/categories/%E7%94%9F%E4%BF%A1%E8%BD%AF%E4%BB%B6/","tags":null,"title":"生信软件"},{"content":"","date":null,"permalink":"https://liripo.github.io/tags/ssh/","tags":null,"title":"ssh"},{"content":"购买海外服务器，选用 virmach，或者Vultr、Linode、DigitalOcean。\nxshell进入服务器后创建用户，非必须。\nadduser liripo \u0026amp;\u0026amp; passwd liripo\r#添加sudo权限\r$ vim /etc/sudoers\r#在root ALL=(ALL) ALL下面添加\rliripo ALL=(ALL) ALL\r使用ShadowsocksR sudo su\rwget -N --no-check-certificate https://makeai.cn/bash/ssrmu.sh \u0026amp;\u0026amp; chmod +x ssrmu.sh\rbash ssrmu.sh\r输入 1 ，开始安装ShadowsocksR服务端。\n之后会提示输入Shadowsocks的 端口/密码/加密方式/ 协议/混淆（混淆和协议是通过输入数字选择的） 等参数来添加第一个用户 。\n之后按着提示走呗。端口号尽量选高点，比如6888，25是不行的。\n得到相关信息如下：\n===================================================\r用户 [liripo] 的配置信息：\rI P\t: 45.76.209.91\r端口\t: 6888\r密码\t: ******\r加密\t: aes-256-ctr\r协议\t: auth_sha1_v4_compatible\r混淆\t: tls1.2_ticket_auth_compatible\r设备数限制 : 5\r单线程限速 : 0 KB/S\r用户总限速 : 0 KB/S\r禁止的端口 : 无限制 已使用流量 : 上传: 0 B + 下载: 0 B = 0 B\r剩余的流量 : 819.21 TB 用户总流量 : 819.21 TB SS 链接 : ss://YWVzLTI1Ni1jdHI6cnAzMTgwMjA4NTYzQDQ1Ljc2LjIwOS45MToyNQ SS 二维码 : https://makeai.cn/qr/?m=2\u0026amp;e=H\u0026amp;p=3\u0026amp;url=ss://YWVzLTI1Ni1jdHI6cnAzMTgwMjA4NTYzQDQ1Ljc2LjIwOS45MToyNQ\rSSR 链接 : ssr://NDUuNzYuMjA5LjkxOjI1OmF1dGhfc2hhMV92NDphZXMtMjU2LWN0cjp0bHMxLjJfdGlja2V0X2F1dGg6Y25Bek1UZ3dNakE0TlRZeg SSR 二维码 : https://makeai.cn/qr/?m=2\u0026amp;e=H\u0026amp;p=3\u0026amp;url=ssr://NDUuNzYuMjA5LjkxOjI1OmF1dGhfc2hhMV92NDphZXMtMjU2LWN0cjp0bHMxLjJfdGlja2V0X2F1dGg6Y25Bek1UZ3dNakE0TlRZeg 提示: 在浏览器中，打开二维码链接，就可以看到二维码图片。\r协议和混淆后面的[ _compatible ]，指的是 兼容原版协议/混淆。\r===================================================\r由于二维码自动生成功能连接不上，自己安装ShadowsocksR的安卓或者windows版本\n安装windows或android客户端 配置相关信息即可使用。\n安卓apk可在Githubshadowsocksr-android下载\n由于百度网盘分享不了，windowns版本可在我的腾讯云下载\n倘若电脑端网速太慢，可右键点击程序的那个小飞机，选择代理规则：绕过局域网和大陆。\n","date":"2020-01-06T23:39:54Z","permalink":"https://liripo.github.io/post/%E7%BF%BB%E5%A2%99%E8%87%AA%E6%90%AD/","tags":"ssh","title":"翻墙？自搭！"},{"content":"xmanger 是与xshell搭配的图形界面管理器，需要付费，作为替代，使用xming，只是运行没那么快。\n安装 下载网址\n配置  XMing的配置：打开XLaunch，记住Display Number，现在这里是0，后面配置及XShell中会用到。然后点击启动xming。 首先打开Xming安装文件夹找到 X*.hosts 文件(*号为上面Display Number 数字），如本例就是找到X0.hosts文件，打开并在localhost下面一行，添加Linux服务器的IP地址。 配置xshell,连接-》SSH -\u0026gt; 隧道-》 在x11 转移中设置xdisplay为localhost:0.0 配置完成后，重新连接服务器， 启动图形界面软件，如spyder,就可以在xming上启动了。 ","date":"2019-12-23T10:59:34Z","permalink":"https://liripo.github.io/post/xshell-%E5%92%8C-xming-%E8%81%94%E5%90%88%E4%BD%BF%E7%94%A8%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E8%BD%AF%E4%BB%B6/","tags":"linux","title":"xshell 和 xming 联合使用图形界面软件"},{"content":"","date":null,"permalink":"https://liripo.github.io/tags/bioconductor/","tags":null,"title":"bioconductor"},{"content":" 在生物信息学领域 , bioPerl和bioPython 是使用和研究生物信息学的开发者提供的在线资源库，那么bioR应当就是bioconductor。\n 官网 2018年bioconductor教程\nR包安装 #官网安装\r if (!require(\u0026#34;BiocManager\u0026#34;))\rinstall.packages(\u0026#34;BiocManager\u0026#34;)\rBiocManager::install(\u0026#34;your-package\u0026#34;)\r倘若下载速度慢，则更换镜像源\n# 先安装BiocManager，它位于CRAN  if(length(getOption(\u0026#34;CRAN\u0026#34;))==0) options(CRAN=\u0026#34;https://mirrors.tuna.tsinghua.edu.cn/CRAN/\u0026#34;)\rif(!require(\u0026#34;BiocManager\u0026#34;)) install.packages(\u0026#34;BiocManager\u0026#34;,update = F,ask = F)\r# 然后添加BioC的国内源，可以选清华或者中科大\r if(length(getOption(\u0026#34;BioC_mirror\u0026#34;))==0) options(BioC_mirror=\u0026#34;https://mirrors.ustc.edu.cn/bioc/\u0026#34;)\r快速查找包的文档,如browseVignettes(\u0026quot;clusterProfiler\u0026quot;)\n","date":"2019-12-22T22:27:21Z","permalink":"https://liripo.github.io/post/bioconductor%E7%9A%84%E5%AD%A6%E4%B9%A0%E4%B8%8E%E4%BD%BF%E7%94%A8/","tags":"bioconductor","title":"bioconductor的学习与使用"},{"content":"","date":null,"permalink":"https://liripo.github.io/tags/bioawk/","tags":null,"title":"bioawk"},{"content":" awk是我很喜欢的处理文本文件的工具，称他为一种语言也不过分了。但是在处理生信文件时还是不方便。另一种选择就是使用bioawk。唯一的短板就是无法使用awk内置变量，无法同时操作多个文件。\n 安装  conda 安装，方便，conda install 可以加-p参数指定安装路径 源码编译安装  git clone git://github.com/lh3/bioawk.git\rcd bioawk \u0026amp;\u0026amp; make\recho \u0026#34;export PATH=${path}/bioawk/:$PATH\u0026#34; \u0026gt;\u0026gt; ~/.bashrc\rsoyrce ~/.bashrc\r语法 $ bioawk\rusage: bioawk [-F fs] [-v var=value] [-c fmt] [-tH] [-f progfile | \u0026#39;prog\u0026#39;] [file ...]\r-F： 输入记录列和列之间的分隔符，和awk相同\r-c： 支持的格式，前面讲过\r-t： 以制表符分割各列，效果等同于bioawk -F\u0026#39;t\u0026#39; -v OFS=\u0026#34;t\u0026#34;\r-f：官方文档没有介绍，这个参数和awk的参数意义一样，从文件读取source命令\r-H：处理sam文件时，是否包含header\r-c 支持输入文件格式，查看帮助：\n$ bioawk -c -h\r###bed:\r1:chrom 2:start 3:end 4:name 5:score 6:strand 7:thickstart 8:thickend 9:rgb 10:blockcount 11:blocksizes 12:blockstarts\r###sam:\r1:qname 2:flag 3:rname 4:pos 5:mapq 6:cigar 7:rnext 8:pnext 9:tlen 10:seq 11:qual\r###vcf:\r1:chrom 2:pos 3:id 4:ref 5:alt 6:qual 7:filter 8:info\r###gff:\r1:seqname 2:source 3:feature 4:start 5:end 6:score 7:filter 8:strand 9:group 10:attribute\r###fastx:fastx为序列格式,包括fasta和fastq\r1:name 2:seq 3:qual 4:comment\rbioawk依赖于 zlib，以便使用gzip文件。\n使用 1.提取没有标题未映射读取\nbioawk -c sam \u0026#39;and($flag,4)\u0026#39; example.sam\r2.提取标题映射读取\nbioawk -Hc sam \u0026#39;!and($flag,4)\u0026#39; example.bam\r3.反向互补fasta,revcomp函数\nbioawk -c fastx \u0026#39;{print\u0026#34;\u0026gt;\u0026#34;$name;print revcomp($seq)}\u0026#39; seq.fa\r4.从SAM创建 FASTA ( 如果标志16，则使用 revcomp )\nsamtools view example.bam | bioawk -c sam \u0026#39;{s=$seq; if(and($flag, 16)) {s=revcomp($seq)} print\u0026#34;\u0026gt;\u0026#34;$qname\u0026#34;n\u0026#34;s}\u0026#39;\r5.从VCF打印样本 foo 和 bar的基因型\ngrep -v ^## in.vcf | bioawk -tc hdr \u0026#39;{print $foo,$bar}\u0026#39;\r#hdr或者 header 根据输入中的第一行来命名每个列。 第一个字符中的特殊字符将转换为下划线\r#用R习惯了，很容易上手\r6.将fa打印成表格形式，以“Tab”分隔\nbioawk -t -c fastx \u0026#39;{print $name,$seq}\u0026#39; input.fa\r7.还有gc函数统计GC含量\nbioawk -c fastx \u0026#39;{print $name, gc($seq)}\u0026#39; input.fa\r8.fq转fa\nbioawk -c fastx \u0026#39;{print \u0026#34;\u0026gt;\u0026#34;$name; print $seq}\u0026#39; input.fastq\r还有各种函数meanqual\u0026ndash;计算Phred平均值，length，trimq(30,0,5)剪掉质量值低于30，碱基位置从0-5的片段；\n","date":"2019-12-20T23:22:55Z","permalink":"https://liripo.github.io/post/bioawk%E4%BD%BF%E7%94%A8/","tags":"bioawk","title":"bioawk使用"},{"content":"","date":null,"permalink":"https://liripo.github.io/tags/grep/","tags":null,"title":"grep"},{"content":" grep ：文本搜索工具。\n 常使用参数 -c 显示有多少行匹配到\r-v 显示不匹配\r-o 只输出文件中匹配到的部分\r-i 忽略大小写\r-n 显示匹配到的行及行号#很好用，配合sed就可以显示前后几行内容并修改\r-A/B \u0026lt;int\u0026gt;:显示后/前int行内容\r-e 一次匹配多个内容，如grep -e a -e b\r-q 返回0值或非0值\rgrep递归搜索文件 真的不错\ngrep \u0026#34;text\u0026#34; ./ -r -n# -r递归搜索\r习惯性grep使用正则时才加引号。\n","date":"2019-12-19T23:34:45Z","permalink":"https://liripo.github.io/post/grep%E4%BD%BF%E7%94%A8/","tags":"grep","title":"grep使用"},{"content":" fastqc:一种用于高通量序列数据的质量控制应用程序。\n 安装  下载源代码网址 需要  #下载后解压\runzip fastqc_*.zip\rcd fastqc_*.zip\rchmod 744 fastqc || chmod u+x fastqc# 将 fastqc 设置为可执行程序\r#chmod中数字4为设置可读，2可写，1可执行，即r,w,x,而数字7为4+2+1\r#u 表示该文件的拥有者，g 表示与该文件的拥有者属于同一个群体(group)者，o 表示其他以外的人，a 表示这三者皆是\r conda 安装就好了，自动帮下jdk.  \u0026ndash;help fastqc \u0026ndash;help\n# 命令行使用\rfastqc [-o output dir] [--(no)extract] [-f fastq|bam|sam] [-c contaminant file] seqfile1 .. seqfileN\r参数说明\n-h --help\r-v --version\r-o -output dir\r- casave 文件来自原始 casave 输出\r-nano 文件来自 naopore 序列，采用 fast5 格式\r-extract 如果设置，则压缩输出\r-j --java java二进制文件完整路径\r-nogroup 禁止读取2500bp以上的碱基组\r-f 跳过正常文件格式检测，强制使用指定格式 bam | sam | bam_mapped | sam_mapped | fastq\r-t --threads 多线程，每个线程 250 M\r-c --contamin 指定包含列表的非默认文件，污染物筛选过多的序列（哈希）\r-a -adapters 指定包含列表的非默认文件，包含一组已经命名的Adapter（哈希）\r-l 指定一个非默认文件，限制将用于确认 warning / Fairure，或者从结果中删除一些模块， cofiguration --\u0026gt; limits.txt\r-k -kmers 指定要在Kmer中查找的长度，必须在2-10 之间，默认为7\r-q -quiet 安静模式，在标准输出上禁止所有的进度消息，只报错\r-d --dir 一个目录用于写入临时文件当生成图像时， 默认系统临时目录\r生成文件解读 当使用1个fastq文件时，使用命令mkdir fastqc \u0026amp;\u0026amp; fastqc -o ./fastqc ref.fastq.gz\n会在目录下生成一个html以及.zip文件，zip文件就是画图的数值以及图片。所以fastqc结果看html即可。\n  html解读 这一部分中√代表\u0026quot;PASS\u0026rdquo;；!代表\u0026quot;WARN\u0026rdquo;；x代表\u0026quot;FAIL\u0026rdquo; 1.Basic Statics   Encoding为Illumina1.9 就是 Phred+33，很重要，1.8以上即为Phred33编码。\n  Total sequences: reads数量（reads就是高通量测序平台产生的序列标签，翻译为读段）\n  Sequence length: 测序长度\n  %GC: GC含量： 重点关注，可以帮助区别物种，人类细胞42%左右 2.Per base sequence quality 画的是boxplot,这个图我看了下数值，前面的绘图数据都是32。 横轴：测序序列的1-150个碱基； 纵轴：质量得分，score = -10 * log10（error），例如错误率error为1%，那么算出的score就是20 蓝色的线将各个碱基的质量平均值连接起来\n ","date":"2019-12-18T12:52:21Z","permalink":"https://liripo.github.io/post/fastqc%E4%BD%BF%E7%94%A8/","tags":"生信基础工具","title":"FASTQC使用"},{"content":"","date":null,"permalink":"https://liripo.github.io/tags/%E7%94%9F%E4%BF%A1%E5%9F%BA%E7%A1%80%E5%B7%A5%E5%85%B7/","tags":null,"title":"生信基础工具"},{"content":"","date":null,"permalink":"https://liripo.github.io/tags/markdown/","tags":null,"title":"markdown"},{"content":" 在线教程\n Markdown的特点就不赘述了。\n编辑器 推荐Tpyora\u0026ndash;熟悉这个软件大部分的写作可以解决。 Tpyora支持导出PDF，html，word\u0026ndash;需安装pandoc等。\n写作方式 我喜欢在源代码模式进行写作，TpyoraCTRL+/即可来回切换视图模式。新建表格可以在非源码视图使用CTRL+T。字体大小颜色可以使用html语法进行修改，很少用。:smile:即可输出笑脸，虽然我不怎么用，记录下呗。一般我不会添加[toc]在文章开头处生成目录。高亮也很少用，源码模式使用==hightlight==,引用句首加\u0026gt;。图片的话虽然可以Tpyora可以直接本地复制粘贴，但是依赖于本地，其他人无法查看，所以我习惯使用腾讯云cos功能，或者Github构建的图床，出图不稳定，尤其0点到10点无法显示，少用。由于Markdown的表格功能无法快速的复制粘贴，对于大的数据表格一行行复制太麻烦了，使用软件exceltk将excel转.md文件,命令./exceltk.exe -t md -xls xxx.xls,可以知道sheet,./exceltk.exe -t md -xls xx.xls -sheet sheetname,指定小数数字精度./exceltk.exe -t md -p 2 -xls xxx.xls\n 在Tpyora中可以在视图模式直接复制整个表格\n  Markdown的哲学就是 Less is more， 专注于自己的思维流，特定的时间段内大量输出。\n 所以不必追求过多花里胡哨的，除非报告之类的。接下来就试试Rmarkdown呗。\nRmarkdown 使用前安装rmarkdown包\u0026ndash;devtools:install_github(\u0026quot;rmarkdown\u0026quot;, \u0026quot;rstudio\u0026quot;) 注：直接创建新文件会自动下载\n导出html 直接点击knit to html即可。\n导出PDF 需要安装tinytex\n#以下任选即可\r tinytex::install_tinytex()#这个我没成功过\r devtools::install_github(\u0026#39;yihui/tinytex\u0026#39;)#github下载多好\r 记录个问题，花了我很长时间，tinytex需要调用DOS命令DOSKEY,由于我的公司电脑没有配置好环境变量路径：c:\\windows\\System32，所以一直无法设置别名。当然，如果没有问题的话，安装好tinytex直接导出pdf时会自动下载。 下载完后下载miktex\u0026ndash;这是windows的 之后设置Rstudio,打开tools,点击global option，如下所示， 打开Rmarkdown文件，点击设置，进去output options,点击Advanced  以xeLaTeX+ xeCJK 来处理终于能用Rmarkdown编译pdf文档\n 解决中文pdf不支持问题 下载rticlesinstall.packages(\u0026quot;rticles\u0026quot;) 这个包中有Ctex相关功能，所以可以实现中文的输出 之后在写Rmarkdown时使用rticles的cetx模板即可。 弄到这，干嘛不直接下个ceTX就好，不过还要编辑header.tex文件，想想还是模板吧。\n直接修改这个包的.RMD文件不就好了。。\n导出word 安装pandoc即可。\n试试ppt呗 中文帮助 Github 有空再搞吧，好累\nbookdown 用R写书。 Github\n试试增强般及简化版 bookdownplus\nLaTeX的使用 数学公式","date":"2019-12-17T23:42:15Z","permalink":"https://liripo.github.io/post/markdown%E4%B8%8Etyporarmarkdown/","tags":"markdown","title":"Markdown与Typora,Rmarkdown"},{"content":" samtools是一个用于操作sam和bam文件的工具合集。sam为bam文件的十进制文件；bam为二进制文件。\n View 作用：bam与sam互转，查看bam文件，对bam进行排序和提取的操作。\n sam与bam互转:-S指定输入文件格式为sam，不加则为bam,-b指定输出格式(默认输出sam)  samtools view -Sb SRR3589956.sam \u0026gt;SRR3589956.bam #重定向符也可以换成-o参数\rsamtools view -h SRR3589956.bam \u0026gt; SRR3589956.sam #-h置输出sam时带上头注释信息\r 过滤功能-F：后接flag数字，常用有4（表示序列没比对上）、8（配对的另一条序列，即mate序列没比对上）以及12（两条序列都没比对上）。加上-F就表示过滤掉这些情况  #提取一条reads比对到参考序列上的序列结果\rsamtools view -bF4 abc.bam\u0026gt;abc.F4.bam\r#提取两条reads都比对到参考序列上的序列结果\rsamtools view -bF12 abc.bam\u0026gt;abc.F12.bam\r反之-f，就是提取指定flag的序列.当然还有其它参数，详情请\u0026ndash;help\nsort 作用：对bam进行排序，一些软件需要使用排序后的bam，拿到bam先按照比对位置的顺序排一下，百利无一害。 Usage: samtools sort [-n] [-m ] \u0026lt;in.bam\u0026gt; \u0026lt;out.prefix\u0026gt; -m 参数默认下是 500,000,000 即500M。每个线程运行内存大小。 -n 设定排序方式按short reads的ID排序。默认下是按序列在fasta文件中的顺序（即header）和序列从左往右的位点排序。 -@：设置排序和压缩的线程数，默认单线程 samtools sort -@ 10 -o abc.sorted.bam abc.bam\nmerge 作用：将两个及以上的sort过的bam文件融合成一个bam文件,融合后的文件不需要则是已经sort过了的。 Usage: samtools merge [-nr] [-h inh.sam] \u0026lt;out.bam\u0026gt; \u0026lt;in1.bam\u0026gt; \u0026lt;in2.bam\u0026gt;[\u0026hellip;]\nindex 作用：对bam文件构建索引，产生.bai文件，方便以后的快速处理；bam文件进行排序sort后，才能进行index，否则报错；要显示比对结果时，比如用IGV导入bam，就需要有.bai的存在\nsamtools index abc.bam\r当有多个bam文件时，一般思路就是对每一个bam进行sort、index后，再merge成一个整体merged.bam，然后对merged.bam再进行sort、index，才算能用了，得到最终结果应该是是sorted.merge.bam\nfaidx 作用：对fasta文件建立提取索引，索引文件后缀是.fai。利用索引文件可以快速提取fasta文件中的某些序列\nsamtools faidx hg19.fasta\rtview 作用：直观显示reads比对到基因组的情况，与IGV类似需要先sort和index\nsamtools tview abc.sorted.bam hg19.fasta\rflagstat 作用：统计bam文件的比对结果\nsamtools flagstat abc.sorted.bam \u0026gt; abc.sorted.flagstat.txt\rdepth 作用：统计每个碱基位点的测序深度;需要使用重定向定义输出文件；要使用构建过索引的bam Usage: bam2depth [-r reg] [-q baseQthres] [-Q mapQthres] [-b in.bed] \u0026lt;in1.bam\u0026gt; [\u0026hellip;] -r：（region）加染色体号； -q：要求测序碱基质量最低值； -Q：要求比对的质量最低值\nsamtools depth abc.sorted.bam \u0026gt;abc.depth\rmpileup 作用：用于生成bcf文件，或者说是pileup文件，之后结合bcftools进行SNP与InDel的分析，安装samtools时，包含了bcftools。【非常重要】 Usage: samtools mpileup [-EBug] [-C capQcoef] [-r reg] [-f in.fa] [-l list] [-M capMapQ] [-Q minBaseQ] [-q minMapQ] in.bam [in2.bam [\u0026hellip;]] -f：输入有索引的参考基因组fasta； -g：输出到二进制的bcf格式【不使用-g，就不生成bcf格式，而是一个文本文件，统计了参考序列中每个碱基位点的比对情况；每一行代表参考序列中某一个碱基位点的比对结果】 -u：类似于-g，但是其主要用在管道操作，因为其输出是未压缩的bcf文件。\nsamtools mpileup -f hg19.fa abc.sorted.bam \u0026gt;abc.mpileup.txt\r结果包含6列：参考序列名、匹配位置、参考碱基、比对上的reads数、比对的情况、比对的碱基质量\n在第5列比对具体情况中:\r. 表示与参考序列正链匹配；\r, 表示与参考序列负链匹配；\rATCGN 表示在正链不匹配；\ratcgn 表示在负链不匹配；\r* 模糊碱基；\r^ 匹配的碱基是一个read的开始，后面的ASCII码-33表示比对质量，再向后修饰的(.,ATCGNatcgn) 表示该read的第一个碱基；\r$ 表示一个read结束，修饰前面碱基;\r正则表达式+[0-9][ATCGNatcgn] 表示在该位点后面插入的碱基；\r正则表达式-[0-9][ATCGNatcgn] 表示该位点后面缺失的碱基\rbam转fastq 作用：方便提取出一段比对到参考序列的reads进行分析 利用软件：http://www.hudsonalpha.org/gsl/information/software/bam2fastq\nrmdup 作用：将测序数据中由于PCR duplicate得到的reads去掉，只保留比对质量最高的reads\nidxstats 作用：输出一个表格，包含“序列名、序列长度、比对上的reads数、没有比对上的reads数”；其中第四列指PE reads中的一条read能匹配到参考基因组的染色体A，另一条read不能匹配到A上\nreheader 作用：替换bam文件的头文件\n","date":"2019-12-17T21:19:12Z","permalink":"https://liripo.github.io/post/samtools%E4%BD%BF%E7%94%A8/","tags":"生信基础工具","title":"samtools使用"},{"content":"bamdst:用于计算bam文件测序深度和覆盖度（Sequencing depth and coverage）,有个疑问，应该使用哪个bam呢？？使用bwa及samtools得到的bam测序深度很高。。\n安装 git clone https://github.com/shiquan/bamdst.git ~\rcd bamdst/\rmake\r#安装完后会在项目根目录生成一个bamdst程序\n-rwxrwxr-x 1 liaorp liaorp 532816 Dec 17 11:02 bamdst\r可以看到文件权限可执行,键入./bamdst即可运行，或者加入环境变量中。\necho -e \u0026#39;#添加bamdst\\nexport PATH=~/software/bamdst:$PATH\u0026#39;\u0026gt;\u0026gt;~/.bashrc#记住是单引号\rsource ~/.bashrc#使环境生效\r概念 测序深度Depth：测序得到的总碱基数与待测基因组大小的比值。如人的基因组为3Gb，测序获得90Gb数据量，平均测序深度为30X。 覆盖率：\nexample 下载数据有个example文件夹，测试以下,使用-p,-o参数\ncd example \u0026amp;\u0026amp; mkdir test\rbamdst -p MT-RNR1.bed -o ./test test.bsm\r产生七个文件:\n$ls\rchromosomes.report coverage.report depth_distribution.plot depth.tsv.gz insertsize.plot region.tsv.gz uncover.bed\r chromosomes.report:该文件中存储的是从bam文件中获取的目标染色体深度、覆盖度信息 bed文件即是为了挑选目标区域，即感兴趣的位置。 coverage.report：信息很多，只看这个文件即可 文件分成三部分[total],[Target],[Flank],其中文件中还有一个关键字rmdup  [Target] Average depth 0.26 [Target] Average depth(rmdup) 0.06\r[Target] Coverage (\u0026gt;0x) 5.66% #目标区域大于0X覆盖率，排除0X\r[Target] Coverage (\u0026gt;=4x) 2.83%\r[Target] Coverage (\u0026gt;=10x) 0.00%\r[Target] Coverage (\u0026gt;=30x) 0.00%\r[Target] Coverage (\u0026gt;=100x) 0.00%\r目标区域平均测序深度，算一下呗,即LN/G，where L is the read length, N is the number of reads and G is the haploid genome length.1 可以使用中文pubmed\n$ awk \u0026#39;{a=$1*$2;sum+=a;b=sum/954}END{print b}\u0026#39; depth_distribution.plot\r0.261006\r目标区域覆盖率：为文件depth_distribution.plot的第五列，1-第三列 在R中输入round(54/954,6)得到0.056604\n  insertsize.plot：由于example得到的文件为空，有待探究\n  depth.tsv.gz：记录了每个位点的 Raw Depth Rmdup depth Cover depth，三个名词各自代表？列出前几列\n  #Chr Pos Raw Depth Rmdup depth Cover depth\rchrM 650 8 6 8\rchrM 651 8 6 8\rchrM 652 8 6 8\rchrM 653 9 6 9\rchrM 654 9 6 9\rchrM 655 9 6 9\rchrM 656 9 6 9\rchrM 657 9 6 9\rchrM 658 9 6 9\r  region.tsv.gz：记录bed文件每个区域的测序深度中位数覆盖率以及Coverage(FIX)？？，由于example的bed只有一个区域，所以可以直接去除以那个区域长度得到目标区域测序深度。\n  depth_distribution.plot :深度分布图，可以结合R绘图,如下，测序深度为9的有6个位点\n  0 900 0.943396 54 0.056604\r1 0 0.000000 54 0.056604\r2 0 0.000000 54 0.056604\r3 27 0.028302 27 0.028302\r4 4 0.004193 23 0.024109\r5 12 0.012579 11 0.011530\r6 1 0.001048 10 0.010482\r7 0 0.000000 10 0.010482\r8 4 0.004193 6 0.006289\r9 6 0.006289 0 0.000000\r算下理解是否正确\n$ awk '{sum+=$2}END{print sum}' depth_distribution.plot\r954\r$ expr 1603 - 649\r954\r uncover.bed :没有捕获区域  $ cat example/MT-RNR1.bed\rchrM 649 1603\r$ cat uncover.bed\rchrM 672 1603\r可选参数 #方括号中为程序默认的参数值\r-f, --flank [200] flank n bp of each region\r-q [20] map quality cutoff value, greater or equal to the value will be count\r--maxdepth [0] set the max depth to stat the cumu distribution.\r--cutoffdepth [0] list the coverage of above depths\r--isize [2000] stat the inferred insert size under this value\r--uncover [5] region will included in uncover file if below it\r--bamout BAMFILE target reads will be exported to this bam file\r-1 begin position of bed file is 1-based\r-h, --help print this help info\r  Sims, D., Sudbery, I., Ilott, N. et al. Sequencing depth and coverage: key considerations in genomic analyses. Nat Rev Genet 15, 121–132 (2014) doi:10.1038/nrg3642\u0026#8617;\n  ","date":"2019-12-17T10:56:40Z","permalink":"https://liripo.github.io/post/bamdst%E4%BD%BF%E7%94%A8/","tags":"生信基础工具","title":"bamdst使用"},{"content":"","date":null,"permalink":"https://liripo.github.io/tags/git/","tags":null,"title":"Git"},{"content":"Github在线教程【第一版】 Github在线教程【第二版】 以下为我自己的总结\n在Github网址上如何申请账号，建立仓库以及Git的下载就不赘述了，我的hexo搭建博客有。\n配置用户信息 初次使用Git请配置好用户信息，详细可看初次运行 Git 前的配置\ngit config --global user.name \u0026#34;Liripo\u0026#34;\rgit config --global user.email liripo@qq.com\r#--global参数是在用户主目录下生成.config文件，如果某个仓库想用其他用户信息，可去掉--global，在项目根目录下生成.git/config文件[一般我想用不到吧]\rgit config --list\r#查看配置信息\r配置SSH密匙 https 和 SSH 的区别：\n https可以随意克隆github上的项目，而不管是谁的；而SSH则是你必须是你要克隆的项目的拥有者或管理员，且需要先添加 SSH key ，否则无法克隆。 https url 在push的时候是需要验证用户名和密码的；而 SSH 在push的时候，是不需要输入用户名的，如果配置SSH key的时候设置了密码，则需要输入密码的，否则直接是不需要输入密码的。 详细教程可看my blog的Hexo搭建 创建命令  ssh-keygen -t rsa -C \u0026quot;your_email@example.com\u0026quot;\rGithub项目 单人作业 单人的代码管理，理解一下几个命令就足够了\ngit clone \u0026lt;path/to/repository\u0026gt; # 版本库的地址\rgit add \u0026lt;filename\u0026gt; # 将文件改动保存到缓存区\rgit commit -m \u0026#34;代码提交信息\u0026#34;\rgit push origin master # 将改动推送到版本库,Github默认分支master\r多人协作 git checkout -b \u0026lt;branchname\u0026gt; # 新建一个分支，分支没有merge 成功前只有自己可见\rgit push origin \u0026lt;brachname\u0026gt; # 将项目改动提交到分支\rgit checkout master # 切换到主分支,即master\rgit checkout -d \u0026lt;branchname\u0026gt; # 删除分支\rgit merge \u0026lt;branchname\u0026gt; # 合并分支\rgit branch -a #查看所有分支\rgit pull # 更新本地仓库至最新改动\r版本控制 查看提交历史\ngit log\rgit reflog\r以我博客为例 git reflog\n0098662 (HEAD -\u0026gt; master, github/master) HEAD@{0}: commit: Backup blog\r102f7cf HEAD@{1}: commit: Backup blog\r372f0ed HEAD@{2}: commit: Backup blog\r4949fbb HEAD@{3}: commit: Backup blog\r950b0de HEAD@{4}: commit: Backup blog\r49fa595 HEAD@{5}: commit: Backup blog\rc766121 HEAD@{6}: commit: Backup blog\r8c5d216 HEAD@{7}: commit (initial): First commit\r版本回退至commit id\u0026ndash;上面如：0098662即为我最新提交版本的MD5值前几位\ngit reset --hard \u0026lt;commit_id\u0026gt;\r#回退上个版本\rgit reset --hard HEAD^\r#回退到上上个版本只需把HEAD^ 改成 HEAD^^ 以此类推\r#或者git reset –hard HEAD~\u0026lt;回归次数\u0026gt;\r本地版本回归，强制推送，==谨慎使用==\ngit push -f origin master\r#origin远程仓库名\r制用本地的代码去覆盖掉远程仓库的代码,用它是为了便捷。。。\nGit命令速查表 本地仓库操作\n   命令 功能     git config –global user.email your_email 设置git email (必须设置)   git config –global user.name your_name 设置git name (必须设置)   git init 将目录变为仓库   git add FILE 将文件或目录加到缓存区   git commit –m \u0026ldquo;Description\u0026rdquo; 提交更改 并注释做了什么更改   git status 可以查看当前仓库的状态，是否有变化等   git diff 查看文件的不同   git diff HEAD~n \u0026ndash; file 查看和版本库中的同一个文件有什么不同   git reset \u0026ndash;hard commit_id 将工作区恢复到commit_id指定的版本库内的版本   git log 可以查看提交历史，以便确定要回退到哪个版本   git reflog 查看命令历史，以便确定要回到未来的哪个版本。   git add 添加到缓存区   git commit 提交变更到版本库   git checkout \u0026ndash; file 可以丢弃工作区的修改（没有\u0026ndash; 就是创建一个分支）   git reset HEAD file 放弃缓存区的更改   git rm 然后git commit 删除版本库内的相关文件   git checkout -b 分支名 创建并转到新分支上   git merge 分支名 合并分支   git branch -d 分支名 删除分支   git log \u0026ndash;graph 查看合并图   git stash 可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作：   git stash list 查看被存起来的工作   git stash pop 恢复并删除stash藏起来的工作   git tag name 用于新建一个标签，默认为HEAD，也可以指定一个commit id   git tag -a tagname -m \u0026ldquo;blablabla\u0026hellip;\u0026rdquo; 可以指定标签信息；   git tag -s tagname -m \u0026ldquo;blablabla\u0026hellip;\u0026rdquo; 可以用PGP签名标签；   git tag 可以查看所有标签。   git tag -d 删除一个标签   git rebase HEAD~2 合并两个commit    远程仓库操作\n   命令 功能     git add remote origin git@host:repo.git 建立和远程仓库的连接   git push -u origin master 完成远程仓库的创建   git push origin master 用来推送最新修改   git clone 从远程克隆至本机   git remote -v 查看远程库信息   git push \u0026ndash;set-upstream gitname develop 设置向远程推送的分支   git push origin tagname 在远程产生一个release版本   git push origin :refs/tags/v0.9 远程删除标签    GIT FLOW操作(标准化软件开发流程)\n   命令 功能     cd /git/cloned_repo 进入克隆仓库   git checkout -b develop origin/develop 初始化版本流程控制（得到远程服务器develop）   git flow init 初始化工作目录(一直回车即可)   git flow feature start editimage 开始创建新的需求分支,目的修改image; 这时项目会自动切换feature/editimage分支   git flow feature finish editimage 更改部分代码后   git commit -a -m \u0026ldquo;修改完了\u0026rdquo;(-a 参数表示提交所有更改了的文件，但是不适用于新创建的文件) 完成开发分支合并develop(自动)   git push origin develop 发布到远程开发分支   git flow release start v0.7.0 开始进行发布版本的准备工作（develop -\u0026gt; master分支）   git flow release finish v0.7.0 进行Merge以及打tag   git push origin master 将发布版本推送至远程    Git flow 紧急BUG流程\n   命令 功能     git pull origin release/v1.0 拉回release版本   git checkout release/v1.0 切换分支   git push origin release/v1.0 修改BUG   git commit -a -m \u0026ldquo;修改完BUG,BUG文件+行数\u0026rdquo; 修改完后提交   ","date":"2019-12-13T10:31:55Z","permalink":"https://liripo.github.io/post/github%E5%8F%8Agit%E4%BD%BF%E7%94%A8/","tags":"Git","title":"Github及Git使用"},{"content":"描述性统计量  为了解决某个问题，我们通常会观察一组和该问题相关的样本，利用总体中的部分样本来推断总体的情况进而得到相关结论。在通过样本推断总体前，首先需用对已有样本数据进行简单的评估和描述，针对这一需求也就引出了描述统计量这一概念。进行描述性统计时，我们最关注数据两个层面的问题：数据的集中趋势和变异分散性。\n 数据的集中趋势 均值 中位数 众数 在R中，均值和中位数可以通过mean()和median()进行计算,而众数可以画直方图，modeest包mfv()函数，或者自己写个函数\n数据的变异性（离散性） 极值 分位数 方差 标准差 在R中，可以通过quantile()计算分位数，通过var()来计算方差，通过sd()来计算标准差。 变异系数(CV):变异系数是指样本标准差除以均值再乘100%——区分两个样本标准差相同但是均值相差很大的情况。 summary()函数会得到一个data frame 的很多 描述性统计量。当数据某一列是数值型变量时，可以得到该列数据的均值、极值、方差和分位数。\n形象化展示 形象化展示：用图来展示数据结果，比较常见的方法有条形图，箱线图，直方图等展示上述的统计量。\n概率知识点 统计学中大量内容源于概率，其中尤为重要的是条件概率，以及延伸出的贝叶斯定理。 样本空间 事件\n条件概率与贝叶斯定理 用两个事件来尝试理解 **条件概率(Conditional Probability)**用来描述与其他事件的发生相关的某事件的概率；P(A|B)是指在B发生的情况下A发生的概率。 条件概率计算公式:即AB同时发生的次数除以所有B发生的次数。 $$ P(A|B)=\\frac{P(A\\cap B)}{P(B)} $$ 差个题外话，倘若A、B为相互独立事件，则： $$ P(A|B)=\\frac{P(A\\cap B)}{P(B)}=\\frac{P(A)\\times P(B)}{P(B)}=P(A) $$\n即用条件概率公式反证明事件 A 发生的概率与 B 无关。\n条件概率公式推导出乘法公式：【其中$P(A\\cap B)$可以写作P(AB)】\n$P(A|B)=\\frac{P(A\\cap B)}{P(B)}$ =\u0026gt; $P(A\\cap B)=P(B)\\times P(A|B)=P(A)\\times P(B|A)$\n全概率公式：$\\overline{A}$为A的对立事件 $$ P(B)=P(A)\\times P(B|A)+P(\\overline{A})\\times P(B|\\overline{A}) $$\n通过全概率公式与条件概率，乘法公式，可以推导出贝叶斯定理： $$ P(A|B)=\\frac{P(A\\cap B)}{P(B)}=\\frac{P(A)\\times P(B|A)}{P(B)}=\\frac{P(A)\\times P(B|A)}{P(A)\\times P(B|A)+P(\\overline{A})\\times P(B|\\overline{A})} $$\n P(A)是A的先验概率。之所以称为\u0026quot;先验\u0026quot;是因为它不考虑任何B方面的因素。 P(A|B) 由于得自B的取值而被称作A的后验概率。 P(B|A) 由于得自A的取值而被称作B的后验概率。 P(B)是B的先验概率，也作标准化常量。 其中 $\\frac{P(B|A)}{P(B)} $又称为“可能性函数”, 这是一个调整因子，使得预估概率更接近真实概率 。  最初贝叶斯本人的论文1只是尝试“逆概率”问题的求解。而现在凡是需要作出概率预测的地方都可以见到贝叶斯定理的影子。\n当数据较弱时，那么先前对事物的认知是重要的。\n贝叶斯定理的一个著名用途是假阳性和假阴性。比如艾滋病检查，肝癌检查等。\n 某地区肝癌发病率为0.0004，现用甲胎蛋白法进行普查。已知患有肝癌的人其结果99%为阳性，而没患肝癌的人其化验结果99.9%呈阴性，现某人检查结果为阳性，求其真的患肝癌概率是多少？\n 解 令A为“被检查者患有肝癌”，B为“检查结果呈阳性”，由题可知：\n我们求的是检查结果为阳性，其换肝癌的概率P(A|B)；\n即先验概率P(A)=0.0004 ；后延概率患肝癌的人其检查结果为阳性概率P(B|A)=0.99；\n题中P(B)，即这个地区检查结果呈阳性的先验概率并没有直接给出，但是给出了没患肝癌的人其检查结果为阴性概率$P(\\overline{B}|\\overline{A})$=0.999,则$P(B|\\overline{A})$=1-0.999=0.001;$P(\\overline{A})$=1-0.0004=0.9996则： $$ P(A|B)=\\frac{P(A)\\times P(B|A)}{P(B)} $$ $$ =\\frac{P(A)\\times P(B|A)}{P(A)\\times P(B|A)+P(\\overline{A})\\times P(B|\\overline{A})}=\\frac{0.00040.99}{0.00040.99+0.9996*0.001} $$ 结果为0.284；【注：对于这个问题尝试假设这个地区有10000个人的话就会很好理解了，概率太绕了。】\n那么，二次检查时，某地区对象群体患肝癌概率可以看作0.284了，由于技术条件不变，则复检概率检查阳性真的患肝癌概率为0.997。\n思考：那么初检为阴性其真不患病的概率？\n贝叶斯定理的简单理解先这样吧。\n概率分布 相关概念  研究一个随机变量，不只是要看它能取哪些值，更重要的是它取各种值的概率如何！\n 随机变量 分布函数 总体均值 总体方差 概率密度函数(probability density function, pdf)\n累加分布函数或者累计概率函数:a点上的值等于随机变量X取值$\\leq a$的概率，即是概率密度函数a左边曲线下的面积。 数学期望：对于离散型随机变量而言，倘若每个取值X的概率不是相同的，使用算术平均作为均值是不妥的，应当使用加权平均，从而引出了数学期望的概念，简称“期望”或“均值”。\n常见连续概率分布 正态分布\n均匀分布\n贝塔分布\n学生t分布\nF分布\n常见的离散概率分布 几何分布\n二项分布\n泊松分布\n  An essay towards solving a problem in the doctrine of chances\u0026#8617;\n  ","date":"2019-12-09T20:52:23Z","permalink":"https://liripo.github.io/post/r%E4%B8%8E%E7%94%9F%E7%89%A9%E7%BB%9F%E8%AE%A1%E5%AD%A6/","tags":"统计学","title":"R与生物统计学"},{"content":"","date":null,"permalink":"https://liripo.github.io/tags/%E7%BB%9F%E8%AE%A1%E5%AD%A6/","tags":null,"title":"统计学"},{"content":"spyder3 spyder github网址,其提供的安装方法有多种，官方强推anaconda,确实我本人也喜欢使用，anaconda同时还创建了虚拟环境，使得我在linux使用各种软件如R、python等不需要过多的权限。miniconda是缩过之后的anaconda，没有那么多额外的软件，但也是可以使用虚拟环境的。 windows下简单使用pip install spyder安装即可，打开方式为在命令行中键入：spyder3 汉化spyder3 SpyderSimplifiedChinese-master下载解压后，到根目录使用shift键点击鼠标右键打开命令行窗口或者powershell;运行python main.py 或者python .\\main.py; 重启Spyder,选择Tools\u0026mdash;Preferences\u0026mdash;General\u0026mdash;Advanced Settings\u0026mdash;language\u0026mdash;\u0026ndash;简体中文；\nanaconda anaconda有必要同时说下。 Anaconda可以便捷获取包且对包能够进行管理，同时对环境可以统一管理的发行版本。Anaconda包含了conda、Python在内的超过180个科学包及其依赖项。推荐 不需要那么多可以使用Miniconda。\n   Anaconda 其包含的科学包包括：conda, numpy, scipy, ipython notebook等。     conda 包及其依赖项和环境的管理工具,适用于Python, R, Ruby, Lua, Scala, Java, JavaScript, C/C++, FORTRAN   pip pip是用于安装和管理软件包的包管理器   virtualenv 用于创建一个独立的Python环境的工具。    conda:仅需要几条命令，你可以创建一个完全独立的环境来运行不同的Python或者其他语言的版本。 安装过程中，会有将conda加入环境变量的提示，当然，忘记加入时可以手动添加。conda的位置windows版本是在安装根目录下的scripts目录下。 conda命令 conda list会显示已经安装的包名和版本号。 anaconda-navigator启动anaconda图形界面。 conda update conda更新conda 创建新环境\nconda creante -n \u0026lt;env_name\u0026gt; \u0026lt;you==版本\u0026gt;\r\u0026lt;env_name\u0026gt;即创建的环境名。建议以英文命名，且不加空格。名称两边不加尖括号“\u0026lt;\u0026gt;”。 \u0026lt;you==版本\u0026gt;即安装在环境中的包名或者语言的版本。名称两边不加尖括号“\u0026lt;\u0026gt;”。 例如：conda creante -n liaorp python==3.7 conda info --e查看所含有的环境，环境前的*表明当前身处的环境。或者conda info --envs``conda env list 切换环境 linux下conda activate env_name，gitbash下source activate env_name,windowsactivate env_name conda deactivate退出环境； 查找及安装包，模块，语言 conda search r或者conda search pysam搜索conda中含有的包或者语言版本 conda install r=3.6.1即下载\n#精准查找\rconda search --full-name \u0026lt;package_full_name\u0026gt;\r#指定环境下载\rconda install --name \u0026lt;env_name\u0026gt; \u0026lt;package_name\u0026gt;\r#复制环境\rconda create --name \u0026lt;new_env_name\u0026gt; --clone \u0026lt;copied_env_name\u0026gt;\r#删除环境\rconda remove --name \u0026lt;env_name\u0026gt; --all\r换清华镜像源\nconda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/\rconda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/\r# 设置搜索时显示通道地址\rconda config --set show_channel_urls yes\rlinux下，可less ~/.condarc\n","date":"2019-11-25T20:35:16Z","permalink":"https://liripo.github.io/post/conda/","tags":"software","title":"conda"},{"content":"","date":null,"permalink":"https://liripo.github.io/tags/software/","tags":null,"title":"software"},{"content":"","date":null,"permalink":"https://liripo.github.io/tags/sed/","tags":null,"title":"sed"},{"content":" sed 命令是一个面向行处理的工具，它以“行”为处理单位，针对每一行进行处理。与awk不同，awk是以”列“为处理单位[当然，awk也是一行行进行处理的]。 在线教程\n sed命令格式\n sed [options] \u0026lsquo;command\u0026rsquo; file(s) sed [options] -f scriptfile file(s)\n 工作流 读取： SED从输入流（文件，管道或者标准输入）中读取一行并且存储到它叫做 模式空间（pattern buffer） 的内部缓冲区\n执行： 默认情况下，所有的SED命令都在模式空间中顺序的执行，除非指定了行的地址，否则SED命令将会在所有的行上依次执行\n显示： 发送修改后的内容到输出流。在发送数据之后，模式空间将会被清空。\n\u0026ndash;help 中文帮助文档 选项： -i 参数可以直接对文件进行修改，虽然好用，但是记住你要知道你在干嘛 -n 参数使得sed不从模式空间输出，只有遇到如5p时，才输出第五行内容。 -e 多次使用sed 命令： p打印；d删除；s替换 g:全局性 ； i 忽略大小写\n#删除第一行，和最后一行\rsed -i -e \u0026#39;1d\u0026#39; -e \u0026#39;$d\u0026#39; 1.txt\r#打印1到2行\rsed \u0026#39;1,2p\u0026#39; 1.txt\r#删除所有空行\rsed \u0026#39;/^$/d\u0026#39; 1.txt\r#全局替换\recho \u0026#34;a,b,c,d\u0026#34; |sed \u0026#39;s/,/\\n/g\u0026#39;\r#试试下面这个\recho \u0026#34;a,b,c,d\u0026#34; |sed \u0026#39;s/,/\\n/g\u0026#39;|sed \u0026#39;s/\\n/,/g\u0026#39;\r#失败了，没有替换换行符。这跟sed的行处理方式有关，sed读取一行时，会先把换行符去掉，处理完后再添加上\r# 用tr命令\recho \u0026#34;a,b,c,d\u0026#34; |sed \u0026#39;s/,/\\n/g\u0026#39;|tr -t \u0026#39;\\n\u0026#39; \u0026#39;,\u0026#39;\r为了用sed处理换行符，使用标签跳转和N sed ':label;N;s/\\n/:/;b label' filenameb可以换成t :label;这是一个标签，用来实现跳转处理，名字可以随便取(label),后面的b label就是跳转指令 N是sed的一个处理命令，追加文本流中的下一行到模式空间进行合并处理，因此是换行符可见 比如fastq文件每四行为一个循环，我们提取序列行试试\nsed -n \u0026#39;1d;N;N;N;P;d\u0026#39; 1.fastq#删除第一行，追加后面三行，打印第二行，删除\r标签跳转和N的追加命令实现了每一行的不间断放入模式处理空间，从而不会漏掉每一个换行符。\necho \u0026#34;a,b,c,d\u0026#34; |sed \u0026#39;s/,/\\n/g\u0026#39;|sed \u0026#39;:x;N;s/\\n/,/;b x\u0026#39;#a,b,c,d\r$ echo \u0026#34;a,b,c,d\u0026#34; |sed \u0026#39;s/,/\\n/g\u0026#39;|sed \u0026#39;N;s/\\n/,/\u0026#39;\ra,b\rc,d\r看看这个命令\necho \u0026#34;a,b,c,d\u0026#34; |sed \u0026#39;s/,/\\n/g\u0026#39;|sed \u0026#39;s/$/,/\u0026#39;\ra,\rb,\rc,\rd,\r#你可以在最后替换时不使用管道而是重定向输入文件，cat -A 文件 就大概了解了\rsed中的n和~\nsed \u0026#39;8,80{n;n;n;d}\u0026#39; filename\r#从第8行起（包含），一次读取9/10/11行，然后读取11行后，执行d命令，就是删除处理空间中的第11行，之后从12行开始，读取13/14/15, 删除15行，以此类推，直到第80行。\rsed \u0026#39;11~4d\u0026#39; filename\r#实现同样效果，只是无法界定最后行数，读取直到文件结束。\rn表示读取文本流中的下一行到模式空间(N为追加)\n","date":"2019-11-11T19:41:39Z","permalink":"https://liripo.github.io/post/sed%E4%BD%BF%E7%94%A8/","tags":"sed","title":"sed使用"},{"content":"","date":null,"permalink":"https://liripo.github.io/tags/awk/","tags":null,"title":"awk"},{"content":"awk逐行读入文件，以空格为默认分隔符将每行切片，切开的部分再进行各种分析处理。 awk书籍github\n读取fa文件碱基数\ncat ref.fa|awk '/^\u0026gt;/\u0026amp;\u0026amp;NR\u0026gt;1{print \u0026quot;\u0026quot;;}{ printf \u0026quot;%s\u0026quot;,/^\u0026gt;/ ? $0\u0026quot; \u0026quot;:$0 }'|awk '{print $1\u0026quot;\\t\u0026quot;length($3)}'\rawk简单入门 运行一个awk 程序有多种方式. 可以键入下面这种形式的命令\nawk \u0026#39;program\u0026#39; input files\rawk帮助信息的example,计算第一列的和\ngawk \u0026#39;{ sum += $1 }; END { print sum }\u0026#39; file\r程序内容多时，将程序写入文件progfile，选择-f参数键入\nawk -f progfile optional list of files\rawk报错信息，错误的地方会被\u0026raquo;\u0026gt; \u0026laquo;\u0026lt; 标记。\n内建变量 $0\t当前记录（这个变量中存放着整个行的内容） $1-$n 当前记录的第n个字段，字段间由FS分隔 NF：awk 计算当前输入行的字段数量, 并将它存储在一个内建的变量中, 这个变量叫作NF。即为最后一列。或者说是字段。 NR：表示的是已经处理过的总记录数目，或者说行号(不一定是一个文件，可能是多个) FNR 当前输入文件的记录数目 FS 用来设置每一记录的字段分隔符号 OFS: 输出字段分隔符变量 RS 定义了一行记录。读取文件时，默认将一行作为一条记录。 ORS 条记录在输出时候会用分隔符隔开，默认换行符 FILENAME 表示当前正在输入的文件的名字。 ARGIND 当前文件在ARGV中的位置 ARGC 当前命令行参数个数 ARGV 包含命令行参数的数组 ENVIRON 当前shell环境变量及其值组成的关联数组 RLENGTH 由match函数所匹配的子字符串的长度 RSTART 由match函数所匹配的子字符串的起始位置\n内建函数 1.算术函数\n 字符串函数\n length() 获得字符串长度,例如：length($0) split() 将字符串按分隔符分隔，并保存至数组,如：split($0,arr,/:/) getline 从输入(可以是管道、另一个文件或当前文件的下一行)中获得记录，赋值给变量或重置某些环境变量。\u0026mdash;\u0026mdash;-很强大的命令 next 作用和getline类似，也是读取下一行并覆盖$0，区别是next执行后，其后的命令不再执行，而是读取下一行从头再执行 sub(regex,substr,string) 替换字符串string(省略时为$0)中首个出现匹配正则regex的子串substr gsub(regex,substr,string) 与sub()类似，但不止替换第一个，而是全局替换。 substr(str,n,m) 切割字符串str，从第n个字符开始，切割m个长度字符。如果m省略，则到结尾。 tolower(str)和toupper(str) 大小写转换 system(cmd) 执行shell命令cmd，返回执行结果，执行成功为0，失败为非0 match(str,regex) 返回字符串str中匹配正则regex的位置 index(string, substring) 函数返回子字符串第一次被匹配的位置，偏移量从位置1开始。如：awk \u0026lsquo;{ print index(\u0026ldquo;test\u0026rdquo;, \u0026ldquo;mytest\u0026rdquo;) }\u0026rsquo; testfile 结果为3\nawk \u0026ndash;help -f 可以传入脚本文件，但是无法与命令行程序一起使用 -F fs 指定分隔符 -v var=val 传入shell变量\nawk一行式实战 1.去重 awk '!a[$0]++{print $0}' input.file 判定!a[$0]++是未定义的，以$0为数据下标，建立数组a，且其值为空字符串“”或者0\u0026mdash;-此处执行++后数组被定义为int型，初始值就为0；遇到重复的行是，数组的下标相同，此时数组的value为0，执行++后，数组值为1，经取反后数组为0，action不执行【即不打印】；没有遇到重复的行，即a[$0]执行++后为0，而!0=1,1为真。 那么a[$0]还同时记录着重复数-1 2.awk 合并两个文件\u0026mdash;-假设文件只有两个字段，而判定条件均为第一个字段\nawk \u0026#39;NR==FNR{a[$1]=$2;next}NR\u0026gt;FNR{print $0,a[$1]}\u0026#39; b.txt a.txt\r 这里NR==FNR即判断第一个文件，因为读取第一个文件总行数等于当前文件记录行数，而a[$1]=$2,即是把当前文件的第一个字段作为数组下标，第二个字段作为数组的值value 当NR\u0026gt;FNR读取第二个文件，输出第二个文件所有字段，以第二个文件第一个字段为索引，取得相应的值。当然可以使用ARGIND==number判定读取的文件\n awk提取两个fastq.gz文件的UMI序列  #提取R1，R2文件使用bioawk,可惜bioawk -c无法使用awk内置变量\rbioawk -c fastx \u0026#39;{umi=substr($seq,1,3);seq_8 = substr($seq,8,length($seq));qual_8=substr($qual,8,length($qual))}{print \u0026#34;@\u0026#34;$name\u0026#34;_\u0026#34;umi\u0026#34;\\n\u0026#34;seq_8\u0026#34;\\n+\\n\u0026#34;qual_8}\u0026#39; NL190929-1C.R1.fastq.gz \u0026gt;R1.fastq\rbioawk -c fastx \u0026#39;{umi=substr($seq,1,3);seq_8 = substr($seq,8,length($seq));qual_8=substr($qual,8,length($qual))}{print \u0026#34;@\u0026#34;$name\u0026#34;_\u0026#34;umi\u0026#34;\\n\u0026#34;seq_8\u0026#34;\\n+\\n\u0026#34;qual_8}\u0026#39; NL190929-1C.R2.fastq.gz \u0026gt;R2.fastq\r#将R2中UMI提取到R1，以\u0026#34;_\u0026#34;为分隔符\rawk \u0026#39;(ARGIND==1 \u0026amp;\u0026amp; NR%4==1){split($0,a,\u0026#34;_\u0026#34;);b[i]=a[2];i++}(NR!=FNR \u0026amp;\u0026amp; FNR%4==1){print $0\u0026#34;\u0026#34;b[j];j++}(ARGIND==2 \u0026amp;\u0026amp; NR%4!=1){print $0}\u0026#39; R2.fastq R1.fastq \u0026gt;umi_R1.fastq\rawk \u0026#39;ARGIND==1 \u0026amp;\u0026amp; NR%4==1{name[i]=$0;i++}ARGIND==2 \u0026amp;\u0026amp; FNR%4==1{split($0,a,\u0026#34;_\u0026#34;);print name[j]\u0026#34;\u0026#34;a[2];j++}ARGIND==2 \u0026amp;\u0026amp; FNR%4!=1{print}\u0026#39; R1.fastq R2.fastq \u0026gt;umi_R2.fastq\r4.一行的fasta文件变成60bp碱基一行的fasta文件\nawk -v FS= \u0026#39;/^\u0026gt;/{print;next}{for (i=0;i\u0026lt;=NF/60;i++) {for (j=1;j\u0026lt;=60;j++) printf \u0026#34;%s\u0026#34;, $(i*60 +j); print \u0026#34;\u0026#34;}}\u0026#39; test.fa\r或者fold -w 60 test.fa\n5.多行的fasta文件合并为一行\ncat test_multiline.fa | awk \u0026#39;/^\u0026gt;/{if(N\u0026gt;0) printf(\u0026#34;\\n\u0026#34;); ++N; printf(\u0026#34;%s\\n\u0026#34;,$0);next;} {printf(\u0026#34;%s\u0026#34;,$0);}END{printf(\u0026#34;\\n\u0026#34;);}\u0026#39;\r","date":"2019-11-11T00:00:00Z","permalink":"https://liripo.github.io/post/awk/","tags":"awk","title":"awk"},{"content":"","date":null,"permalink":"https://liripo.github.io/tags/bash/","tags":null,"title":"bash"},{"content":"gitbash的好处是能在windows下使用bash命令以及自带vim编辑器。\n~/.vimrc配置文件代码\nset number\rset vb t_vb= \u0026quot;关警告声\rset nohlsearch\rhi Comment ctermfg =blue\rhi String ctermfg =darkyellow\rset showmatch \u0026quot;自动匹配相应括号\rhi Number ctermfg = green\r\u0026quot;hi MatchParen ctermbg=darkyellow guibg= white\r\u0026quot;自动缩进不好用 set autoindent\rhighlight Function cterm=bold\rhi Type ctermfg =blue\rset tabstop =4\rhi Special ctermfg = red\rhi Identifier cterm = bold \u0026quot; 变量标识符名称。\rhi Statement cterm = bold\r\u0026quot;\u0026quot;编程语言的声明，一般是像“if”或“while”这样的关键字。\rhi PreProc ctermfg = grey cterm=bold \u0026quot;预处理颜色,一般像R的library\rset paste #消除gitbash粘贴出现空格及自动缩进的情况\r~/.bashrc配置\nexport PATH=/d/R-3.6.1/bin/x64:$PATH\ralias python='winpty python.exe' #windows下打开python别名\rexport PS1=\u0026quot;\\\\liripo@windows:\\w\\$(__git_ps1 '(%s)')\\$ \u0026quot; #使用PS1\ralias lt='ll -th'\ralias le='less -N'\r","date":"2019-11-08T22:37:49Z","permalink":"https://liripo.github.io/post/gitbash%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/","tags":"bash","title":"gitbash配置文件"},{"content":"","date":null,"permalink":"https://liripo.github.io/tags/bios/","tags":null,"title":"Bios"},{"content":" 生信数据文件格式。\n vcf  Variant Call Format（VCF）:是一个用于存储基因序列突变信息的文本格式。可以表示单碱基突变, 插入/缺失, 拷贝数变异和结构变异等,即SNP, indel, 和 structural variation calls。通常是对BAM文件格式的比对结果进行处理得到的。BCF格式文件是VCF格式的二进制文件。\n 注释信息通常以##开头， 描述包括参考基因组版本，得到该VCF文件的命令，以及各个TAG解释缩写的简单描述等。\n以#开头为列名，\nCHROM 和 POS：代表参考序列名和variant的位置；如果是INDEL的话，位置是INDEL的第一个碱基位置。\rID：variant的ID。比如在dbSNP中有该SNP的id，则会在此行给出(这个需要自己下载dbSNP数据库文件进行注释才有的)。若没有或者注释不上，则用\u0026#39;.\u0026#39;表示其为一个novel variant。\rREF 和 ALT：参考序列的碱基 和 Variant的碱基。\rQUAL：Phred格式(Phred_scaled)的质量值，表示在该位点存在variant的可能性；该值越高，则variant的可能性越大；计算方法：Phred值 =-10*log (1-p) p为variant存在的概率;\rFILTER：使用上一个QUAL值来进行过滤的话，是不够的，使用其他方法过滤，过滤结果中通过则该值为”PASS”;若variant不可靠，则该项不为”PASS”或”.”。\rINFO： 这一行是variant的详细信息，内容很多，以下再具体详述。\rFORMAT 和 样品名列：这两行合起来提供了样品的基因型的信息。是由SAM/BAM文件中的@RG下的 SM 标签决定的。或者变异检测软件自己定义的。\r##第九，十列中\rGT:DP:VD:AD:AF:RD:ALD 0/1:322:61:261,61:0.1894:144,117:33,28\rGT：样品的基因型（genotype）。两个数字中间用’/\u0026lsquo;分开，这两个数字表示双倍体的sample的基因型。0 表示样品中有ref的allele； 1 表示样品中variant的allele； 2表示有第二个variant的allele。因此： 0/0 表示sample中该位点为纯合的，和ref一致； 0/1 表示sample中该位点为杂合的，有ref和variant两个基因型； 1/1 表示sample中该位点为纯合的，和variant一致。 DP（Depth）为sample中该位点的测序深度。 AD(Allele Depth)为sample中每一种allele的reads覆盖度，以逗号分割。\nbam/sam/cram bam:sam文件的二进制压缩文件，可使用samtools工具查看。由于其运行速度快，所以常常使用bam而不是sam。(B取自binary) sam:SAM是一种序列比对格式标准， 由sanger制定，是以TAB为分割符的文本格式。主要应用于测序序列mapping到基因组上的结果表示，当然也可以表示任意的多重比对结果。 当测序得到的fastq文件map到基因组之后，我们通常会得到一个sam或者bam为扩展名的文件。SAM的全称是sequence alignment/map format。\n详细可见\n对上述网址，我记录我需要用又常忘记的，必须的字段有11个，顺序固定，不可自行改动 ，因为变异检测基本是靠这些列的信息。\nQNAME，比对片段的（template）的编号；比较常用的叫法是queryname\rFLAG，位标识，template mapping情况的数字表示，每一个数字代表一种比对情况，这里的值是符合情况的数字相加总和；\rRNAME，参考序列的编号，如果注释中对SQ-SN进行了定义，这里必须和其保持一致，另外对于没有mapping上的序列，这里是’*‘；\rPOS，比对上的位置，注意是从1开始计数，没有比对上，此处为0；\rMAPQ，mapping的质量;\rCIGAR，简要比对信息表达式,\r“M”表示 match或 mismatch；\r“I”表示 insert；\r“D”表示 deletion；\r“N”表示 skipped（跳过这段区域）；\r“S”表示 soft clipping（被剪切的序列存在于序列中）；\r“H”表示 hard clipping（被剪切的序列不存在于序列中）；\r“P”表示 padding；\r“=”表示 match；\r“X”表示 mismatch（错配，位置是一一对应的）；\rCRAM:\nfastq/fasta fastq 一种存储了生物序列（通常是核酸序列）以及相应的质量评价的文本格式。\n第一行@开头，接描述信息，4为flowcell第四个lane？1：N：0:后面是index?\r第二行为序列信息，N代表A\\T\\G\\C,即any,用处？\r第三行为+开头，后面也可接描述信息\r第四行为为第二行测序质量评价，字节数与第二行相等。Q=10*log10(p/(1-p))，其中p是对应碱基判定的概率。\r fastq to fasta  zcat input.fastq.gz | awk \u0026#39;NR%4==1{printf \u0026#34;\u0026gt;%s\\n\u0026#34;, substr($0,2)}NR%4==2{print}\u0026#39; \u0026gt; output.fa\r 统计序列条数(reads)  zcat *R1.fq.gz |grep \u0026#39;@\u0026#39;| wc –l或者zcat *.fastq.gz | awk \u0026#39;NR%4==2{c++} END{print c}\u0026#39;\r或者pigz -dc input.fastq.gz | awk \u0026#39;NR%4==2{c++} END{print c}\u0026#39;（速度快10倍）\r GC含量及碱基数目  perl -ne \u0026#39;if($.%4){chomp;$count_G=$count_G+($_=~tr/G//);$count_C=$count_C+($_=~tr/C//);$cur_length=length($_);$total_length+=$cur_length;}END{print qq{total count is $total_length bp\\nGC%:},($count_G+$count_C)/$total_length,qq{\\n} }\u0026#39; input.fq\rfasta 是一种基于文本用于表示核酸序列或多肽序列的格式。其中核酸或氨基酸均以单个字母来表示，且允许在序列前添加序列名及注释。\ngtf/gff3/GenePred 以gencode下人类的gtf文件为例，手册页https://www.gencodegenes.org/pages/data_format.html有详细的格式说明。\nGENCODE和Ensembl数据库均提供具有基因组坐标的GTF / GFF3文件，但不提供BED文件。\n gtf to bed\n gtf转bed,如果你想要提取基因的bed文件，可以根据第三列筛选gene，之后再获取需要的信息，其中基因名，比如gene symbol信息存在第九列。\ngrep -P \u0026#34;\\tgene\\t\u0026#34; gencode.xxxxxx.gtf | \\  #第三列筛选gene，(或者transcripts之类的)\rcut -f1,4,5,7,9 | \\  #提取所需列\rsed \u0026#39;s/[[:space:]]/\\t/g\u0026#39; | \\ #空格替换制表符\rsed \u0026#39;s/[;|\u0026#34;]//g\u0026#39; | \\  #去掉；”\rawk -F $\u0026#39;\\t\u0026#39; \u0026#39;BEGIN { OFS=FS } { print $1,$2-1,$3,$6,\u0026#34;.\u0026#34;,$4,$10,$12,$14 }\u0026#39; | \\ #bed文件起始位置从0开始，需要减一，这里你可以选择你需要的列，一般前三列加个gene symbol那一列就够了。\r\u0026gt;genecode_by_gene.txt\r在R中操作 rtracklayer包(R的基因组浏览器接口)\n将gtf在R中转为数据框进行筛选。[或者直接对*GenomicRanges*对象进行操作]\ngtf \u0026lt;- rtracklayer::import(\u0026#34;xxxxxxxx.gtf\u0026#34;)\rlibrary(tidyverse)\rgtf %\u0026gt;% as_tibble() %\u0026gt;% filter(type == \u0026#34;gene\u0026#34;) %\u0026gt;% mutate(start = start -1) %\u0026gt;%\rselect(1:3,gene_id,gene_name) %\u0026gt;% write_tsv(\u0026#34;xxx.bed\u0026#34;)\r注：在R中将gtf制作成TxDb对象进行操作也可以。\n gtf跟gff3,GenePred互相转换\n 这三个文件本质包含相同内容，GenePred table格式主要用在基因浏览器中基因预测的track。而且GenePred table格式也是从0开始，跟bed文件一样。可以使用gtftogenepred工具。\nbed  bed:通过规定行的内容来展示注释信息,以\\t为分隔符。\n # BED文件必须的3列:\r1.chrom - 染色体号; 例如，chr1，chrX……\r2.chromStart - feature在染色体上起始位置.染色体上第一个碱基位置标记为0。\r3.chromEnd - feature在染色体上终止位置。染色体上前100个碱基片段的位置位置标记为：chromStart=0, chromEnd=100。 实际上，第101个碱基不属于当前片段中，当前片段的碱基应该是0-99。所以在BED文件中，起始位置从0开始，终止位置从1开始。\r# BED文件可选的9列:\r4.name - BED行名\r5.score - 在基因组浏览器中显示的灰度设定，值介于0-1000；\rgray score\r6.strand - 正负链标记. Either \u0026quot;.\u0026quot; (=no strand) or \u0026quot;+\u0026quot; or \u0026quot;-\u0026quot;.\r7.thickStart - feature起始位置(for example, the start codon in gene displays)\r8.thickEnd - feature编码终止位置 (for example the stop codon in gene displays)\r9.itemRgb - R,G,B (e.g. 255,0,0)值，当itemRgb 设置为 \u0026quot;On\u0026quot;，BED的行会显示颜色.\r10.blockCount - blocks (exons)数目.\r11.blockSizes - blocks (exons)大小列表，逗号分隔，对应于blockCount.\r12.blockStarts -blocks (exons)起始位置列表，逗号分隔，对应于blockCount.；这个起始位置是与chromStart的一个相对位置。\r其他名词 variant:突变体 call,calling:识别 transcript variant 是可变剪接体，是由DNA转录得到的,mRNA包含若干外显子,经过剪接组合成不同长度的mRNA,翻译成不同长度蛋白质.这种由同一基因不同外显子组成的序列称可变剪接体，不同可变剪接体表达的蛋白作用可能相近也可能相反。\nChr: 变异所在的染色体\rStart: 变异在染色体的起始位置\rEnd: 变异在染色体的终止位置\rRef: 基因组的参考序列\rAlt: 检测样本的基因组序列\rFunc.refGene: 变异所处参考基团的功能区（exonic,intronic,UTR3,UTR5,splicing,upstream,downstream,intergenic）此处的exonic特指外显子编码氨基酸区，不包含外显子的UTR区\rGene.refGene: 变异所处参考基因名称（如果是基因间，则是两侧的基因）\rGeneDetail.refGene： 非外显子区处于特定转录本中的具体位置（如果是基因间，则是距离两侧的基因的距离）\rExonicFunc.refGene： 外显子的变异类型（frameshift insertion/frameshiftdeletion/stopgain/stoploss/nonframeshift insertion/nonframeshiftdeletion/synonymous SNV/nonsynonymous SNV）或者”.”则说明该变异不在外显子区\rAAChange.refGene：氨基酸水平的改变（同一个基因可能具有多个转录本，氨基酸改变的位置在不同的转录本中可能不一样）\ravsnp150：dbsnp150 缩写，具有等位基因分裂和左标准化\r1000g2015aug_eas：1000个基因组项目数据集，其中东亚群体的等位基因频率\rgnomAD_exome_ALL：该变异在gnomAD数据库中的多个群体的全外显子组序列数据（频率）\rgnomAD_exome_EAS：该变异在gnomAD数据库中的东亚的多个群体的全外显子组序列数据（频率)\rhet：杂合；hom: 纯合；Pathogenic: 致病的;\r","date":"2019-11-08T00:00:00Z","permalink":"https://liripo.github.io/post/%E7%94%9F%E4%BF%A1%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F%E6%B1%87%E6%80%BB/","tags":"Bios","title":"生信文件格式汇总"},{"content":"","date":"2019-11-03T19:04:42Z","permalink":"https://liripo.github.io/post/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0/","tags":"统计","title":"概率论与数理统计学习"},{"content":"","date":null,"permalink":"https://liripo.github.io/tags/%E7%BB%9F%E8%AE%A1/","tags":null,"title":"统计"},{"content":"","date":null,"permalink":"https://liripo.github.io/tags/hexo/","tags":null,"title":"hexo"},{"content":"准备工作：安装node.js,git,hexo,加上github账户即可。 hexo官方文档 什么是Github Page\n 备注：以下前面为hexo在git for windows的配置安装，前三个标题推荐改为使用WSL\u0026gt;安装，linux子系统安装后可看这篇章的标题\u0026ndash;在WSL中手动安装node,hexo，之后再按照第三个标题相关配置往下进行。\n [toc]\nnode.js 安装 node下载链接,按需安装即可。\ngit下载链接，若是官网下载网速不行，可mail to me,传百度云链接。 安装完成后，可以在菜单栏看到Git GUI Here 和 Git Bash Here两个选项。打开gitbash输入命令行，有版本信息即可。\ngit --version node -v npm -v\r安装hexo 在gitbash中，命令行使用与linux相似，可选择一个磁盘，新建一个目录，如（/d/github.io）,cd 到该文件夹下使用npm命令。\nnpm install hexo-cli -g #安装hexo npm install hexo-deployer-git --save #表示安装 hexo 部署到 git page 的 deployer\r初始化一个blog,可使用hexo init直接在当前目录初始化，亦可hexo init blog这样新建一个文件夹。 本地查看效果,cd 到初始化的文件夹下，执行以下命令，登录http://localhost:4000/\nhexo g\rhexo s\r假如4000的端口被占用，可使用hexo g -p 4001,hexo s 后访问相应端口即可。 gitbash最后会显示如下信息说明操作成功。\nINFO Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.\r将博客n部署到github page 到目前为止，我们的本地博客就成功搭建了，但是现在我们只能通过本地连接查看博客，我们要做的是让其他人也能够访问我们的博客，这就需要我们将博客部署到Github Pages上。 githubsign up 注册账户。 点击New repository开始创建，步骤及注意事项见下图点击 New repository 开始创建，如下图。 之后创建一个仓库名如(Liripo.git.io)，我的github账户名为Liripo。\n配置ssh密钥 只有配置好 SSH 密钥后，我们才可以通过 git 操作实现本地代码库与 Github 代码库同步，新建文件夹（如mkdir ~/.ssh）,cd ~/.ssh, Git Bash 输入以下命令：\nssh-keygen -t rsa -C \u0026quot;your email@example.com\u0026quot; //引号里面填写github的注册邮箱，比如我的是liripo@qq.com\r接着出现\nGenerating public/private rsa key pair. Enter file in which to save the key (/c/Users/you/.ssh/id_rsa): //到这里可以直接回车将密钥按默认文件进行存储\r然后\n Enter passphrase (empty for no passphrase): //这里是要你输入密码，其实不需要输什么密码，直接回车就行 Enter same passphrase again: 最终屏幕显示如下信息：\nYour identification has been saved in /c/Users/you/.ssh/id_rsa. Your public key has been saved in /c/Users/you/.ssh/id_rsa.pub. The key fingerprint is: 这里是各种字母数字组成的字符串，结尾是你的邮箱 The key's randomart image is: 这里也是各种字母数字符号组成的字符串\r运行命令 $ clip \u0026lt; ~/.ssh/id_rsa.pub，将公钥的内容复制到系统粘贴板上;或者less查看并复制 ~/.ssh/id_rsa.pub\n在GitHub上添加你的公钥 ① 登陆 GitHub，进入 Settings； ② 点击 SSH and GPG Keys； ③ 选择 New SSH key； ④ 粘贴密钥；#备注：tittle随意填。 输入以下命令：注意：git@github.com不要做任何更改！\nssh -T git@github.com\r之后显示的内容，输入yes即可。 出现successfully字样即是成功，不必管其他的。\n配置git个人信息 Git 会根据用户的名字和邮箱来记录提交，GitHub 也是用这些信息来做权限的处理，输入以下命令进行个人信息的设置，把名称和邮箱替换成你自己的，名字可以不是 GitHub 的昵称，但为了方便记忆，建议与 GitHub 一致。\ngit config --global user.name \u0026quot;此处填你的用户名\u0026quot; git config --global user.email \u0026quot;此处填你的邮箱\u0026quot;\r到此为止 SSH Key 配置成功，本机已成功连接到 Github。\n将本地的 Hexo 文件更新到 Github 的库中 cd 到刚刚hexo 初始化的目录下，配置*_config.yml*这个文件 github可以使用vim 编辑其，输入vim _config.yml,使用shift +g 快捷键到行尾，找到deploy字样。\n# Deployment\r## Docs: https://hexo.io/docs/deployment.html\rdeploy:\rtype: git\rrepo: git@github.com:Liripo/Liripo.github.io\rbranch: master\rrepo处的Liripo修改成d你的用户n名即可。\n将本地修改的blog部署到GitHub上 第一次部署，输入命令安装deployer\nnpm install hexo-deployer-git --save\r之后使用\nhexo d -g\r即是部署到github上，可以到https://github.com/Liripo/Liripo.github.io（Liripo修改成你的账户）查看更新状态，亦可以到http://liripo.io上查看你的博客。 但是这样你的博客也没有那么快响应，可以将步骤拆分开来\nhexo g #生成静态页面\rhexo s #本地查看\rhexo d #部署上去\r新建文章可以使用如hexo n \u0026quot;hallo world\u0026quot;的命令快速在source/_posts下生成一个halloworld.md的文件，你可以使用vim编辑这个文件，这个文件使用markdown语法书写。 当然，markdown语法也可以使用如Typora支持markdown的编辑器，之后将写的文件以.md保存在your/path/to/blog_source/_posts里面即可。 还有一点值得注意，\nhexo g\u0026amp;\u0026amp;hexo s\u0026amp;\u0026amp;hexo d\r需要在你初始化的那个目录下使用。\n博客备份 使用hexo-git-backup 插件备份 Hexo 版本是 3.x.x，则使用以下命令安装：npm install hexo-git-backup --save 这里不在github.io下新建分支，而是新建了一个储存库hexo 到 Hexo 博客根目录的 _config.yml 配置文件里添加以下配置：\nbackup:\rtype: git\rtheme: next\rmessage: Backup blog\rrepository:\rgithub: git@github.com:Liripo/hexo.git,master\rcoding: git@git.dev.tencent.com:Liripo/hexo.git,master\r-theme：你要备份的主题名称 -message：自定义提交信息 -repository：仓库名，注意仓库地址后面要添加一个分支名，比如我就创建了一个 backup 分支 到此即可使用命令hexo backup或者hexo b备份博客了。\nhexo及next主题优化 这里便不多作介绍了，参考网址\nhexo文章加密 使用插件hexo-blog-encrypt即可，可在hexo插件中心或者github上的源代码获得。 安装可使用npm安装npm install --save hexo-blog-encrypt 在站点配置文件启用插件_config.yml，随意找个位置即可：\nencrypt:\renable: true\rabstract: 这是一篇加密文章，想查看的话请发我邮箱联系。\rmessage: password\r需要加密的文章加入\u0026quot;password\u0026quot;字段即可\n---\rtitle: Hello World\rdate: 2016-03-30 21:18:02\rpassword: hello world\r---\r高级设置可以看github上的Readme。\npicgo+github构建markdown图床 建立一个Github仓库后在setting里生成一个token,如我的为a9717fe783682d0ddb3354f23ecc4aacbc2d9cf0 下载picgo 配置,如图所示即可，注意/Liripo/blogphoto记得更换： 不过图片显示不稳定，本人换成了腾讯云cos。\n我的博客环境 hexo --version\nhexo: 4.0.0\rhexo-cli: 3.1.0\ros: Windows_NT 10.0.17763 win32 x64\rnode: 12.13.0\rv8: 7.7.299.13-node.12\ruv: 1.32.0\rzlib: 1.2.11\rbrotli: 1.0.7\rares: 1.15.0\rmodules: 72\rnghttp2: 1.39.2\rnapi: 5\rllhttp: 1.1.4\rhttp_parser: 2.8.0\ropenssl: 1.1.1d\rcldr: 35.1\ricu: 64.2\rtz: 2019a\runicode: 12.1\r查看依赖包,cat hexo 目录下的 package.json 文件cat package.json\n{\r\u0026quot;name\u0026quot;: \u0026quot;hexo-site\u0026quot;,\r\u0026quot;version\u0026quot;: \u0026quot;0.0.0\u0026quot;,\r\u0026quot;private\u0026quot;: true,\r\u0026quot;scripts\u0026quot;: {\r\u0026quot;build\u0026quot;: \u0026quot;hexo generate\u0026quot;,\r\u0026quot;clean\u0026quot;: \u0026quot;hexo clean\u0026quot;,\r\u0026quot;deploy\u0026quot;: \u0026quot;hexo deploy\u0026quot;,\r\u0026quot;server\u0026quot;: \u0026quot;hexo server\u0026quot;\r},\r\u0026quot;hexo\u0026quot;: {\r\u0026quot;version\u0026quot;: \u0026quot;4.0.0\u0026quot;\r},\r\u0026quot;dependencies\u0026quot;: {\r\u0026quot;hexo\u0026quot;: \u0026quot;^4.0.0\u0026quot;,\r\u0026quot;hexo-asset-image\u0026quot;: \u0026quot;git+https://github.com/CodeFalling/hexo-asset-image.git\u0026quot;,\r\u0026quot;hexo-blog-encrypt\u0026quot;: \u0026quot;^3.0.6\u0026quot;,\r\u0026quot;hexo-deployer-git\u0026quot;: \u0026quot;^2.0.0\u0026quot;,\r\u0026quot;hexo-generator-archive\u0026quot;: \u0026quot;^1.0.0\u0026quot;,\r\u0026quot;hexo-generator-category\u0026quot;: \u0026quot;^1.0.0\u0026quot;,\r\u0026quot;hexo-generator-index\u0026quot;: \u0026quot;^1.0.0\u0026quot;,\r\u0026quot;hexo-generator-searchdb\u0026quot;: \u0026quot;^1.1.0\u0026quot;,\r\u0026quot;hexo-generator-tag\u0026quot;: \u0026quot;^1.0.0\u0026quot;,\r\u0026quot;hexo-git-backup\u0026quot;: \u0026quot;^0.1.3\u0026quot;,\r\u0026quot;hexo-renderer-ejs\u0026quot;: \u0026quot;^1.0.0\u0026quot;,\r\u0026quot;hexo-renderer-marked\u0026quot;: \u0026quot;^2.0.0\u0026quot;,\r\u0026quot;hexo-renderer-stylus\u0026quot;: \u0026quot;^1.1.0\u0026quot;,\r\u0026quot;hexo-server\u0026quot;: \u0026quot;^1.0.0\u0026quot;,\r\u0026quot;hexo-toc\u0026quot;: \u0026quot;^1.1.0\u0026quot;,\r\u0026quot;hexo-wordcount\u0026quot;: \u0026quot;^6.0.1\u0026quot;\r}\r}\r更新 npm更新包  npm 更新全局安装的包： npm update -g -npm 更新站点文件夹根目录下安装的依赖包： cd ~/blog npm update 更新 npm ： npm install npm -g 更新 Node.js 到最新版：  npm install n -g\rn latest\r更新主题 改动不大没必要更新，更新有风险，需谨慎 cd ~/blog/themes/next/\n 直接git pull一般会失败，这是因为改过了本地配置  #先将本地的所有修改先暂时存储起来\rgit stash\r#拉取最新数据，之所以可以拉取是因为有.git文件\rgit pull\r#接下来还原暂时存储的内容\rgit stash pop\r上面失败的话是因为Git 无法确定一些改动，这时可以选择手动修改，很麻烦但是推荐使用 或者直接放弃本地修改并更新\ngit reset --hard\rgit pull\r使用 gulp 压缩 hexo 静态资源 官方文档 查看网页源代码发现有大量留白。利用 gulp压缩。首先任意目录全局安装：\nnpm install gulp-cli -g\r然后到站点文件夹根目录,cd ~/blog【省去配置环境变量的麻烦】：\nnpm install gulp-clean-css gulp-uglify gulp-htmlmin gulp-imagemin gulp-htmlclean gulp --save\r在博客根目录下创建一个名为 gulpfile.js 的文件\n// 文件位置：~/blog/gulpfile.js\r\rvar gulp = require(\u0026#39;gulp\u0026#39;);\rvar minifycss = require(\u0026#39;gulp-minify-css\u0026#39;);\rvar htmlmin = require(\u0026#39;gulp-htmlmin\u0026#39;);\rvar htmlclean = require(\u0026#39;gulp-htmlclean\u0026#39;);\rgulp.task(\u0026#39;minify-css\u0026#39;, function() {\rreturn gulp.src(\u0026#39;./public/**/*.css\u0026#39;)\r.pipe(minifycss())\r.pipe(gulp.dest(\u0026#39;./public\u0026#39;))\r});\rgulp.task(\u0026#39;minify-html\u0026#39;, function() {\rreturn gulp.src(\u0026#39;./public/**/*.html\u0026#39;)\r.pipe(htmlclean())\r.pipe(htmlmin({\rremoveComments: true,\rminifyJS: true,\rminifyCSS: true,\rminifyURLs: true\r}))\r.pipe(gulp.dest(\u0026#39;./public\u0026#39;))\r});\rgulp.task(\u0026#39;default\u0026#39;, [\u0026#39;minify-html\u0026#39;, \u0026#39;minify-css\u0026#39;]);\r部署到Github Page\nhexo clean \u0026amp;\u0026amp; hexo g \u0026amp;\u0026amp; gulp \u0026amp;\u0026amp; hexo d\r最后，图方便直接git clone 别人的博客备份，再稍微修改，删掉别人的文章就好喽！【不过你要知道别人的依赖环境才行】\n脚注添加 npm install hexo-reference --save\r在站点配置文件添加\nplugins:\rhexo-reference\r文章加密 npm install hexo-blog-encrypt\r在站点配置文件添加\n encrypt:\renable: true\r# abstract: 此文已加密，如若需要观看，请邮件联系。\r# message: password\r移除某插件 npm un \u0026lt;插件\u0026gt; --save\r修改链接样式 cd themes/next/source/css/_common/components/post \u0026amp;\u0026amp; vim post.styl\n/*修改文章内链接文本样式*/\r.post-body p a{\rcolor: #0593d3;\rborder-bottom: none;\r\u0026amp;:hover {\rcolor: #0477ab;\rtext-decoration: underline;\r}\r}\r添加 README.md 文件 每个项目下一般都有一个 README.md 文件，但是使用 hexo 部署到仓库后，项目下是没有 README.md 文件的。在 Hexo 目录下的 source 根目录下添加一个 README.md 文件，修改站点配置文件\\ _config.yml，将 skip_render 参数的值设置为\nskip\\_render: README.md\r添加Daovoice在线聊天 注册地址http://www.daovoice.io/ 使用我的邀请码进行注册：05043655 复制粘贴代码 修改的hexo的文件路劲如下: 博客/themes/next/layout/_partials/head/head.swig末尾添加下面的代码:\n{% if theme.daovoice %}\r\u0026lt;script\u0026gt;(function(i,s,o,g,r,a,m){i[\u0026#34;DaoVoiceObject\u0026#34;]=r;i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset=\u0026#34;utf-8\u0026#34;;m.parentNode.insertBefore(a,m)})(window,document,\u0026#34;script\u0026#34;,(\u0026#39;https:\u0026#39; == document.location.protocol ? \u0026#39;https:\u0026#39; : \u0026#39;http:\u0026#39;) + \u0026#34;//widget.daovoice.io/widget/b6dbddb6.js\u0026#34;,\u0026#34;daovoice\u0026#34;)\rdaovoice(\u0026#39;init\u0026#39;, {\rapp_id: \u0026#34;用户ID\u0026#34;\r});\rdaovoice(\u0026#39;update\u0026#39;);\r\u0026lt;/script\u0026gt; {% endif %}\r其中用户ID可以在Daovoice注册好页面的应用设置中找到。app_id关键字之后 在Next主题的配置文件博客/themes/next/_config.yml末尾中添加用户ID:\ndaovoice: true\rdaovoice_app_id: 用户ID\r 不大好用，加载页面不顺利\n 添加hexo-neat压缩html,js,css 首先npm install hexo-neat --save 在站点配置文件中添加\n# hexo-neat\r # 博文压缩\r neat_enable: true\r# 压缩html\r neat_html:\renable: true\rexclude:\r# 压缩css\r neat_css:\renable: true\rexclude:\r- \u0026#39;**/*.min.css\u0026#39;\r# 压缩js\r neat_js:\renable: true\rmangle: true\routput:\rcompress:\rexclude:\r- \u0026#39;**/*.js\u0026#39;\rnpm管理 #查看下载的包的路径，即npm install的包\rnpm config get prefix\r在WSL中手动安装node,hexo 在node网址寻找最新版本linux的二进制版本，以.xz结尾，如我使用以下命令安装了我的版本\nwget https://nodejs.org/dist/latest/node-v13.12.0-linux-x64.tar.xz\r解压即可tar xvf node-v13.12.0-linux-x64.tar.xz\n配置相关环境变量到~/.bashrc,运行node -v  npm -v看看是否有版本信息，之后npm install hexo-cli g安装hexo,安装路径应在node安装目录同个目录下的node_model目录下，找到hexo-cli目录，进入可以看到bin下有hexo运行程序，加入到环境变量即可，或者软连接到/usr/local/bin之类的。\n官方教程 官方教程\n","date":"2019-11-02T13:28:06Z","permalink":"https://liripo.github.io/post/hexo-github%E6%90%AD%E5%BB%BAblog/","tags":"hexo","title":"Hexo+github搭建blog"},{"content":"","date":null,"permalink":"https://liripo.github.io/tags/fiction/","tags":null,"title":"fiction"},{"content":"# 第一章 浩瀚的大陆，山峰林立，川流永动。其间万族鼎立，尤以人族昌盛。\n天行山下，有一国度，国号地运。地运建国已四百来年，传承三十个年号，甚少战乱，人口数以千万计。始值洪源年间，洪源王不知因何缘故，终日痴迷于修仙，不管国事，滋事皆有司法大监主持，各路藩王不服其管辖，各自为政，乱象环生，亦有五十来年。 “尘王爷，天级影子剑心带到。”一个老者向着大殿中的华服男子躬身行礼道。 “很好，剑心，外出游历一年如何？”那说话的男子正是现今藩王势力最大最强的洪尘王，从其口气，似乎很是看重殿下跪着的那个影子。 且说跪着的那人，一双清澈的双眸，仿佛能净化世间的所有污秽，一头长发缠绕其后，生得秀外慧中，吹弹可破的肌肤不似位处下人该有的，反倒是降落凡尘的仙人。只是本不该的，在其秀美的脸上，却被人割出一道疤。 “天行之大，远非一年我目所能及，我手中之剑，亦荡不尽天下间的不平之事。” “天行山浩浩乎不知方圆几千里，扶摇直上兮云霄蔽日，又哪里是一年能遍历得清的。” “所以此次我是来请辞的。” “你说什么？”尘王爷勃然震怒，“你想脱离影子卫，只有死亡。”愤怒的声音带着森然杀气，仿佛要生撕了那激怒他的人，空气也泛起冷意。 跪着的人缓缓站起，不卑不惧地说道：“王爷，如今乱世已启，庶民皆道唯有你才是真主，能为世人排忧解难，我却深知地运大乱正是你期望看到的，五年来，我奉命暗杀了三位藩王，各大势力数十位将军大臣，手中沾染无辜鲜血亦是无数……“ 尘王爷紧锁粗眉凤眼，反倒怒极而笑，“怎么心疼起那些腌渣泼民了！当初我在破落庙救下你时，那群乞儿的嘴脸你倒是不记得，那可是要吃人的。你倒是发了善心，怜悯起这些人，别忘了这地运大乱可是有你一半的功劳。你居然跟我说要脱离影子卫。“ 殿下的人久久不语，深知无可辩驳。mou地，剑心打破了这寂静冷然的大殿，让得殿上尘王爷脸色变了又变，周遭黑暗中所潜藏的影子也是蠢蠢而动，“此次我将入宫行刺洪源王。不论生死，我都要脱离影子卫。“ “来人，给我瞧瞧他的胆量是哪里来的。“稍微失神后，随着洪尘王的一声大喝，夜色中冒出了十来个影子，一齐向着剑心爆射而来，那阵仗，真是群狼围猎，无声无息，迅即而猛烈。不避不闪，谁料剑心快速拔出一把血色的剑，竟是将铺面而来的攻势尽数挡回。\n“剑招当流水行云，如星移斗转，浑然天成。”\n稍一运气，忆起游历所得的剑诀，随心挥舞，在这黑夜中，红色的剑光弥漫，好不美丽。一道道亮丽的剑光流转，刚刚那杀人的人反而疲于应对，局面隐隐倒向另外一边。 “够了，你倒是让我意外，虽说在我培养的人里你天赋最高，但是同时面对两个天级影子，还有这么多地级影子，竟是奈何不了你。那折损宫中的右卫士亦不如你，好，只要你能杀了那老不死的，影子卫随你去留。”洪尘王很是高兴。 “王爷？”那带领剑心过来的老者亟待阻止。 “如此多谢。”剑心说完便收剑转身离开。 “王爷，你当真让他离开？” “那也要能活着从宫里出来。你说你师弟比之他如何？” 那老者略一深思，道：“他习的是金刚神通，已臻至大成，其力拔山兮，拳碎金刚，兼之锻体，刀枪难入，只是怕是不如他……”老者内心苦涩，鹰鼻微微抽动。 “即便如此，也不至于悄无声息死在宫中。” “莫非洪源王真踏入了仙道？”老者将一直以来的想法告知洪尘王。 洪尘王面色凝重，不能否定也不敢承认。 “不管如何，若是剑心能成，便能兵不解刃，直指王都。“\n第二章 从明王殿出来，剑心径直来到郊外一处破落庙中，便是剑心遇到洪尘王的地方，不同于十三年前，没有了那要吃人的流民。寒风吹瑟，阵阵风鸣鼓噪。剑心慢慢踱步，不久又见着庙上摆着的两个牌匾陷入沉思。牌子不像是要祭奠什么人，因为上面没有名字；但看他寂寥的神情，又像为谁哀鸣。\n“杀吧，你们只有一个人能活着出来。“一个虎背熊腰，满身戾气的家伙对着我们整个殿子的人吼道。\n虽然早有准备，我还是抑制不住恐惧。 洪尘王把我从地狱救起，又推我入九幽之下。 “喂，我们必须活下去。“ 对着我的是两个与我一般年纪的双胞胎兄弟，他们容貌丑陋，畸形的脸蛋布满刀疤——那是与人逞凶斗恶留下的。虽说如此，他们却从不欺人，而平日里我就只同他们说过话，也只有他们曾冲着调戏我的人发凶。在如此境地，明知道最后会是一个人活着，他们仍旧不忘兄弟情谊。我对于他们之间的深厚感情有着强烈的憧憬，想着我这个孤儿也能有着亲人。 “小白脸，让我们在你脸上划朵花吧，我们曾经在乱葬岗见过一种很有趣的花，花红得像血，它的瓣一瓣又分成多瓣，就让这朵花给你作伴吧。哥哥，你说好不好？”一个痴笑地说着，另一个举着巨剑便砍向了我。 剩下的只有剑与剑的碰撞声，以及死亡。 “是你啊，活下来了，我给你取个名字吧。”一个宏厚的声音在我耳畔响起，夹着一点欣喜。“就叫剑心吧，持剑如心，这把心剑也赐予你吧。” 一把剑丢向了我，我已无力去接，任凭它划过我的脸庞，划出的血与其他人的血交融到了一起。\n“我准备离开了，离开这地运，离开天行。“剑心对着牌匾说道，”半年前，我在天行山脉发现了一处密洞，洞中有着一篇石记，‘天地未有仁，生死六道轮回，万事万物，莫非如是。然世间修行者，观天地诸般变化，自创法门，以证长生。历时太古，洪荒，上古，近古龙族纪元……人族参天地造化，掌天地伟力……“ “原来世间有修真者，就在天行之外。在洞中我收获了一篇星云剑诀，短短修炼半年，我的剑术便有了质的飞跃，还有就是那石头十分怪异，与心剑融到了一起，剑身变成如今这般，血色一片，血腥却令人着迷。可惜没有那修行法门，所以我欲前往寻仙，此去经年，怕是归期无望。“剑心轻轻地说着，”王爷赐予我们吃食，却又让我等自相残杀，活下来亦是血雨中度过。如今，我意已决，杀了洪源王便是我最后的报恩。那么，就此别过。“诚挚地向着那两个牌匾叩响头颅，剑心收紧从那洞中得来的血剑，向着都城急行而去。\n","date":"2019-11-01T21:26:11Z","permalink":"https://liripo.github.io/post/%E5%B0%8F%E8%AF%B4/","tags":"fiction","title":"小说"},{"content":"起初使用的是oligo与limma结合分析，可惜的是rma校正后limma分析的结果不合实际，所以直接使用GEO2R上的代码，并修改成不在线的读取data.frame。但是仍旧得探究limma直接读取cel文件的情况。其中还遇到了读取CDF文件的情况。\n芯片分析步骤 基因芯片的差异表达分析主要有 构建基因表达矩阵、构建实验设计矩阵、构建对比模型（对比矩阵）、线性模型拟合、贝叶斯检验和生成结果报表 六个关键步骤。\n文章使用的包多半是 bioconductor 上的包\n芯片数据下载  R语言直接下载，不推荐，基本不成功，或者下面的GSE19332比较小可以尝试 GEO2R使用的在线获取数据脚本  gset \u0026lt;- getGEO(\u0026#34;GSE19332\u0026#34;, GSEMatrix =TRUE, AnnotGPL=TRUE)#此处的矩阵可以换成本地的txt文件，后面的AnnotGPL为平台注释文件\r if (length(gset) \u0026gt; 1) idx \u0026lt;- grep(\u0026#34;GPL570\u0026#34;, attr(gset, \u0026#34;names\u0026#34;)) else idx \u0026lt;- 1 #此处选择GPL570的平台\r gset \u0026lt;- gset[[idx]]\r 浏览器搜索NCBI\u0026ndash;进入NCBI\u0026ndash;搜索栏输入GEO\u0026ndash;进入网址Gene Expression Omnibushttps://www.ncbi.nlm.nih.gov/geo/搜索需要的数据，如GSE19332,到达页面https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE19332，页面包括了校正好的系列矩阵，原始数据，还包含了实验信息，信息编号，芯片平台，注释信息等， GEO2R是一个软件，使用的是构建好的矩阵，但是校正好的矩阵并不是研究人员所应当使用的数据，详细使用可以搜索下。  oligo包读取CEL文件，构建表达矩阵 目前还未找到原因，oligo读取cel文件校正数据与GEO2R得出的数据相差甚远，但是此处还是将代码写出。\nrm(list=ls())\rsuppressMessages(library(oligo))\rsetwd(\u0026#34;~\u0026#34;) #设置工作目录\r celFiles \u0026lt;- list.celfiles(\u0026#34;C:\\\\Users\\\\Administrator\\\\Desktop\\\\\u0026#34;, full.name=TRUE) #读取解压后数据所在目录\r rawData \u0026lt;- read.celfiles(celFiles)#使用oligo包的函数\r exset_rma \u0026lt;-rma(rawData) #rma校正\r expmatx \u0026lt;- exprs(exset_rma) # 构建表达矩阵\r 其中rm(list=ls())是清空R当前的环境变量，写脚本在行首加上它总是好的。 suppressMessages是不提示导入包信息 很多时候，需要直接看箱线图，可以直接boxplot快速出图。\nboxplot(exset_rma, value = \u0026quot;pm\u0026quot;) 到这基本读取完毕，但是稍后使用这个矩阵得到的结果与GEO2R的结果大相径庭，其错误目前只能怀疑这个oligo包不适用这个芯片，不适用我研究过的五六个芯片。。。有时间需要查看这个包。\n在这里提个CDF文件的读取\nCDF文件读取 提交者产生CEL文件的时候使用了特殊的CDF文件。所以要用特殊化的方法进行分析。 用affy包和特殊的CDF文件分析,报错The affy package is not designed for this array type, Please use either the oligo or xps package这是因为生成了CDF的custom环境。 custom文件的官网 我使用的特殊文件需使用affy==1.40.1版本，而这一版本又依赖于R==3.4版本以下\nVersion 18 (Data Sources)\rJan 23, 2014, version 18 is released. You might want download our modified affy package, if you got error message \u0026quot;The affy package is not designed for this array type, Please use either the oligo or xps package.\u0026quot;\raffy_1.40.0.tar.gz or affy_1.40.1.zip\rcustom使用脚本\n#读取CDF文件：\r library(makecdfenv)\r#载入需要的程辑包：affyio\r pkgpath \u0026lt;-\u0026#39;/data3/liaorp/1\u0026#39;\rmake.cdf.package(\u0026#34;hugene20st_Hs_ENTREZG.cdf\u0026#34;,cdf.path= \u0026#39;/data3/liaorp/1\u0026#39;, compress=FALSE, species = \u0026#34;Homo_sapiens\u0026#34;, package.path = pkgpath)\rdir(package)\rlibrary(hugene20sthsentrezgcdf ) #导入构建好的包\r library(affy) #此处affy为1.14.0，寻找CDF文件对应affy包\r celFiles \u0026lt;- list.celfiles(\u0026#34;/data3/liaorp/MICROARRAY/测试芯片\u0026#34;, full.name=TRUE)\rcelFiles\rraw.data=ReadAffy(verbose=TRUE, filenames=celFiles, cdfname=\u0026#34;hugene20sthsentrezgcdf\u0026#34;)\r以上为记录，我对其也不甚了解\n使用limma包进行分析 有必要研究limma这个包如何读取原始文件\n#使用下载好的基因表达矩阵读取，\r gset \u0026lt;- read.table(file = \u0026#34;GSE19332_series_matrix.txt\u0026#34;, header =TRUE,\rcomment.char = \u0026#34;!\u0026#34;, row.names=1)\rif(T){\rex \u0026lt;- gset[,] #此处可以挑选感兴趣的组\r write.csv(ex, file=\u0026#34;yourname.csv\u0026#34;, row.names=T)#导出原始数据表格\r # 求log2值\r qx \u0026lt;- as.numeric(quantile(ex, c(0., 0.25, 0.5, 0.75, 0.99, 1.0), na.rm=T))\rLogC \u0026lt;- (qx[5] \u0026gt; 100) || (qx[6]-qx[1] \u0026gt; 50 \u0026amp;\u0026amp; qx[2] \u0026gt; 0) || (qx[2] \u0026gt; 0 \u0026amp;\u0026amp; qx[2] \u0026lt; 1 \u0026amp;\u0026amp; qx[4] \u0026gt; 1 \u0026amp;\u0026amp; qx[4] \u0026lt; 2)\rif (LogC) { ex[which(ex \u0026lt;= 0)] \u0026lt;- NaN\rexpmatx \u0026lt;- log2(ex) } #得到log2转换的矩阵\r #此处就是GEO2R的代码\r 构建分组矩阵 suppressMessages(library(limma))\rgrouplist = c(rep(\u0026#34;Control\u0026#34;,7), rep(\u0026#34;ALS\u0026#34;,3))#复制矢量\r design \u0026lt;- model.matrix(~0+factor(grouplist)) #创建design\r colnames(design)=levels(factor(grouplist)) # 实验设计矩阵的每一行对应一个样品的编码\r rownames(design)=colnames(expmatx) # 将行名换成表达矩阵的列名\r design\r记住，上文的grouplist这个向量应该与表达矩阵的列名是一一对应的，即是ALS对应的是表达矩阵后面的三个列，即样品名\n构建比对矩阵 contrast.matrix\u0026lt;-makeContrasts(paste0(unique(grouplist),collapse = \u0026#34;-\u0026#34;),levels = design)\rcontrast.matrix\r线性模型拟合及贝叶斯分析 fit \u0026lt;- lmFit(expmatx,design)\rfit2 \u0026lt;- contrasts.fit(fit, contrast.matrix) fit2 \u0026lt;- eBayes(fit2,0.01)\rtempOutput = topTable(fit2,coef=1,n=Inf,adjust=\u0026#34;fdr\u0026#34;, sort.by=\u0026#34;B\u0026#34;, number=1000) #此处的coef= int 对应比对矩阵的列,然后列出1000个基因或者直接全部列出呗\r nrDEG = na.omit(tempOutput) # 去除缺失值的行\r write.csv(nrDEG,\u0026#34;ALSproject-GSE19332.csv\u0026#34;,quote=F)\r以上即为GSE19332差异分析的代码\nCLL包自带的数据 AffyBatch类是从一个更基础的类eSet类衍生来的。eSet类非常重要，它被写成了一个虚类，衍生出许多非常重要的类，包括ExpressionSet类，SnpSet类以及AffyBatch类等。eSet是Bioconductor为基因表达数据格式所定制的标准，因此非常有必要熟悉eSet及其衍生类。\nlibrary(CLL)\rlibrary(affy)\rdata(CLLbatch)\rclass(CLLbatch)#可以看到CLLbatch为AffyBatch类\r library(CLL)\r# rma方法进行背景校正【当MM值比PM值还要高时，MM就是杂信号，也就是背景噪声，需要去除】\r CLLrma \u0026lt;- rma(CLLbatch)\re_before \u0026lt;- exprs(CLLbatch)\re_after \u0026lt;- exprs(CLLrma)\r#对比一下校正前后数据\r e_before[1:5,1:5]\re_after[1:5,1:5]\r#背景校正，标准化，汇总可以用一个函数来进行处理（三合一函数），但是有文献报道，该方法有缺点！暂时没有着手看这个函数\r eset.mas\u0026lt;-expresso(afbatch = CLLbatch,bgcorrect.method = \u0026#34;mas\u0026#34;,\rnormalize.method = \u0026#34;constant\u0026#34;,pmcorrect.method =\u0026#34;mas\u0026#34;,\rsummary.method = \u0026#34;mas\u0026#34;)\r参数详解：\n  afbatch:输入数据必须是\u0026quot;AffyBatch\u0026quot;类型的对象\n  bgcorrect.method:背景校正的方法\n  bgcorrect.param:指定的背景校正方法所需要的参数\n  normalize.method:标准化方法\n  normalize.param:指定的标准化方法所需要的参数\n  pmcorrect.method:PM调整方法\n  pmcorrect.param：指定的PM调整方法所需要的参数\n  summary.method:汇总方法\n  summary.param:指定的汇总方法所需要的参数\n  查看一下各种参数的方法种类：\nbgcorrect.methods() normalize.methods(CLLbatch) pmcorrect.methods() express.summary.stat.methods()\nhelp(\u0026ldquo;AffyBatch\u0026rdquo;)#查看帮助信息，似乎没有找到rma()作用于AffyBatch这个对象 #但是你会发现可以直接使用boxplot()直接对其绘图\n这个数据集有空看看。\n数据后续分析  数据可视化 柱状图，箱线图，聚类热图，火山图，GO点图，KEGG气泡图，KEGG通路图，GO柱状图等。 GO富集分析及KEGG通路分析，GSEA分析，使用包clusterProfiler  知识点 表达显著性分析：找差异基因（DEG） 判断方法：常用的有3种算法：一是倍数分析（无统计假设），计算每个基因在不同条件/样本的比值，再与阈值比较；二是用统计模型T检验等方法，计算差异表达的置信度p值，以0.05或者0.01作为阈值；三是机器学习方法，利用贝叶斯模型、随机森林等。 得到差异基因，将差异基因 GO分析：基因本体论是对基因在不同维度和不同层次上的描述，一般从三个层面进行\n Cellular component，CC 细胞成分解释的是基因存在在哪里，在细胞质还是在细胞核？如果存在细胞质那在哪个细胞器上？如果是在线粒体中那是存在线粒体膜上还是在线粒体的基质当中？ Biological process， BP 生物学过程,说明该基因参与了哪些生物学过程，比如，它参与了rRNA的加工或参与了DNA的复制 Molecular function，MF 分子功能,讲该基因在分子层面的功能是什么？它是催化什么反应的。   GO富集分析原理：有一个term注释了100个差异表达基因参与了哪个过程，注释完之后（模式生物都有现成的注释包，不用我们自己注释），计算相对于背景它是否显著集中在某条通路、某一个细胞学定位、某一种生物学功能。\n pathway代谢通路:通路分析最常使用的是KEGG【日本主导的一个项目对gene和genome进行了非常详细的注释】\nKEGG:Kyoto Encyclopedia of Genes and Genomes: 系统分析基因产物和化合物在细胞中的代谢途径以及这些基因产物的功能的数据库【基于ORA算法】\nGO负责分门别类，而pathway负责把每一类对应到具体的代谢网络中。研究pathway的原因是：生物学问题中设定一个“蝴蝶效应”假设：1个Pathway上游基因的改变，会导致下游相关基因改变，从而改变通路中大量基因的表达。\n富集分析：把上游的这些差异基因再进行注释、分组，一个类别就相当于一个GO term，然后看这几大类的区别，肯定比看几十甚至上百个基因或蛋白的差异要更加直观。目的就是根据不同功能，把各个分子进行分类，然后使用超几何分布检验进行分析。其中涉及概念，前景基因，背景基因，重点研究的基因集叫做前景基因，需要比对的所有基因集叫背景基因，前景是背景的子集。例如差异性分析数据中的差异基因就是前景基因，所有的表达基因就是背景基因。\n基因芯片：以Affymetrix为例，一个芯片可以包括上百万探针（通常由25个碱基组成），被整齐印刷在芯片上。 探针组：一个探针组通常由20对个或11个探针对组成，来自一个基因 探针对：匹配探针（Perfect match， PM）+错配探针（Mismatch， MM）。二者仅仅是中间的那个碱基不同。并非所有芯片都有这两个探针，比如外显子芯片，每个探针组只有4个PM探针，没有MM探针 CEL文件：CEL文件是Affymetrix最常用的格式，它的主要内容就是每个“cell”的灰度信息，而“cell”就是整个芯片图像划分后得到的小网格，每个小网格中的图像被看作来自一个探针。当然，如果要得到芯片上每个探针组对应的表达数据，还需要探针的排布信息（哪个探针对应哪个探针组），这部分信息就存储在CDF文件中。要想知道探针对应的序列信息，就需要用Probe文件 附上一个网址，我还没看过，https://slideplayer.com/slide/4804237/\n富集分析算法：大体上富集分析有四类算法：ORA、FCS、PT、NT1 i)ORA(Over Representation Analysis)：过表达分析 它是检验某类功能在一个数据子集中是否表现过度。又称为“2X2方法”，像上图一样，做一个列联表。上图中的ORA中，蓝圈内是感兴趣基因（8个），绿圈内是某个通路的基因（5个）；灰点是既不感兴趣又不在通路内的（6个），蓝点是感兴趣但不在通路内的（5个），绿点是在通路内但不感兴趣的（2个），红点是既感兴趣又在通路内的（3个），于是就能做出来2X2列联表。再利用fisher精确检验或超几何分布得到p值。 简而言之，需要4类数据：总共的基因数（作为背景基因）、总共属于某分类的基因数、样本包含的基因数（也就是用的差异表达基因）、样本中属于某分类的基因数\n优点：出现的最早，最常用，有完善的统计学理论基础，结果比较可靠；\n缺点：仅仅使用了基因的数目，但是基因的不同表达水平没有考虑，为了得到差异基因，需要人为设置阈值，没有一个设置规定，因此结果因人而异；适用于差异最显著的基因，而差异不显著的基因就会被忽略，检测灵敏度会降低ORA利用统计学假设每个基因相互独立，但是就生物体本身而言，忽略了内部的复杂的相互作用，并且每个基因在不同的生物学过程中发挥的作用大小不一样，同等看待结果可能会不准确\n实际上就是把我们感兴趣的基因和背景基因做一个交集。感兴趣的基因也就是差异基因了，包括上调、下调表达的（利用原始表达矩阵中p值和logFC进行筛选），一般人类芯片数据会有几百个;背景基因就是在KEGG等数据库中有注释的基因【人类基因组有2万个左右基因，现在总共有已知功能的是7000左右，随着研究的不断深入，背景基因数量会越来越多，结果也会越来越全面】 举个例子，KEGG通路hsa05206指的是MicroRNAs in Cancer，包括150个基因，背景基因使用了6517个；GSE17708芯片得到的差异基因数是547个，在KEGG能注释上的有80个，其中就有10个是MicroRNA通路的，概率高达12.5%（enrichKEGG方法都是用能在KEGG注释上的基因，比如这里用80而不是547），那么这个通路是不是在下调基因中被显著改变？需要把全部的80个下调基因，在KEGG的530个通路中注释一遍，再一个一个进行超几何分布检验，得到p值。hsa05206通路在背景基因中查到的概率是150/6517=2.3%，是显著低于12.5%的\n 超几何分布属于统计学上一种离散概率分布。它描述了由有限个物件中抽出n个物件，成功抽出指定种类的物件的个数（不归还）。n=1，超几何分布还原为伯努利分布；n接近∞，超几何分布可视为二项分布\n 差异分析R包 差异分析三R包：Limma、DESeq2、edgeR\nlimma 芯片数据普遍认为符合正态分布,而正态分布的群体一般就是用t检验（两个样本）或者方差分析（多个样本）,limma采用贝叶斯模型（Empirical Bayesian model），更新的limma-voom适配了转录组数据。\nDESeq2 DESeq2：采用负二项分布算法（negative binomial distribution）\n RNA-seq中，技术误差是满足泊松分布的，因为期望和方差差不多。但是生物学重复之间的误差不能用泊松分布来描述，因为他的方差可能很大，所以要用负二项分布2\n edgeR 使用DEGList读取表达矩阵=》利用count-per-millionCPM严格过滤count值低的数据=〉calcNormFactors函数使用TMM算法对矩阵标准化=》实验设计矩阵Design matrix , model.matrix(~0+group) =〉估算离散值dispersionestimateDisp=》构建比较矩阵makeContrasts 、glmQLFTest=〉提取差异基因decideTestsDGE 、glmTreat\n  Progress in Gene Functional Enrichment Analysis\u0026#8617;\n https://www.cnblogs.com/leezx/p/6036806.html\u0026#8617;\n  ","date":"2019-11-01T19:23:22Z","permalink":"https://liripo.github.io/post/%E5%9F%BA%E5%9B%A0%E8%8A%AF%E7%89%87%E5%B7%AE%E5%BC%82%E6%80%A7%E5%88%86%E6%9E%90/","tags":"R","title":"基因芯片差异性分析"},{"content":"Postgresql\n安装 windows，官网下载即可。\nlinux,\n创建数据库，用户 sql语句以==；==结尾,一开始可以使用psql -U postgres进入初始的超级用户\n生成新数据库CREATE DATABASE mypsql;\n创建用户 CREATE USER liripo WITH PASSWORD '123456';密码需加引号。\n赋予权限GRANT ALL PRIVILEGES ON DATABASE mysql TO liripo;\n之后即可使用psql -U liripo -d mypsql -h localhost -p 5432登录。\n使用R语言与数据库连接  使用SQL语句查询数据。\n 使用三个R包dplyr,DBI,odbc以及RPostgreSQL连接postgresql\n教程\n连接数据库，默认端口，host与shell中psql命令一致。\nmypsql \u0026lt;- DBI::dbConnect(RPostgreSQL::PostgreSQL(), dbname = \u0026#34;mypsql\u0026#34;,\ruser = \u0026#34;liripo\u0026#34;,\rpassword = rstudioapi::askForPassword(\u0026#34;Database password\u0026#34;)\r)\r返回一个s4对象；考虑到安全性，Rstudio使用其api端口键入密码。【永远不要将其记录在分析脚本中或在控制台中键入密码。】\n\u0026gt; dbListTables(mypsql)\rcharacter(0)\r可以看到数据库中还没有表，使用最常用的mtcars数据\n\u0026gt; dbWriteTable(mypsql,\u0026#34;mtcars\u0026#34;, mtcars)\r[1] TRUE\r\u0026gt; dbListTables(mypsql)\r[1] \u0026#34;mtcars\u0026#34;\r\u0026gt;res \u0026lt;- dbSendQuery(mypsql, \u0026#34;SELECT * FROM mtcars\u0026#34;)\r\u0026gt;res_df \u0026lt;- dbFetch(res)#返回数据框\r #返回后记得清除缓存\r \u0026gt;dbClearResult（res）#避免浪费资源的关键步骤\r #数据集过大应一块块获取。\r dbGetQuery()为上述三个获取数据的整合。\r试试检索数据耗时，==注：这里有无意义不清楚，而且数据量太小。==\n\u0026gt; system.time(res \u0026lt;- dbSendQuery(mypsql, \u0026#34;SELECT * FROM mtcars WHERE cyl = 4\u0026#34;))\r用户 系统 流逝 0 0 0 \u0026gt; system.time(filter(mtcars,cyl==4)%\u0026gt;%select(everything()))\r用户 系统 流逝 0.01 0.00 0.08 试着用266M的数据测试，耗时分别为\n#有一点需注意，我使用的文件列数为56,203列，在R中操作列远没有行快。不知道数据库如何，还是作一番比较试试。\r 试试进入数据库操作 SELECT * FROM mtcars;确实已经有这个表了。\nodbc包可用于Rstudio连接数据库，在Rstudio访问数据库。\n下载postgresql的windowsodbc驱动\n暂时没配置好，影响的是连接到数据库的速度。相较RPostgreSQL五到六倍??。\n交互\ncyl_code \u0026lt;- \u0026#34;4\u0026#34;\rdbGetQuery(mypsql, paste0(\u0026#34;SELECT * FROM mtcars WHERE cyl = \u0026#39;\u0026#34;, cyl_code ,\u0026#34;\u0026#39;\u0026#34;))\r#上面的cyl_code就可以自由修改了呢。\r 但是又引发一个问题，故意写成4 ;DROP TABLE mtcars不就会删除数据库表了么。gg\n修改成参数化查询。\ncyl \u0026lt;- dbSendQuery(con, \u0026#34;SELECT * FROM mtcars WHERE cyl = ?\u0026#34;)\rdbBind(cyl, list(\u0026#34;4\u0026#34;)) #使用dbBind()特定值执行查询\r dbFetch(cyl)\rdbClearResult(cyl)\r#所以一步到位dbGetQuery有分险\r 使用dplyr操作数据库？？dbplyr自动转化R代码为SQL语句？？不需载入dbplyr,看到使用数据库自动载入？？\nlibrary(dplyr)\rairline_list \u0026lt;- tbl(con, \u0026#34;airlines\u0026#34;) %\u0026gt;%\rcollect %\u0026gt;%\rsplit(.$name) %\u0026gt;% # Field that will be used for the labels\r map(~.$carrier) # Field that will be used for keys\r ","date":null,"permalink":"https://liripo.github.io/post/","tags":null,"title":""},{"content":"\r我毕业于南方医科大学\n比较擅长R语言，熟悉python,SQL等。\n","date":null,"permalink":"https://liripo.github.io/about/","tags":null,"title":"About"}]