<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Liripo</title>
    <link>https://liripo.github.io/post/</link>
    <description>Recent content in Posts on Liripo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>Zh-cn</language>
    <lastBuildDate>Sat, 15 Aug 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://liripo.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Mega使用及进化树</title>
      <link>https://liripo.github.io/post/mega%E4%BD%BF%E7%94%A8%E5%8F%8A%E8%BF%9B%E5%8C%96%E6%A0%91/</link>
      <pubDate>Sat, 15 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://liripo.github.io/post/mega%E4%BD%BF%E7%94%A8%E5%8F%8A%E8%BF%9B%E5%8C%96%E6%A0%91/</guid>
      <description>安装 https://www.megasoftware.net/，下载windows的GUI版本，要使用CC（命令行）版本&amp;ndash;配置好环境变量即可。然后如果觉得windows配置不好，也可以安装linux版本（服务器），这里我选择ubantu CC（在官网中你可以直接下载能使用的二进制文件，也可以使用*.deb文件进行安装）。
使用  分子进化的研究是核酸及氨基酸序列，究竟选择哪个？序列的选取要遵循以下原则：1）如果DNA序列的两两间的一致度≥70%，选用DNA序列。因为，如果DNA序列都如此相似，它的蛋白质会相似到看不出区别，这对构建系统发生树是不利的。所以这种情况下应该选用DNA序列，而不选蛋白质序列。2）如果DNA序列的两两间的一致度≤70%，DNA序列和蛋白质序列都可以选用。
 首先需要一个fasta文件，这在官网示例点击hsp20.meg,有一个四个物种没有比对好的fas文件（就是fasta文件）。
由于需要使用图片，这里我使用pdf文件分享，懒得把图片保存在云床上或者放在网站中了，虽然pdf也是放网站里，但是只需要操作一遍呀。（果然有图片什么的最烦了！）
==pdf路径：pdf，看后面内容直接使用pdf吧。==
可以看到一个DNA seq跟翻译的蛋白序列，然后还有个Display的栏可以更改序列的查看方式，比如换成没有背景颜色等等。具体可以自行试试。
这里我们点击Alignment栏，可以看到
有两种比对方法：ClustalW跟MUSCLE（貌似还有一个叫T-coffee）
 ClustalW是现在用的最广和最经典的多序列比对，是目前使用最广泛的多序列比对程序。（而且也可以用于双序列比对）它采用的是一种渐进的比对方法(progressive methods)，先将多个序列两两比对构建距离矩阵，反映序列之间两两关系；然后根据距离矩阵计算产生系统进化指导树，对关系密切的序列进行加权；然后从最紧密的两条序列开始，逐步引入临近的序列并不断重新构建比对，直到所有序列都被加入为止。 Muscle的速度比较快，比clustalw的速度快几个数量级,而且序列数越多速度的差别越大。不过只能用于多序列，之所以比clustalw快一方面是因为没有进行两两序列比对。  当然，也可以单独安装这几款软件进行使用。（或者使用在线工具之类的，比如https://www.ebi.ac.uk/Tools/msa/clustalw2/）
对于示例文件这种小文件，我们使用ClustalW是不错的选择。T-coffee相比似乎更慢更精确。（不过当文件相似度&amp;gt;80%时，三个程序精确度都在90%以上）
 比对结束后可以保存好比对后的fas文件，或者保存成meg文件之类的，或者每种格式都保存一次。毕竟运行一次多序列比对文件大挺耗时。
fas文件保存的是比对后文件，meg文件可以进行下一步的进化树分析。
 这里我们就可以点击PHYLOGENY进行进化树分析了，有多种方法根据距离矩阵构建进化树，之后就可以看进化树了。
linux CC 首先在GUI界面选择
之后即可进行设置生成*.mao文件了。
参数深入理解    方法名 方法名     ML，Maximum likelihood 最大似然法   NJ，Neighbor-Joining 邻接法   MP，Maximum parsimony 最大简约法   ME，Minimum Evolution 最小进化法   Bayesian 贝叶斯推断   UPGMA 不常用    进化树分析目前相对常用的方法是NJ，一篇综述（Hall BG. Mol Biol Evol 2005, 22(3):792-802）认为贝叶斯的方法最好，其次是ML，然后是MP。</description>
    </item>
    
    <item>
      <title>去批次效应</title>
      <link>https://liripo.github.io/post/%E5%8E%BB%E6%89%B9%E6%AC%A1%E6%95%88%E5%BA%94/</link>
      <pubDate>Fri, 14 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://liripo.github.io/post/%E5%8E%BB%E6%89%B9%E6%AC%A1%E6%95%88%E5%BA%94/</guid>
      <description>文章：基因表达数据批次效应去除方法的研究进展
limma::removeBatchEffect  limma 包中的removeBatchEffect 是构建了一个线性模型,然后进行QR分解从而去除批次效应
 n = 20a1 = rnorm(n,mean = 5,sd =1)a2 = rnorm(n,mean = 5,sd =1)a3 = rnorm(n,mean = 500,sd =100)a4 = rnorm(n,mean = 500,sd =100)a1[1] = 200a4[2] = 1dat = data.frame(a1,a2,a3,a4)batch = c(1,1,2,2)df = limma::removeBatchEffect(dat,batch = batch)df上面的代码第6、7行加入异常值，这导致了去批次后出现负值的情况，当然，那个负值所在的列的值(基因表达量)不一定是存在异常值，在同一批次中的某一个基因异常高表达,会导致其他基因因为表达谱相对论从而变成异常低表达。
异常值的处理方法
 使用 3σ或者 1.5IQR原则过滤异常值 log转换(这个方法可以把偏态数据进行拉回来) sigmoid函数对数据进行压缩(这个方法适用于除了异常值后方差较小的数据) 如果这个基因你压根就不关心直接删掉  </description>
    </item>
    
    <item>
      <title>NCBI学习</title>
      <link>https://liripo.github.io/post/ncbi/</link>
      <pubDate>Sun, 02 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://liripo.github.io/post/ncbi/</guid>
      <description>最新的blast可以在页面ftp://ftp.ncbi.nih.gov/blast/executables/LATEST/找到。</description>
    </item>
    
    <item>
      <title>flametree学习</title>
      <link>https://liripo.github.io/post/flametree%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Tue, 28 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://liripo.github.io/post/flametree%E5%AD%A6%E4%B9%A0/</guid>
      <description></description>
    </item>
    
    <item>
      <title>ggplot2 facet分面及宽度</title>
      <link>https://liripo.github.io/post/ggplot2-facet%E5%88%86%E9%9D%A2%E5%8F%8A%E5%AE%BD%E5%BA%A6/</link>
      <pubDate>Tue, 28 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://liripo.github.io/post/ggplot2-facet%E5%88%86%E9%9D%A2%E5%8F%8A%E5%AE%BD%E5%BA%A6/</guid>
      <description>code.sourceCode  span { display: inline-block; line-height: 1.25; }code.sourceCode  span { color: inherit; text-decoration: inherit; }code.sourceCode  span:empty { height: 1.2em; }.sourceCode { overflow: visible; }code.sourceCode { white-space: pre; position: relative; }div.sourceCode { margin: 1em 0; }pre.sourceCode { margin: 0; }@media screen {div.sourceCode { overflow: auto; }}@media print {code.sourceCode { white-space: pre-wrap; }code.sourceCode  span { text-indent: -5em; padding-left: 5em; }}pre.</description>
    </item>
    
    <item>
      <title>jupyter使用</title>
      <link>https://liripo.github.io/post/jupyter%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Mon, 20 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://liripo.github.io/post/jupyter%E4%BD%BF%E7%94%A8/</guid>
      <description>jupyter。</description>
    </item>
    
    <item>
      <title>蒙特卡洛计算Π</title>
      <link>https://liripo.github.io/post/%E8%92%99%E7%89%B9%E5%8D%A1%E6%B4%9B%E8%AE%A1%E7%AE%97%CF%80/</link>
      <pubDate>Mon, 20 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://liripo.github.io/post/%E8%92%99%E7%89%B9%E5%8D%A1%E6%B4%9B%E8%AE%A1%E7%AE%97%CF%80/</guid>
      <description></description>
    </item>
    
    <item>
      <title>ROC与AUC理解</title>
      <link>https://liripo.github.io/post/roc%E4%B8%8Eauc%E7%90%86%E8%A7%A3/</link>
      <pubDate>Tue, 28 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://liripo.github.io/post/roc%E4%B8%8Eauc%E7%90%86%E8%A7%A3/</guid>
      <description>参考网址：https://zhwhong.cn/2017/04/14/ROC-AUC-Precision-Recall-analysis/</description>
    </item>
    
    <item>
      <title>docker安装使用</title>
      <link>https://liripo.github.io/post/docker%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sat, 28 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://liripo.github.io/post/docker%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/</guid>
      <description>linux dockor.</description>
    </item>
    
    <item>
      <title>Rcpp</title>
      <link>https://liripo.github.io/post/rcpp/</link>
      <pubDate>Sat, 28 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://liripo.github.io/post/rcpp/</guid>
      <description>RCpp与R包 首先在生成R骨架的时候，比一般没调用C++多执行一下Rscript -e &#39;usethis::use_rcpp()&#39;。然后在.gitignore文件中添加src/*.o,src/*.so,src/*.dll防止编译文件导入到git中。并且在DESCRIPTION文件中必须添加LinkingTo: Rcpp, Imports: Rcpp才能识别Rcpp库。
接着就是添加两个roxygen到代码中即可。参考如下：
#&#39; @useDynLib Rcpp文件名#&#39; @importFrom Rcpp sourceCppNULL计算矩阵欧式距离 Rcpp::cppFunction(&amp;#34;NumericMatrix dist_crpp (NumericMatrix x){int row = x.nrow();double d;NumericMatrix out (row,row);for (int i = 0;i &amp;lt; row;i++){for (int j = i+1;j &amp;lt; row;j++){NumericVector v1 = x.row(i);NumericVector v2 = x.row(j);NumericVector v3 = v2 - v1;d = sqrt(sum(pow(v3,2)));out(j,i) = d;//out(i,j) = d;}}return (out);} &amp;#34;)</description>
    </item>
    
    <item>
      <title>R包开发</title>
      <link>https://liripo.github.io/post/r%E5%8C%85%E5%BC%80%E5%8F%91/</link>
      <pubDate>Sat, 28 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://liripo.github.io/post/r%E5%8C%85%E5%BC%80%E5%8F%91/</guid>
      <description>一些R包使用问题。</description>
    </item>
    
    <item>
      <title>R爬虫</title>
      <link>https://liripo.github.io/post/r%E7%88%AC%E8%99%AB/</link>
      <pubDate>Sat, 28 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://liripo.github.io/post/r%E7%88%AC%E8%99%AB/</guid>
      <description>R selenium</description>
    </item>
    
    <item>
      <title>TCGA</title>
      <link>https://liripo.github.io/post/tcga/</link>
      <pubDate>Sat, 28 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://liripo.github.io/post/tcga/</guid>
      <description></description>
    </item>
    
    <item>
      <title>unbuntu</title>
      <link>https://liripo.github.io/post/unbuntu/</link>
      <pubDate>Sat, 28 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://liripo.github.io/post/unbuntu/</guid>
      <description></description>
    </item>
    
    <item>
      <title>vim</title>
      <link>https://liripo.github.io/post/vim/</link>
      <pubDate>Sat, 28 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://liripo.github.io/post/vim/</guid>
      <description>vim 配置
bundle安装在~/.vim/bundle
如果要公用可以装在/opt/vimbundle/bundle/文件夹下，或者配置环境变量。
依赖包安装 确保环境中有cmake , python-dev , python3-dev ,没有的话需要事先安装
sudo apt-get install cmake python-dev python3-dev clangYouCompleteMe 及其依赖包下载 #在~/.vim/bundle/文件夹下git clone https://github.com/ycm-core/YouCompleteMe.gitcd YouCompleteMe# 下载依赖库，这一步与网速有关，可能会断掉报错，重新运行可以了。git submodule update --init --recursive编译YouCompleteMe 下载好YouCompleteMe 及其依赖包后，打开vi 发现仍然会报错，是因为其核心包ycmd 还没有被编译好，需要我们手动编译。
cd /opt/vimbundle/bundle/YouCompleteMe/# 具体是支持哪个python版本看自己情况，我这边指支持python，所以用python编译。要不要支持c语言也看自己需要，不需要的话就去掉`--clang-completer`。python install.py --clang-completer可能的报错 如果编译好ycmd_core 后仍然报错，那很可能就是一些python module 没有安装，通过下面方法检测出来再安装即可。
cd /opt/vimbundle/bundle/YouCompleteMe/third_party/ycmd/cp ycmd/default_settings.json .# 通过下面查看是不是出现python的某些模块没有安装，如果是，那就安装上就好了。python ycmd --options_file default_settings.json一个示例配置
syntax onset guifont=Monaco:h13&amp;#34;set tabstop=4set hlsearchset nocompatibleset nofoldenableset history=1000set backspace=indent,eol,start&amp;#34; prompt when existing from an unsaved fileset confirmset t_Co=256set titleset autoreadset spellset cursorlineset cursorcolumnset fenc=utf-8set encoding=utf-8set langmenu=zh_CN.</description>
    </item>
    
    <item>
      <title>富集分析超几何分布</title>
      <link>https://liripo.github.io/post/%E5%AF%8C%E9%9B%86%E5%88%86%E6%9E%90%E8%B6%85%E5%87%A0%E4%BD%95%E5%88%86%E5%B8%83/</link>
      <pubDate>Sat, 28 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://liripo.github.io/post/%E5%AF%8C%E9%9B%86%E5%88%86%E6%9E%90%E8%B6%85%E5%87%A0%E4%BD%95%E5%88%86%E5%B8%83/</guid>
      <description></description>
    </item>
    
    <item>
      <title>生存分析</title>
      <link>https://liripo.github.io/post/%E7%94%9F%E5%AD%98%E5%88%86%E6%9E%90/</link>
      <pubDate>Sat, 28 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://liripo.github.io/post/%E7%94%9F%E5%AD%98%E5%88%86%E6%9E%90/</guid>
      <description></description>
    </item>
    
    <item>
      <title>shiny学习</title>
      <link>https://liripo.github.io/post/shiny%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Fri, 27 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://liripo.github.io/post/shiny%E5%AD%A6%E4%B9%A0/</guid>
      <description></description>
    </item>
    
    <item>
      <title>windows10安装linux</title>
      <link>https://liripo.github.io/post/windows10%E5%AE%89%E8%A3%85linux/</link>
      <pubDate>Sat, 21 Mar 2020 14:27:47 +0000</pubDate>
      
      <guid>https://liripo.github.io/post/windows10%E5%AE%89%E8%A3%85linux/</guid>
      <description>&lt;p&gt;windows10安装ubuntu，以及源码安装python到指定目录，及更多相关配置。&lt;/p&gt;
&lt;p&gt;温馨提示：目前已有wsl2,推荐安装wsl2。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ggplot2绘制图收录</title>
      <link>https://liripo.github.io/post/ggplot2%E7%BB%98%E5%88%B6%E5%9B%BE%E6%94%B6%E5%BD%95/</link>
      <pubDate>Sun, 08 Mar 2020 19:10:29 +0000</pubDate>
      
      <guid>https://liripo.github.io/post/ggplot2%E7%BB%98%E5%88%B6%E5%9B%BE%E6%94%B6%E5%BD%95/</guid>
      <description>&lt;p&gt;文章包含一些我绘制过的ggplot2图一些美化方法。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>java更新word文档目录页码</title>
      <link>https://liripo.github.io/post/java%E6%9B%B4%E6%96%B0word%E6%96%87%E6%A1%A3%E7%9B%AE%E5%BD%95%E9%A1%B5%E7%A0%81/</link>
      <pubDate>Wed, 04 Mar 2020 22:22:45 +0000</pubDate>
      
      <guid>https://liripo.github.io/post/java%E6%9B%B4%E6%96%B0word%E6%96%87%E6%A1%A3%E7%9B%AE%E5%BD%95%E9%A1%B5%E7%A0%81/</guid>
      <description>&lt;p&gt;使用&lt;a href=&#34;https://products.aspose.com/words/java&#34;&gt;aspose-words java&lt;/a&gt;更新word文档目录页码。正版需要购买。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>数据下载工具</title>
      <link>https://liripo.github.io/post/%E6%95%B0%E6%8D%AE%E4%B8%8B%E8%BD%BD%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Sun, 01 Mar 2020 17:19:55 +0000</pubDate>
      
      <guid>https://liripo.github.io/post/%E6%95%B0%E6%8D%AE%E4%B8%8B%E8%BD%BD%E5%B7%A5%E5%85%B7/</guid>
      <description>&lt;p&gt;经常性下载速度很慢，纪录一些有用工具。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>python-docx笔记</title>
      <link>https://liripo.github.io/post/python-docx%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Wed, 12 Feb 2020 13:19:22 +0000</pubDate>
      
      <guid>https://liripo.github.io/post/python-docx%E7%AC%94%E8%AE%B0/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;docx文件是office2007之后的版本使用的，docx格式的文件本质上是一个zip文件，主要内容是保存为XML格式的，因此可以通过修改Word背后的XML文件来设置自动更新域 。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>vcf文件注释</title>
      <link>https://liripo.github.io/post/vcf%E6%96%87%E4%BB%B6%E6%B3%A8%E9%87%8A/</link>
      <pubDate>Mon, 20 Jan 2020 23:58:40 +0000</pubDate>
      
      <guid>https://liripo.github.io/post/vcf%E6%96%87%E4%BB%B6%E6%B3%A8%E9%87%8A/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;原始测序文件fq.gz经genome比对，变异检测得到vcf文件，亦即变异位点文件， 只是通过看vcf文件我们是不知道些变异位点到底是位于基因的exon、intron、UTR等的哪些区域的 ，所以需要注释， 常用的vcf注释软件有annovar和snpEff 。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>fastp&#43;gencore使用</title>
      <link>https://liripo.github.io/post/fastp-gencore%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Tue, 07 Jan 2020 23:05:42 +0000</pubDate>
      
      <guid>https://liripo.github.io/post/fastp-gencore%E4%BD%BF%E7%94%A8/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;使用以上两个软件+vardict/varscan/outLyzer构建UMI分析流程&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>翻墙？自搭！</title>
      <link>https://liripo.github.io/post/%E7%BF%BB%E5%A2%99%E8%87%AA%E6%90%AD/</link>
      <pubDate>Mon, 06 Jan 2020 23:39:54 +0000</pubDate>
      
      <guid>https://liripo.github.io/post/%E7%BF%BB%E5%A2%99%E8%87%AA%E6%90%AD/</guid>
      <description>&lt;p&gt;购买海外服务器，选用 &lt;a href=&#34;https://virmach.com/&#34;&gt;virmach&lt;/a&gt;，或者Vultr、Linode、DigitalOcean。&lt;/p&gt;
&lt;p&gt;xshell进入服务器后创建用户，非必须。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;adduser liripo &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; passwd liripo
&lt;span style=&#34;color:#75715e&#34;&gt;#添加sudo权限&lt;/span&gt;
$ vim /etc/sudoers
&lt;span style=&#34;color:#75715e&#34;&gt;#在root    ALL=(ALL)       ALL下面添加&lt;/span&gt;
liripo   ALL&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ALL&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;      ALL
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>xshell 和 xming 联合使用图形界面软件</title>
      <link>https://liripo.github.io/post/xshell-%E5%92%8C-xming-%E8%81%94%E5%90%88%E4%BD%BF%E7%94%A8%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E8%BD%AF%E4%BB%B6/</link>
      <pubDate>Mon, 23 Dec 2019 10:59:34 +0000</pubDate>
      
      <guid>https://liripo.github.io/post/xshell-%E5%92%8C-xming-%E8%81%94%E5%90%88%E4%BD%BF%E7%94%A8%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E8%BD%AF%E4%BB%B6/</guid>
      <description>&lt;p&gt;xmanger 是与xshell搭配的图形界面管理器，需要付费，作为替代，使用xming，只是运行没那么快。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>bioconductor的学习与使用</title>
      <link>https://liripo.github.io/post/bioconductor%E7%9A%84%E5%AD%A6%E4%B9%A0%E4%B8%8E%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sun, 22 Dec 2019 22:27:21 +0000</pubDate>
      
      <guid>https://liripo.github.io/post/bioconductor%E7%9A%84%E5%AD%A6%E4%B9%A0%E4%B8%8E%E4%BD%BF%E7%94%A8/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;在生物信息学领域 , bioPerl和bioPython 是使用和研究生物信息学的开发者提供的在线资源库，那么bioR应当就是bioconductor。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>bioawk使用</title>
      <link>https://liripo.github.io/post/bioawk%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Fri, 20 Dec 2019 23:22:55 +0000</pubDate>
      
      <guid>https://liripo.github.io/post/bioawk%E4%BD%BF%E7%94%A8/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;awk是我很喜欢的处理文本文件的工具，称他为一种语言也不过分了。但是在处理生信文件时还是不方便。另一种选择就是使用bioawk。唯一的短板就是无法使用awk内置变量，无法同时操作多个文件。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>grep使用</title>
      <link>https://liripo.github.io/post/grep%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Thu, 19 Dec 2019 23:34:45 +0000</pubDate>
      
      <guid>https://liripo.github.io/post/grep%E4%BD%BF%E7%94%A8/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;grep ：文本搜索工具。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>FASTQC使用</title>
      <link>https://liripo.github.io/post/fastqc%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Wed, 18 Dec 2019 12:52:21 +0000</pubDate>
      
      <guid>https://liripo.github.io/post/fastqc%E4%BD%BF%E7%94%A8/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;fastqc:一种用于高通量序列数据的质量控制应用程序。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Markdown与Typora,Rmarkdown</title>
      <link>https://liripo.github.io/post/markdown%E4%B8%8Etyporarmarkdown/</link>
      <pubDate>Tue, 17 Dec 2019 23:42:15 +0000</pubDate>
      
      <guid>https://liripo.github.io/post/markdown%E4%B8%8Etyporarmarkdown/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;http://www.markdown.cn/&#34;&gt;在线教程&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>samtools使用</title>
      <link>https://liripo.github.io/post/samtools%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Tue, 17 Dec 2019 21:19:12 +0000</pubDate>
      
      <guid>https://liripo.github.io/post/samtools%E4%BD%BF%E7%94%A8/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;samtools是一个用于操作sam和bam文件的工具合集。sam为bam文件的十进制文件；bam为二进制文件。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>bamdst使用</title>
      <link>https://liripo.github.io/post/bamdst%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Tue, 17 Dec 2019 10:56:40 +0000</pubDate>
      
      <guid>https://liripo.github.io/post/bamdst%E4%BD%BF%E7%94%A8/</guid>
      <description>&lt;p&gt;bamdst:用于计算bam文件测序深度和覆盖度（Sequencing depth and coverage）,有个疑问，应该使用哪个bam呢？？使用bwa及samtools得到的bam测序深度很高。。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Github及Git使用</title>
      <link>https://liripo.github.io/post/github%E5%8F%8Agit%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Fri, 13 Dec 2019 10:31:55 +0000</pubDate>
      
      <guid>https://liripo.github.io/post/github%E5%8F%8Agit%E4%BD%BF%E7%94%A8/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://iissnan.com/progit/&#34;&gt;Github在线教程&lt;/a&gt;【第一版】
&lt;a href=&#34;https://git-scm.com/book/zh/v2&#34;&gt;Github在线教程&lt;/a&gt;【第二版】
以下为我自己的总结&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>R与生物统计学</title>
      <link>https://liripo.github.io/post/r%E4%B8%8E%E7%94%9F%E7%89%A9%E7%BB%9F%E8%AE%A1%E5%AD%A6/</link>
      <pubDate>Mon, 09 Dec 2019 20:52:23 +0000</pubDate>
      
      <guid>https://liripo.github.io/post/r%E4%B8%8E%E7%94%9F%E7%89%A9%E7%BB%9F%E8%AE%A1%E5%AD%A6/</guid>
      <description></description>
    </item>
    
    <item>
      <title>conda</title>
      <link>https://liripo.github.io/post/conda/</link>
      <pubDate>Mon, 25 Nov 2019 20:35:16 +0000</pubDate>
      
      <guid>https://liripo.github.io/post/conda/</guid>
      <description></description>
    </item>
    
    <item>
      <title>sed使用</title>
      <link>https://liripo.github.io/post/sed%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Mon, 11 Nov 2019 19:41:39 +0000</pubDate>
      
      <guid>https://liripo.github.io/post/sed%E4%BD%BF%E7%94%A8/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;sed 命令是一个面向行处理的工具，它以“行”为处理单位，针对每一行进行处理。与awk不同，awk是以”列“为处理单位[当然，awk也是一行行进行处理的]。
&lt;a href=&#34;https://man.linuxde.net/sed%E5%9C%A8%E7%BA%BF%E6%95%99%E7%A8%8B&#34;&gt;在线教程&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>awk</title>
      <link>https://liripo.github.io/post/awk/</link>
      <pubDate>Mon, 11 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://liripo.github.io/post/awk/</guid>
      <description>&lt;p&gt;awk逐行读入文件，以空格为默认分隔符将每行切片，切开的部分再进行各种分析处理。
&lt;a href=&#34;https://github.com/wuzhouhui/awk&#34;&gt;awk书籍github&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>gitbash配置文件</title>
      <link>https://liripo.github.io/post/gitbash%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</link>
      <pubDate>Fri, 08 Nov 2019 22:37:49 +0000</pubDate>
      
      <guid>https://liripo.github.io/post/gitbash%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</guid>
      <description>&lt;p&gt;&lt;strong&gt;gitbash的好处是能在windows下使用bash命令以及自带vim编辑器。&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Bioinformatics名词,数据文件</title>
      <link>https://liripo.github.io/post/bioinformatics%E5%90%8D%E8%AF%8D%E6%95%B0%E6%8D%AE%E6%96%87%E4%BB%B6/</link>
      <pubDate>Fri, 08 Nov 2019 09:39:24 +0000</pubDate>
      
      <guid>https://liripo.github.io/post/bioinformatics%E5%90%8D%E8%AF%8D%E6%95%B0%E6%8D%AE%E6%96%87%E4%BB%B6/</guid>
      <description>&lt;p&gt;记录一些生物信息的名词与工具及各种数据库&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>概率论与数理统计学习</title>
      <link>https://liripo.github.io/post/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Sun, 03 Nov 2019 19:04:42 +0000</pubDate>
      
      <guid>https://liripo.github.io/post/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Hexo&#43;github搭建blog</title>
      <link>https://liripo.github.io/post/hexo-github%E6%90%AD%E5%BB%BAblog/</link>
      <pubDate>Sat, 02 Nov 2019 13:28:06 +0000</pubDate>
      
      <guid>https://liripo.github.io/post/hexo-github%E6%90%AD%E5%BB%BAblog/</guid>
      <description>&lt;p&gt;准备工作：安装node.js,git,hexo,加上github账户即可。
&lt;a href=&#34;https://hexo.io/zh-cn/docs/&#34;&gt;hexo官方文档&lt;/a&gt;
&lt;a href=&#34;https://help.github.com/en/github/working-with-github-pages/about-github-pages&#34;&gt;什么是Github Page&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;备注：以下前面为hexo在git for windows的配置安装，前三个标题推荐改为使用WSL&amp;gt;安装，&lt;a href=&#34;https://liripo.github.io/2020/03/21/windows10%E5%AE%89%E8%A3%85linux/#more&#34;&gt;linux子系统安装&lt;/a&gt;后可看这篇章的标题&amp;ndash;在WSL中手动安装node,hexo，之后再按照第三个标题相关配置往下进行。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>小说</title>
      <link>https://liripo.github.io/post/%E5%B0%8F%E8%AF%B4/</link>
      <pubDate>Fri, 01 Nov 2019 21:26:11 +0000</pubDate>
      
      <guid>https://liripo.github.io/post/%E5%B0%8F%E8%AF%B4/</guid>
      <description>&lt;h1 id=&#34;-&#34;&gt;# 第一章&lt;/h1&gt;
&lt;p&gt;浩瀚的大陆，山峰林立，川流永动。其间万族鼎立，尤以人族昌盛。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>基因芯片差异性分析</title>
      <link>https://liripo.github.io/post/%E5%9F%BA%E5%9B%A0%E8%8A%AF%E7%89%87%E5%B7%AE%E5%BC%82%E6%80%A7%E5%88%86%E6%9E%90/</link>
      <pubDate>Fri, 01 Nov 2019 19:23:22 +0000</pubDate>
      
      <guid>https://liripo.github.io/post/%E5%9F%BA%E5%9B%A0%E8%8A%AF%E7%89%87%E5%B7%AE%E5%BC%82%E6%80%A7%E5%88%86%E6%9E%90/</guid>
      <description>&lt;p&gt;起初使用的是oligo与limma结合分析，可惜的是rma校正后limma分析的结果不合实际，所以直接使用GEO2R上的代码，并修改成不在线的读取data.frame。但是仍旧得探究limma直接读取cel文件的情况。其中还遇到了读取CDF文件的情况。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title></title>
      <link>https://liripo.github.io/post/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://liripo.github.io/post/</guid>
      <description>&lt;p&gt;Postgresql&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>